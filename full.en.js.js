/*! Bundled by webpack from entry point: ./_Scripts/PartialJS/full/index.ts */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Content/Js/third-party/event-emitter.js":
/*!*************************************************!*\
  !*** ./Content/Js/third-party/event-emitter.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;ï»¿
/**
 * EventEmitter v4.0.1 - git.io/gTW-jg
 * Oliver Caldwell
 * MIT license
 */

;
(function (exports) {
    // JSHint config - http://www.jshint.com/
    /*jshint laxcomma:true*/
    /*global define:true*/

    // Place the script in strict mode
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class Manages event registering and emitting.
     */

    function EventEmitter() { }

    // Shortcuts to improve speed and size
    // Easy access to the prototype
    var proto = EventEmitter.prototype

    // Blank array used when no arguments are passed to emitEvent
    ,
        argumentsPlaceholder = []

        // Existence of a native index
        ,
        nativeIndexOf = argumentsPlaceholder.indexOf ? true : false;

    /**
     * Finds the index of the listener for the event in it's storage array
     *
     * @param {Function} listener Method to look for.
     * @param {Function[]} listeners Array of listeners to search through.
     * @return {Number} Index of the specified listener, -1 if not found
     */

    function indexOfListener(listener, listeners) {
        // Return the index via the native method if possible
        if (nativeIndexOf) {
            return listeners.indexOf(listener);
        }

        // There is no native method
        // Use a manual loop to find the index
        var i = listeners.length;
        while (i--) {
            // If the listener matches, return it's index
            if (listeners[i] === listener) {
                return i;
            }
        }

        // Default to returning -1
        return -1;
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     *
     * @param {String} evt Name of the event to return the listeners from.
     * @return {Function[]} All listener functions for the event.
     * @doc
     */
    proto.getListeners = function (evt) {
        // Create a shortcut to the storage object
        // Initialise it if it does not exists yet
        var events = this._events || (this._events = {});

        // Return the listener array
        // Initialise it if it does not exist
        return events[evt] || (events[evt] = []);
    };

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     *
     * @param {String} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.addListener = function (evt, listener) {
        // Fetch the listeners
        var listeners = this.getListeners(evt);

        // Push the listener into the array if it is not already there
        if (indexOfListener(listener, listeners) === -1) {
            listeners.push(listener);
        }

        // Return the instance of EventEmitter to allow chaining
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     *
     * @param {String} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.removeListener = function (evt, listener) {
        // Fetch the listeners
        // And get the index of the listener in the array
        var listeners = this.getListeners(evt),
            index = indexOfListener(listener, listeners);

        // If the listener was found then remove it
        if (index !== -1) {
            listeners.splice(index, 1);

            // If there are no more listeners in this array then remove it
            if (listeners.length === 0) {
                this._events[evt] = null;
            }
        }

        // Return the instance of EventEmitter to allow chaining
        return this;
    };

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added.
     *
     * @param {String|Object} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.addListeners = function (evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     *
     * @param {String|Object} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.removeListeners = function (evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.manipulateListeners = function (remove, evt, listeners) {
        // Initialise any required variables
        var i, value, single = remove ? this.removeListener : this.addListener,
            multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of it's properties to this method
        if (typeof evt === 'object') {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    } else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        } else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        // Return the instance of EventEmitter to allow chaining
        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     *
     * @param {String} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.removeEvent = function (evt) {
        // Remove different things depending on the state of evt
        if (evt) {
            // Remove all listeners for the specified event
            this._events[evt] = null;
        } else {
            // Remove all listeners in all events
            this._events = null;
        }

        // Return the instance of EventEmitter to allow chaining
        return this;
    };

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     *
     * @param {String} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each argument.
     * @return {Object} Current instance of EventEmitter for chaining.
     * @doc
     */
    proto.emitEvent = function (evt, args) {
        // Get the listeners for the event
        // Also initialise any other required variables
        var listeners = this.getListeners(evt),
            i = listeners.length;

        // Loop over all listeners assigned to the event
        // Apply the arguments array to each listener function
        while (i--) {
            // If the listener returns true then it shall be removed from the event
            if (listeners[i].apply(null, args || argumentsPlaceholder) === true) {
                this.removeListener(evt, listeners[i]);
            }
        }

        // Return the instance of EventEmitter to allow chaining
        return this;
    };

    // Expose the class either via AMD or the global object
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return EventEmitter;
        }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this));

/***/ }),

/***/ "./_Scripts/LegacyJS/constants.mod.js":
/*!********************************************!*\
  !*** ./_Scripts/LegacyJS/constants.mod.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KEY_CODE: () => (/* binding */ KEY_CODE)
/* harmony export */ });
ï»¿const KEY_CODE = {
    LEFT_MOUSE: 1,
    MIDDLE_MOUSE: 2,
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    PAGEUP: 33,
    PAGEDOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DEL: 46,
    0: 48,
    1: 49,
    2: 50,
    3: 51,
    4: 52,
    5: 53,
    6: 54,
    7: 55,
    8: 56,
    9: 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    F4: 115,
    COMMA: 188,
};

/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/05_StyleCode.mod.js":
/*!***********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/05_StyleCode.mod.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _05_StyleCode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./05_StyleCode */ "./_Scripts/LegacyJS/full-common/05_StyleCode.js");
/* harmony import */ var _05_StyleCode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_05_StyleCode__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (window.styleCode);


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/11_Question.mod.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/11_Question.mod.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addAnswerIvcObservers: () => (/* binding */ addAnswerIvcObservers),
/* harmony export */   bindAnonymousVoteDisclaimers: () => (/* binding */ bindAnonymousVoteDisclaimers),
/* harmony export */   bindFetchAcceptedAnswerDates: () => (/* binding */ bindFetchAcceptedAnswerDates),
/* harmony export */   canViewVoteCounts: () => (/* binding */ canViewVoteCounts),
/* harmony export */   getQuestionId: () => (/* binding */ getQuestionId),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   initShareLinks: () => (/* binding */ initShareLinks),
/* harmony export */   initTitleSearch: () => (/* binding */ initTitleSearch),
/* harmony export */   instrumentVotingForVotePromptExperiment: () => (/* binding */ instrumentVotingForVotePromptExperiment),
/* harmony export */   scrollToComment: () => (/* binding */ scrollToComment),
/* harmony export */   scrollToPost: () => (/* binding */ scrollToPost)
/* harmony export */ });
/* harmony import */ var _11_Question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./11_Question */ "./_Scripts/LegacyJS/full-common/11_Question.js");


const initTitleSearch = StackExchange.question.initTitleSearch;
const getQuestionId = StackExchange.question.getQuestionId;
const initShareLinks = StackExchange.question.initShareLinks;
const canViewVoteCounts = StackExchange.question.canViewVoteCounts;
const scrollToPost = StackExchange.question.scrollToPost;
const scrollToComment = StackExchange.question.scrollToComment;
const instrumentVotingForVotePromptExperiment = StackExchange.question.instrumentVotingForVotePromptExperiment;
const init = StackExchange.question.init;
const bindAnonymousVoteDisclaimers = StackExchange.question.bindAnonymousVoteDisclaimers;
const bindFetchAcceptedAnswerDates = StackExchange.question.bindFetchAcceptedAnswerDates;
const addAnswerIvcObservers = StackExchange.question.addAnswerIvcObservers;

/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/12_Comments.mod.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/12_Comments.mod.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extendPostUi: () => (/* binding */ extendPostUi),
/* harmony export */   flashHighlight: () => (/* binding */ flashHighlight),
/* harmony export */   highlight: () => (/* binding */ highlight),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   loadAll: () => (/* binding */ loadAll),
/* harmony export */   realtimeMessage: () => (/* binding */ realtimeMessage),
/* harmony export */   replaceAll: () => (/* binding */ replaceAll),
/* harmony export */   uiForPost: () => (/* binding */ uiForPost)
/* harmony export */ });
/* harmony import */ var _12_Comments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./12_Comments */ "./_Scripts/LegacyJS/full-common/12_Comments.js");
/* harmony import */ var _12_Comments__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_12_Comments__WEBPACK_IMPORTED_MODULE_0__);


const init = StackExchange.comments.init;
const loadAll = StackExchange.comments.loadAll;
const replaceAll = StackExchange.comments.replaceAll;
const realtimeMessage = StackExchange.comments.realtimeMessage;
const flashHighlight = StackExchange.comments.flashHighlight;
const highlight = StackExchange.comments.highlight;
const extendPostUi = StackExchange.comments.extendPostUi;
const uiForPost = StackExchange.comments.uiForPost;


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/20_Analytics.mod.js":
/*!***********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/20_Analytics.mod.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bindTrackClicks: () => (/* binding */ bindTrackClicks),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   sendPending: () => (/* binding */ sendPending),
/* harmony export */   track: () => (/* binding */ track),
/* harmony export */   trackOutboundClicks: () => (/* binding */ trackOutboundClicks)
/* harmony export */ });
/* harmony import */ var _20_Analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./20_Analytics */ "./_Scripts/LegacyJS/full-common/20_Analytics.js");
/* harmony import */ var _20_Analytics__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_20_Analytics__WEBPACK_IMPORTED_MODULE_0__);


function init(...args) {
    return StackExchange.gps.init(...args);
}
function bindTrackClicks(...args) {
    StackExchange.gps.bindTrackClicks(...args);
}
function track(...args) {
    return StackExchange.gps.track(...args);
}
function sendPending(...args) {
    return StackExchange.gps.sendPending(...args);
}
function trackOutboundClicks(...args) {
    return StackExchange.gps.trackOutboundClicks(...args);
}


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/21_OpenID.mod.js":
/*!********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/21_OpenID.mod.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initPostLogin: () => (/* binding */ initPostLogin),
/* harmony export */   showLoginModal: () => (/* binding */ showLoginModal)
/* harmony export */ });
/* harmony import */ var _21_OpenID__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./21_OpenID */ "./_Scripts/LegacyJS/full-common/21_OpenID.js");
/* harmony import */ var _21_OpenID__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_21_OpenID__WEBPACK_IMPORTED_MODULE_0__);


const initPostLogin = StackExchange.openid.initPostLogin;
const showLoginModal = StackExchange.openid.showLoginModal;


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/controllers sync (?<%21\\.mod)\\.js$":
/*!****************************************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/controllers/ sync nonrecursive (?<%21\.mod)\.js$ ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./se-char-counter.js": "./_Scripts/LegacyJS/full-common/controllers/se-char-counter.js",
	"./se-draggable.js": "./_Scripts/LegacyJS/full-common/controllers/se-draggable.js",
	"./se-share-sheet.js": "./_Scripts/LegacyJS/full-common/controllers/se-share-sheet.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./_Scripts/LegacyJS/full-common/controllers sync (?<%21\\.mod)\\.js$";

/***/ }),

/***/ "./_Scripts/LegacyJS/full-common sync (?<%21\\.mod)\\.js$":
/*!****************************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/ sync nonrecursive (?<%21\.mod)\.js$ ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./00_Header.js": "./_Scripts/LegacyJS/full-common/00_Header.js",
	"./02_TopBar.js": "./_Scripts/LegacyJS/full-common/02_TopBar.js",
	"./03_Notify.js": "./_Scripts/LegacyJS/full-common/03_Notify.js",
	"./04_MoveScroller.js": "./_Scripts/LegacyJS/full-common/04_MoveScroller.js",
	"./05_StyleCode.js": "./_Scripts/LegacyJS/full-common/05_StyleCode.js",
	"./07_TagMenu.js": "./_Scripts/LegacyJS/full-common/07_TagMenu.js",
	"./08_UserMenu.js": "./_Scripts/LegacyJS/full-common/08_UserMenu.js",
	"./09_ChatAd.js": "./_Scripts/LegacyJS/full-common/09_ChatAd.js",
	"./10_TagSanitizer.js": "./_Scripts/LegacyJS/full-common/10_TagSanitizer.js",
	"./11_Question.js": "./_Scripts/LegacyJS/full-common/11_Question.js",
	"./12_Comments.js": "./_Scripts/LegacyJS/full-common/12_Comments.js",
	"./14_TagRenderer.js": "./_Scripts/LegacyJS/full-common/14_TagRenderer.js",
	"./15_FadingHelpText.js": "./_Scripts/LegacyJS/full-common/15_FadingHelpText.js",
	"./18_jQueryCaretPlugin.js": "./_Scripts/LegacyJS/full-common/18_jQueryCaretPlugin.js",
	"./19_NoCaptcha.js": "./_Scripts/LegacyJS/full-common/19_NoCaptcha.js",
	"./20_Analytics.js": "./_Scripts/LegacyJS/full-common/20_Analytics.js",
	"./21_OpenID.js": "./_Scripts/LegacyJS/full-common/21_OpenID.js",
	"./22_UniversalAuth.js": "./_Scripts/LegacyJS/full-common/22_UniversalAuth.js",
	"./33_AnonFkeyCookie.js": "./_Scripts/LegacyJS/full-common/33_AnonFkeyCookie.js",
	"./34_jqueryUiLoader.js": "./_Scripts/LegacyJS/full-common/34_jqueryUiLoader.js",
	"./36_FlashMessage.js": "./_Scripts/LegacyJS/full-common/36_FlashMessage.js",
	"./37_PrepareEditor.js": "./_Scripts/LegacyJS/full-common/37_PrepareEditor.js",
	"./39_Auth.js": "./_Scripts/LegacyJS/full-common/39_Auth.js",
	"./40_Hero.js": "./_Scripts/LegacyJS/full-common/40_Hero.js",
	"./41_Checklist.js": "./_Scripts/LegacyJS/full-common/41_Checklist.js",
	"./44_StacksValidation.js": "./_Scripts/LegacyJS/full-common/44_StacksValidation.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./_Scripts/LegacyJS/full-common sync (?<%21\\.mod)\\.js$";

/***/ }),

/***/ "./_Scripts/LegacyJS/full sync (?<%21\\.mod)\\.js$":
/*!*********************************************************************!*\
  !*** ./_Scripts/LegacyJS/full/ sync nonrecursive (?<%21\.mod)\.js$ ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./00_Header.js": "./_Scripts/LegacyJS/full/00_Header.js",
	"./03_QuestionFullInit.js": "./_Scripts/LegacyJS/full/03_QuestionFullInit.js",
	"./04_Vote.js": "./_Scripts/LegacyJS/full/04_Vote.js",
	"./05_VoteToCloseAndFlag.js": "./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.js",
	"./06_CommentsActive.js": "./_Scripts/LegacyJS/full/06_CommentsActive.js",
	"./07_CommentTabCompleter.js": "./_Scripts/LegacyJS/full/07_CommentTabCompleter.js",
	"./08_InlineEditing.js": "./_Scripts/LegacyJS/full/08_InlineEditing.js",
	"./saves.js": "./_Scripts/LegacyJS/full/saves.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./_Scripts/LegacyJS/full sync (?<%21\\.mod)\\.js$";

/***/ }),

/***/ "./_Scripts/LegacyJS/realtime-se.mod.js":
/*!**********************************************!*\
  !*** ./_Scripts/LegacyJS/realtime-se.mod.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debug: () => (/* binding */ debug),
/* harmony export */   expandActiveQuestions: () => (/* binding */ expandActiveQuestions),
/* harmony export */   expandAnswers: () => (/* binding */ expandAnswers),
/* harmony export */   genericSubscribe: () => (/* binding */ genericSubscribe),
/* harmony export */   genericUnsubscribe: () => (/* binding */ genericUnsubscribe),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   pauseQuestionNotifications: () => (/* binding */ pauseQuestionNotifications),
/* harmony export */   reloadPosts: () => (/* binding */ reloadPosts),
/* harmony export */   simulate: () => (/* binding */ simulate),
/* harmony export */   subscribeToActiveQuestions: () => (/* binding */ subscribeToActiveQuestions),
/* harmony export */   subscribeToCounts: () => (/* binding */ subscribeToCounts),
/* harmony export */   subscribeToQuestion: () => (/* binding */ subscribeToQuestion),
/* harmony export */   subscribeToReputationNotifications: () => (/* binding */ subscribeToReputationNotifications),
/* harmony export */   subscribeToReviewDashboard: () => (/* binding */ subscribeToReviewDashboard),
/* harmony export */   subscribeToStagingGroundQuestion: () => (/* binding */ subscribeToStagingGroundQuestion),
/* harmony export */   subscribeToTopBarNotifications: () => (/* binding */ subscribeToTopBarNotifications),
/* harmony export */   subscribeToUQL: () => (/* binding */ subscribeToUQL),
/* harmony export */   unsubscribeToQuestion: () => (/* binding */ unsubscribeToQuestion),
/* harmony export */   updateRelativeDates: () => (/* binding */ updateRelativeDates)
/* harmony export */ });
/* harmony import */ var _realtime_se__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./realtime-se */ "./_Scripts/LegacyJS/realtime-se.js");
/* harmony import */ var _realtime_se__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_realtime_se__WEBPACK_IMPORTED_MODULE_0__);


const init = StackExchange.realtime.init;
const log = StackExchange.realtime.log;
const simulate = StackExchange.realtime.simulate;
const expandActiveQuestions = StackExchange.realtime.expandActiveQuestions;
const expandAnswers = StackExchange.realtime.expandAnswers;
const subscribeToActiveQuestions = StackExchange.realtime.subscribeToActiveQuestions;
const subscribeToUQL = StackExchange.realtime.subscribeToUQL;

const subscribeToQuestion = StackExchange.realtime.subscribeToQuestion;
const unsubscribeToQuestion = StackExchange.realtime.unsubscribeToQuestion;
const pauseQuestionNotifications = StackExchange.realtime.pauseQuestionNotifications;

const subscribeToStagingGroundQuestion = StackExchange.realtime.subscribeToStagingGroundQuestion;

const subscribeToReputationNotifications = StackExchange.realtime.subscribeToReputationNotifications;
const updateRelativeDates = StackExchange.realtime.updateRelativeDates;
const subscribeToReviewDashboard = StackExchange.realtime.subscribeToReviewDashboard;
const subscribeToTopBarNotifications = StackExchange.realtime.subscribeToTopBarNotifications;
const subscribeToCounts = StackExchange.realtime.subscribeToCounts;
const genericSubscribe = StackExchange.realtime.genericSubscribe;
const genericUnsubscribe = StackExchange.realtime.genericUnsubscribe;

const reloadPosts = StackExchange.realtime.reloadPosts;
const debug = StackExchange.realtime.debug;


/***/ }),

/***/ "./_Scripts/LegacyJS/stub.mod.js":
/*!***************************************!*\
  !*** ./_Scripts/LegacyJS/stub.mod.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debug: () => (/* binding */ debug),
/* harmony export */   setTooltipHtml: () => (/* binding */ setTooltipHtml),
/* harmony export */   setTooltipText: () => (/* binding */ setTooltipText)
/* harmony export */ });
const debug = StackExchange.debug;

function setTooltipHtml(jqueryObj, html, options) {
    jqueryObj.each(function () {
        Stacks.setTooltipHtml(this, html, options);
    });
}

function setTooltipText(jqueryObj, text, options) {
    jqueryObj.each(function () {
        Stacks.setTooltipText(this, text, options);
    });
}

/***/ }),

/***/ "./_Scripts/site-includes lazy recursive ^\\.\\/.*\\.mod$ exclude: index":
/*!************************************************************************************!*\
  !*** ./_Scripts/site-includes/ lazy ^\.\/.*\.mod$ exclude: index namespace object ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./chess.mod": [
		"./_Scripts/site-includes/chess.mod.ts",
		"_Scripts_site-includes_chess_mod_ts"
	],
	"./mathHideUserRep.mod": [
		"./_Scripts/site-includes/mathHideUserRep.mod.ts",
		"_Scripts_site-includes_mathHideUserRep_mod_ts"
	],
	"./poker.mod": [
		"./_Scripts/site-includes/poker.mod.ts",
		"_Scripts_site-includes_poker_mod_ts"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return __webpack_require__.e(ids[1]).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "./_Scripts/site-includes lazy recursive ^\\.\\/.*\\.mod$ exclude: index";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./node_modules/exports-loader/dist/cjs.js?exports=Svg!./node_modules/imports-loader/dist/cjs.js??ruleSet[1].rules[1].use[0]!./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./_Scripts/PartialJS/full-common/99_svg.ts":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/exports-loader/dist/cjs.js?exports=Svg!./node_modules/imports-loader/dist/cjs.js??ruleSet[1].rules[1].use[0]!./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./_Scripts/PartialJS/full-common/99_svg.ts ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Svg: () => (/* binding */ Svg)
/* harmony export */ });
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
/** NOTE: When this file is removed, also remove the svg loading functionality in webpack.common.ts **/
/**
 * DO NOT USE THIS; use `createSvgElement` from `Shared/svg-utils.mod.ts` like so:
 * ```
 * import { IconClearSm } from "@stackoverflow/stacks-icons/icon";
 * import { createSvgElement } from "./path/to/Shared/svg-utils.mod";
 * const icon = createSvgElement(IconClearSm);
 * ```
 * @deprecated
 */
class Svg {
    static getSvg(svg) {
        const $svg = $(svg);
        const ret = () => $svg;
        ret.With = function (classes) {
            return $svg.clone().addClass(classes);
        };
        ret.WithAttr = function (args) {
            const clone = $svg.clone();
            clone.attr(args);
            return clone;
        };
        return ret;
    }
}
Svg.AchievementsSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/AchievementsSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AchievementsSm.svg"));
Svg.Alert = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Alert.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Alert.svg"));
Svg.AlertCircle = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/AlertCircle.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertCircle.svg"));
Svg.AlertSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/AlertSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertSm.svg"));
Svg.Checkmark = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Checkmark.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Checkmark.svg"));
Svg.Clear = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Clear.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Clear.svg"));
Svg.ClearSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/ClearSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ClearSm.svg"));
Svg.DevTo = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/DevTo.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/DevTo.svg"));
Svg.Facebook = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Facebook.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Facebook.svg"));
Svg.HelpSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/HelpSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/HelpSm.svg"));
Svg.Link = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Link.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Link.svg"));
Svg.People = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/People.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/People.svg"));
Svg.ShareSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/ShareSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ShareSm.svg"));
Svg.TrendingDown = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/TrendingDown.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingDown.svg"));
Svg.TrendingNone = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/TrendingNone.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingNone.svg"));
Svg.TrendingUp = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/TrendingUp.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingUp.svg"));
Svg.Twitter = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/Twitter.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Twitter.svg"));
Svg.UndoSm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/UndoSm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/UndoSm.svg"));
Svg.IndustrySm = Svg.getSvg(__webpack_require__(/*! @stackoverflow/stacks-icons/dist/Icon/IndustrySm.svg */ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/IndustrySm.svg"));

/*** EXPORTS FROM exports-loader ***/



/***/ }),

/***/ "./node_modules/expose-loader/dist/cjs.js?exposes=EventEmitter!./Content/Js/third-party/event-emitter-exposed.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/expose-loader/dist/cjs.js?exposes=EventEmitter!./Content/Js/third-party/event-emitter-exposed.js ***!
  \***********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!./event-emitter.js */ "./Content/Js/third-party/event-emitter.js");
var ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ "./node_modules/expose-loader/dist/runtime/getGlobalThis.js");
var ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;
if (typeof ___EXPOSE_LOADER_GLOBAL_THIS___["EventEmitter"] === 'undefined') ___EXPOSE_LOADER_GLOBAL_THIS___["EventEmitter"] = ___EXPOSE_LOADER_IMPORT___;
else throw new Error('[exposes-loader] The "EventEmitter" value exists in the global scope, it may not be safe to overwrite it, use the "override" option')
module.exports = ___EXPOSE_LOADER_IMPORT___;


/***/ }),

/***/ "./node_modules/expose-loader/dist/cjs.js?exposes=Svg|Svg!./node_modules/exports-loader/dist/cjs.js?exports=Svg!./_Scripts/PartialJS/full-common/99_svg-exposed.ts":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/expose-loader/dist/cjs.js?exposes=Svg|Svg!./node_modules/exports-loader/dist/cjs.js?exports=Svg!./_Scripts/PartialJS/full-common/99_svg-exposed.ts ***!
  \*************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!../../../node_modules/exports-loader/dist/cjs.js?exports=Svg!../../../node_modules/imports-loader/dist/cjs.js??ruleSet[1].rules[1].use[0]!../../../node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./99_svg.ts */ "./node_modules/exports-loader/dist/cjs.js?exports=Svg!./node_modules/imports-loader/dist/cjs.js??ruleSet[1].rules[1].use[0]!./node_modules/ts-loader/index.js??ruleSet[1].rules[2].use[0]!./_Scripts/PartialJS/full-common/99_svg.ts");
var ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ "./node_modules/expose-loader/dist/runtime/getGlobalThis.js");
var ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;
var ___EXPOSE_LOADER_IMPORT_MODULE_LOCAL_NAME___ = ___EXPOSE_LOADER_IMPORT___.Svg
if (typeof ___EXPOSE_LOADER_GLOBAL_THIS___["Svg"] === 'undefined') ___EXPOSE_LOADER_GLOBAL_THIS___["Svg"] = ___EXPOSE_LOADER_IMPORT_MODULE_LOCAL_NAME___;
else throw new Error('[exposes-loader] The "Svg" value exists in the global scope, it may not be safe to overwrite it, use the "override" option')
module.exports = ___EXPOSE_LOADER_IMPORT___;


/***/ }),

/***/ "./node_modules/expose-loader/dist/runtime/getGlobalThis.js":
/*!******************************************************************!*\
  !*** ./node_modules/expose-loader/dist/runtime/getGlobalThis.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// eslint-disable-next-line func-names
module.exports = function () {
  if (typeof globalThis === "object") {
    return globalThis;
  }
  var g;
  try {
    // This works if eval is allowed (see CSP)
    // eslint-disable-next-line no-new-func
    g = this || new Function("return this")();
  } catch (e) {
    // This works if the window reference is available
    if (typeof window === "object") {
      return window;
    }

    // This works if the self reference is available
    if (typeof self === "object") {
      return self;
    }

    // This works if the global reference is available
    if (typeof __webpack_require__.g !== "undefined") {
      return __webpack_require__.g;
    }
  }
  return g;
}();

/***/ }),

/***/ "./_Scripts/LegacyJS/bounty.js":
/*!*************************************!*\
  !*** ./_Scripts/LegacyJS/bounty.js ***!
  \*************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.vote_bounty = (function () {

    function bountyClose_callback($button, postId, data) {

        if (data.Success) {

            // We used to update user's reputation, but that functionality has been broken for a while due to shifting page layouts.  We could bring that back in the future if desired.

            var newValue = $button.data('award-if-applied');

            $button
                .closest('.js-bounty-award-container')
                .find('.js-bounty-award')
                .removeClass('d-none')
                .text('+' + newValue)
                .setTooltipText(__tr(["This answer has been awarded bounties worth $bountyAmount$ reputation"], {bountyAmount: newValue}, "en", []), { placement: 'right' });

            // Remove the post notice, any bounty voting buttons, any bounty award container that does not have a visible award.
            $('.js-bounty-notification, .js-bounty-vote, .js-bounty-award-container:not(:has(.js-bounty-award:not(.d-none)))').remove();

        } else {
            toggleBountyButtonEnabled(true);
            StackExchange.helpers.showToast(data.Message, { type: 'danger' });
        }
    }

    function toggleBountyButtonEnabled(enabled) {
        $('.js-bounty-vote').prop('disabled', !enabled).find('.s-badge').toggleClass('bg-black-400');
    }

    function bountyClose($button) {

        if (!confirm(__tr(["Are you sure you want to award your bounty to this answer? You canât undo this!"], undefined, "en", []))) { return; }

        var postId = StackExchange.vote.getPostId($button);

        toggleBountyButtonEnabled(false);

        // Hide the tooltip since disabled elements don't receive mouse event.
        $button.dispatchEvent('mouseout');

        StackExchange.vote.submit({
            $target: $button,
            postId: postId,
            voteTypeId: StackExchange.vote.voteTypeIds.bountyClose,
            success: bountyClose_callback
        });
    };

    var bountyClose_init = function () {
        $(document).on('click', '.js-bounty-vote', function () { bountyClose($(this)); });
    };

    var bountyOpen_initLink = function (attachHandler, link) {
        link = $(link || $(".bounty-link"));
        link = link.off('click', bountyOpen_loadPopup);
        if (attachHandler) link.on('click', bountyOpen_loadPopup);
        return link;
    }

    var bountyOpen_loadPopup = function () {
        var link = bountyOpen_initLink(false, this);
        var postId = $(link).closest(".question").data("questionid")

        link.loadPopup({
            url: '/posts/bounty/' + postId,
        }).always(function () {
            bountyOpen_initLink(true, link);
        });
    };

    var bountyOpen_init = function () {
        bountyOpen_initLink(true);
    };

    return {
        init: function (options) {
            if (options.canOpenBounty)
                bountyOpen_init();
            if (options.hasOpenBounty)
                bountyClose_init();
        }
    };
})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/00_Header.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/00_Header.js ***!
  \****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";

// This file contains the functionality that even anonymous users need.
// During the build process, this file will also be prepended to full.part.js
// to form full.js

StackExchange.anonymous = {};




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/02_TopBar.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/02_TopBar.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/* harmony import */ var _TopBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../TopBar */ "./_Scripts/TopBar.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// trying out this inheritance helper - https://github.com/ded/klass



/*!
  * klass: a classical JS OOP faÃ§ade
  * https://github.com/ded/klass
  * License MIT (c) Dustin Diaz & Jacob Thornton 2012
  */
window.klass = (function (context) {
    context = context || this;
    var old = context.klass
      , f = 'function'
      , fnTest =  false ? 0 : /.*/
      , proto = 'prototype'

    function klass(o) {
        return extend.call(isFn(o) ? o : function () { }, o, 1)
    }

    function isFn(o) {
        return typeof o === f
    }

    function wrap(k, fn, supr) {
        return function () {
            var tmp = this.supr
            this.supr = supr[proto][k]
            var undef = {}.fabricatedUndefined
            var ret = undef
            try {
                ret = fn.apply(this, arguments)
            } finally {
                this.supr = tmp
            }
            return ret
        }
    }

    function process(what, o, supr) {
        for (var k in o) {
            if (o.hasOwnProperty(k)) {
                what[k] = isFn(o[k])
                  && isFn(supr[proto][k])
                  && fnTest.test(o[k])
                  ? wrap(k, o[k], supr) : o[k]
            }
        }
    }

    function extend(o, fromSub) {
        // must redefine noop each time so it doesn't inherit from previous arbitrary classes
        function noop() { }
        noop[proto] = this[proto]
        var supr = this
          , prototype = new noop()
          , isFunction = isFn(o)
          , _constructor = isFunction ? o : this
          , _methods = isFunction ? {} : o
        function fn() {
            if (this.initialize) this.initialize.apply(this, arguments)
            else {
                fromSub || isFunction && supr.apply(this, arguments)
                _constructor.apply(this, arguments)
            }
        }

        fn.methods = function (o) {
            process(prototype, o, supr)
            fn[proto] = prototype
            return this
        }

        fn.methods.call(fn, _methods).prototype.constructor = fn

        fn.extend = extend;
        fn[proto].implement = fn.statics = function (o, optFn) {
            o = typeof o == 'string' ? (function () {
                var obj = {}
                obj[o] = optFn
                return obj
            }()) : o
            process(this, o, supr)
            return this
        }

        return fn
    }

    klass.noConflict = function () {
        context.klass = old
        return this
    }

    return klass
})(window);

const UNREAD_MESSAGE_ICON_EVENT_SOURCE = 2;
const INBOX_POPUP_ITEM_EVENT_SOURCE = 3;

StackExchange.topbar = (function () {
    
    /*
        Base class of any dialog to be displayed when clicking a topbar button.
    */
    var Dialog = klass({ // declare instance variables
        name: '',
        url: '',
        cssClass: '', // needed for $loadingPlaceholders
        
        button: null,
        
        $dialog: null,        
        $loadingPlaceholder: null,
        $preloadedDialog: null,
        $parent: null,

        alignment: null,

        hasRead: false
    })
    .methods({
        
        isLoading: function () {
            return this.$loadingPlaceholder != null;
        },

        isLoaded: function () {
            return this.$dialog != null;
        },
        
        isVisible: function() {
            var $div = this.$dialog || this.$loadingPlaceholder;
            return $div != null && $div.is(':visible');
        },

        toggle: function (showOrHide, preventMarkAsRead) {
            if (typeof showOrHide != 'boolean') {
                throw new Error('showOrHide is a required parameter');
            }

            if (!showOrHide) { // hide
                
                // someone got impatient with a long-running request
                if (this.isLoading()) {
                    // so hide the placeholder
                    this.showOrHide(false);
                    return;
                }

                // never clicked this dialog? no work to be done! (this happens when calling hideAll)
                if (!this.isLoaded()) {
                    return;
                }
            }

            if (this.isLoaded() || this.isLoading()) {

                // toggle the already-loaded dialog or the loading placeholder
                this.showOrHide(showOrHide);  

                // only clear the unread indicators (icon count + item highlighting) when closing content we've seen
                if (!showOrHide && !preventMarkAsRead && this.hasRead) {
                    this.markAsRead();
                }              
            }
            else if (this.$preloadedDialog) {
                // sometimes we want a dialog to be extra responsive, so we'll preload most of it..
                // then, we'll load its extraneous content when clicked, e.g. the "all sites" list in the site switcher
                // note: this.$dialog will be set to this.$preloadedDialog on the first click
                this.loadChildContent();
            }
            else {
                this.loadDialog();
            }
            
            // when showing this dialog, others should be hidden
            if (showOrHide) {
                for (var i = 0; i < buttons.length; i++) {
                    if (this.button != buttons[i]) {
                        buttons[i].toggle(false, preventMarkAsRead);
                    }
                }

                // hide search popover, too
                $(".js-top-search-popover").removeClass("is-visible");
            }
        },
        
        showOrHide: function (showOrHide) {
            var $div = this.$dialog || this.$loadingPlaceholder || $();
            var $button = this.button.$button;

            if (showOrHide) {
                var $li = $button.closest('li');
                if (!this.$parent) {
                    if ($li.length > 0) {
                        this.$parent = $('<li role="presentation" />').insertAfter($li);
                    }
                }

                if (this.$parent) {
                    this.$parent.append($div);
                } else {
                    $div.insertAfter(this.button.$button);
                }

                if (!this._bound_pdub) {
                    this._bound_pdub = this.positionDialogUnderButton.bind(this);
                }
                this.positionDialogUnderButton();
                if (StackExchange.responsive) {
                    StackExchange.responsive.addBreakpointListener(this._bound_pdub);
                }
            } else {
                if (StackExchange.responsive && this._bound_pdub) {
                    StackExchange.responsive.removeBreakpointListener(this._bound_pdub);
                }
            }

            $div.toggle(showOrHide);

            if (showOrHide && this.isLoaded()) { // assume user will now have viewed the real dialog
                this.hasRead = true;
            }
        },
        
        loadChildContent: function () {
            var $childContent = this.$preloadedDialog.find('.child-content');
            this.$dialog = this.$preloadedDialog;
            
            this.showOrHide(true);

            if (!this.url) return;

            $('<div>', { 'class': 'child-content-loading' }).addSpinner().appendTo($childContent);

            var thisDialog = this;
            
            this.fetchUrl().done(function (html) {
                $childContent.html(html);
                thisDialog.afterLoad();
            });
        },

        loadDialog: function () {
            if (this.isLoading()) return;
            
            this.$loadingPlaceholder = this.getLoadingPlaceholder();
            this.showOrHide(true);
            
            var thisDialog = this;

            this.fetchUrl()
                .done(function (html) {
                    thisDialog.$dialog = $(html);
                    thisDialog.afterLoad();
                    
                    // because the user could toggle the placeholder, its visibilty takes precedence over the original intent
                    var showOrHide = thisDialog.$loadingPlaceholder.is(':visible');

                    thisDialog.showOrHide(showOrHide);
                })
                .always(function() {
                    thisDialog.$loadingPlaceholder.remove();
                    thisDialog.$loadingPlaceholder = null;
                });
        },
        
        afterLoad: function () {
            // inheritors may override, but should call this.supr()

            // hooks up events for close buttons inside the async loaded dialogs (used on mobile)
            this.$dialog.find('.js-close-button').click(function() {
                StackExchange.topbar.hideAll();
            });

            // TRACK ALL THE THINGS
            StackExchange.gps.bindTrackClicks(this.$dialog);
        },

        getLoadingPlaceholder: function () {
            var imgHtml = $('<div/>').append(StackExchange.helpers.getSpinnerImg()).html();
            var cssClasses = this.cssClass + (StackExchange.options.user.isAnonymousNetworkWide ? ' anon' : '');
            var html = [
                '<div class="topbar-dialog ', cssClasses, ' dno">',
                    '<div class="header">', imgHtml, '</div>',
                    '<div class="modal-content"/>',
                '</div>'
            ];
            return $(html.join(''));
        },

        positionDialogUnderButton: function() {
            // because the mod inbox button isn't with all the rest (and is in a different, absolutely-positioned container), 
            // we have to take measurements from the first button on the page and move the others over
            var alignment = this.alignment || "right",
                top = this.button.$button.outerHeight(),
                elem = this.$dialog || this.$loadingPlaceholder,
                positioningParent = elem.parent();
            
            // make sure to start with a clean slate by undoing the previous positioning
            ["top", "left", "right", "max-width"].forEach(function (prop) {
                elem[0].style.removeProperty(prop);
            });

            // can't use jquery's offsetParent() because it relies on the browser's Element.offsetParent which
            // returns null for display:none elements
            while (positioningParent.not("body").length && positioningParent.css("position") === "static")
                positioningParent = positioningParent.parent();
            
            positioningParent = positioningParent.length ? positioningParent : $("body");
                
            var y = this.button.$button.offset().left - positioningParent.offset().left;
            var maxwidth;
        
            if (alignment === "right") {
                y = positioningParent.outerWidth() - y - this.button.$button.outerWidth();

                // If the page is fairly narrow, the mod messages dialog (which sits far left) may end up extending to the left outside the viewport
                // at its normal width. This maxwidth ensures that the dialog goes no further then the left edge. While the dialog's responsiveness is
                // implemented mainly to support *wider*-than default, it handles shrinking by a couple pixels just fine.
                maxwidth = positioningParent.offset().left + positioningParent.outerWidth() - y;
            }
            var css = { 'top': top };

            if (!StackExchange.responsive || StackExchange.responsive.currentRange() !== "sm") { // below the small breakpoint, the CSS takes care of this.
                css[alignment] = y;
                if (maxwidth) {
                    css.maxWidth = maxwidth;
                }
            }
            
            (this.$dialog || this.$loadingPlaceholder).css(css);
        },

        fetchUrl: function () {
            log('fetching ' + this.url);
            
            var result = $.ajax({
                type: 'GET',
                url: this.url,
                dataType: 'html',
                error: function () {
                    StackExchange.helpers.showToast(__tr(["Something went wrong. Please try again."], undefined, "en", []), { type: 'danger' });
                }
            });

            return result;
        },

        markAsRead: function () {
            this.button.markAsRead();
            if (this.isLoaded()) {
                this.$dialog.find('.unread-item').removeClass('unread-item');
            }
        },

        handleRealtimeMessage: function (json) {
            // inheritors may override, but by default, just make the next click fetch fresh
            this.clearLoadedDialog();
        },
        
        clearLoadedDialog: function () {
            if (this.isLoaded()) {
                this.$dialog.remove();
                this.$dialog = null;
                this.hasRead = false;
            }
        },

        hasFocus: function () {
            return this.contains(document.activeElement);
        },

        contains: function (el) {
            var $scope = this.$dialog || this.$loadingPlaceholder;
            return $scope && $scope.length && el && $.contains($scope.get(0), el);
        }

    });
    
    /*
        Base class of icon buttons in the topbar, e.g. the Inbox button,
        that allows loading and displaying its associated Dialog.
    */
    var Button = klass({ // declare instance variables

        // these will be set in inheritors' declarations
        name: '',
        selector: '',
        dialog: null,

        // these will be set during initialize
        $button: null,
        onClass: '',
        unreadCountPrefix: '',
        queuedUnreadCount: 0,
        showsOnMouseOver: false,
        pendingUnread: {}
    })
    .methods({
        initialize: function () { // automatically called by klass during construction

            this.dialog.name = name;
            this.dialog.button = this;
            dialogs.push(this.dialog);

            // "this" inside the jquery click event is the clicked element
            var thisButton = this;
            this.$button = $(this.selector);
            this.$button.click(function () { thisButton.toggle(); return false; /* prevent navigation */ });

            // if any of the network-level dialogs are visible, mousing over another network button will show it
            if (this.showsOnMouseOver) {
                this.$button.mouseover(function (e) {
                    thisButton.showOnMouseOver();
                });
            }
            
            this.onClass = 'is-selected' + (this.onClass ? ' ' : '') + this.onClass;
        },

        toggle: function (showOrHide, preventMarkAsRead) {
            showOrHide = typeof showOrHide === 'boolean' ? showOrHide : !this.$button.hasClass(this.onClass);
            this.$button.toggleClass(this.onClass, showOrHide);
            this.$button.attr('aria-expanded', showOrHide);
            this.dialog.toggle(showOrHide, preventMarkAsRead);
            if (!showOrHide && this.dialog.hasFocus()) { this.$button.focus(); }
        },
        
        showOnMouseOver: function () {
            // https://meta.stackexchange.com/questions/210177/dont-require-a-click-to-switch-between-sites-inbox-and-achievements-on-the-ne
            var shouldShow = false;
            
            // find out if any buttons/dialogs are visible
            for (var i = 0; i < buttons.length; i++) {
                var b = buttons[i];
                if (b != this && b.showsOnMouseOver && b.isOn()) {
                    shouldShow = true;
                    break;
                }
            }
            
            if (shouldShow) {
                // quickly moving between button/dialog pairs shouldn't clear unread indicators
                this.toggle(true, /*preventMarkAsRead*/true);
            }
        },

        isOn: function() {
            return this.$button.hasClass(this.onClass);
        },

        markAsRead: function () {
            this.setUnread($.extend({ count: 0, litUp: false }, this.pendingUnread));
        },
        
        setUnread: function (status) {
            if (this.isOn()) {
                $.extend(this.pendingUnread, status);
                return;
            }

            this.pendingUnread = {};
            this.applyUnreadCount(status.count, status.litUp);
            if (status.count > 0 || status.litUp) {
                this.dialog.clearLoadedDialog();
            }
        },

        applyUnreadCount: function (unreadCount, litUp) {
            var $button = this.$button;
            var $count = $button.find('.unread-count, .js-unread-count');
            var unreadClass = $button.data('unread-class');

            if (litUp !== undefined && unreadClass) {
                $button.toggleClass(unreadClass, litUp).data('lit-up', litUp);
            }

            if (unreadCount !== undefined) {
                $button.data('unread-count', unreadCount);
                if (unreadCount > 0) {
                    $count.text(this.unreadCountPrefix + unreadCount).fadeIn().removeClass('d-none');
                } else {
                    $count.text(0).fadeOut();
                }
            }

            var newValues = this.getButtonLabelAndTitle($button.data('unread-count') || 0, !!$button.data('lit-up'));
            if (newValues) {
                $button.attr('aria-label', newValues.label);
                $button.attr('title', newValues.title);
            }
        },

        handleRealtimeMessage: function (json) {
            // inheritors may override
        },

        getButtonLabelAndTitle: function (unreadCount, litUp) {
            // inheritors may override
            return null;
        },
    });


    // subclasses of the above, organized by dialog/button pairing (i had to declare dialogs first, so buttons could instantiate them)
    
    var SiteSwitcherDialog = Dialog.extend({
        url: '/topbar/site-switcher/site-list', // returns content not already preloaded
        cssClass: 'siteSwitcher-dialog',

        $searchItems: null,
        $pinnedSiteSearchItems: null,
        isPreloaded: true,
        $preloadedDialog: $('.siteSwitcher-dialog')
    })
    .methods({
        afterLoad: function () {
            // NOTE: this is after the child content (i.e. the filterable site list) is loaded
            
            // allow filtering of sites
            this.$dialog.find('.js-site-filter-txt').typeWatch({ highlight: false, wait: 250, captureLength: -1, callback: $.proxy(this.filterSites, this) });
            this.$searchItems = this.$dialog.find('.js-other-sites li').clone().map(function () {
                return { title: $('.site-icon', this).attr('title').toLowerCase(), description: $('.site-desc', this).text().toLowerCase(), hostname: $('a', this).first().attr('href'), li: this };
            });

            // set up scrolling to the bottom of the 2nd site in the full list on search box focus
            var dialog = this.$dialog;
            this.$dialog.find('.js-site-filter-txt').focus(function () {
                var dialogBottom = dialog.offset().top + dialog.height();
                var secondSite = dialog.find('.other-sites li:nth-child(2)');
                var secondSiteBottom = secondSite.offset().top + secondSite.height();

                if (secondSiteBottom > dialogBottom) {
                    dialog.animate({
                        scrollTop: dialog.scrollTop() + secondSiteBottom - dialogBottom
                    }, 750);
                }
            });

            if (!(StackExchange.options.user.isAnonymous && !StackExchange.options.user.isAnonymousOnThisSite) && $('.pinned-site-editor-container').length) {
                $('.js-found-sites').hide();

                // wire up site search for pinning
                this.$dialog.find('#js-site-search-txt').typeWatch({ highlight: false, wait: 100, captureLength: -1, callback: $.proxy(this.findSitesToPin, this) });

                this.$dialog.find('#edit-pinned-sites').click($.proxy(this.editPinnedSites, this));
                this.$dialog.find('#cancel-pinned-sites').click({ forceListRefresh: $('#save-pinned-sites-btn').is(':enabled') }, this.cancelSiteListEdits);
                this.$dialog.find('#pin-site-btn').click($.proxy(this.pinSite, this));
                this.$dialog.on('click', '.js-remove-pinned-site-link', function() {
                    $(this).parent().remove();
                    $('#save-pinned-sites-btn').enable();
                    $('.js-reset-pinned-sites').show();
                    return false;
                });

                this.$dialog.find('#save-pinned-sites-btn').click($.proxy(this.savePinnedSites, this));
                
                this.$dialog.find('.js-reset-pinned-sites').click($.proxy(this.resetPinnedSites, this));
            }

            this.supr();
        },

        showOrHide: function (showOrHide) {
            this.supr(showOrHide);
        },

        pinSite: function () {
            $('#pin-site-btn').disable();

            var sitename = $('#js-site-search-txt').val();

            var matchingSites = $.grep(this.$pinnedSiteSearchItems, function (elem, idx) {
                return elem.sitename === sitename;
            });

            if (!matchingSites.length) {
                $('#pin-site-btn').enable();
                return;
            }

            var site = matchingSites[0];
            var alreadyPinnedSites = $('.pinned-site-link').map(function (i, s) { return $(s).data('id'); }).toArray();
            if (alreadyPinnedSites.indexOf(site.siteid) > -1) {
                $('#pin-site-btn').enable();
                return;
            }

            var dialog = this;
            $.ajax({
                type: 'GET',
                url: '/topbar/site-switcher/pin-site',
                data: { siteId: site.siteid },
                dataType: 'html'
            }).done(function (data) {
                var $data = $(data);
                $data.hide();
                $('.pinned-site-list').append($data);
                $data.fadeIn("slow");
                $('#js-site-search-txt').val('');
                $('#save-pinned-sites-btn').enable();
                dialog.toggleSiteListResetLink(true);
            }).fail(function() {
                $('#pin-site-btn').parent().showErrorMessage(__tr(["Something bad happened; please try again"], undefined, "en", []));
                $('#pin-site-btn').enable();
            });
        },
        
        savePinnedSites: function() {
            var sites = $('.pinned-site-list li .pinned-site-link').map(function(idx, site) {
                return $(site).data('id');
            }).toArray();

            var isDefault = !$('.js-reset-pinned-sites').is(':visible') || !sites.length;
            this.toggleSiteListResetLink(!isDefault);

            // get the normalized fkey from the template
            var fkey = $('.js-reset-pinned-sites').siblings('input[name=fkey]').val();

            $.ajax({
                type: 'POST',
                url: '/topbar/site-switcher/save-pinned-sites',
                data: {
                    siteIds: isDefault ? [] : sites,
                    fkey: fkey || StackExchange.options.user.fkey
                },
                dataType: 'html',
                traditional: true
            }).done($.proxy(function(data) {
                $('.my-sites').html(data);
                this.cancelSiteListEdits(false);
                $('.pinned-site-list').data('custom-list', !isDefault);
                StackExchange.using("gps", function () {
                    StackExchange.gps.track("site_switcher.edit", {});
                });
            }, this)).fail(function() {
                $('#save-pinned-sites-btn').parent().showErrorMessage(__tr(["Something bad happened; please try again"], undefined, "en", []));
            });

            return false;
        },
        
        resetPinnedSites: function () {
            var dialog = this;
            $.ajax({
                type: 'GET',
                url: '/topbar/site-switcher/default-active-sites',
                dataType: 'html'
            }).done(function(data) {
                $('.pinned-site-list').html(data);
                $('#save-pinned-sites-btn').enable();
                dialog.toggleSiteListResetLink(false);
            }).error(function() {
                $('.js-reset-pinned-sites').parent().showErrorMessage(__tr(["Something bad happened; please try again"], undefined, "en", []));
            });

            return false;
        },

        doSearch: function(items, text, track) {
            var results;
            text = text.toLowerCase();
            var matches = [];
            $.each(items, function(i, elem) {
                var result = { index: i, li: elem.li, item: elem },
                    titleIndex = elem.title.indexOf(text);

                if (elem.title == text) // exact title match
                    result.priority = 1;
                else if (titleIndex == 0) // begins-with title match
                    result.priority = 2;
                else if (titleIndex > -1) // in-title match
                    result.priority = 3;
                else if (elem.description.indexOf(text) > -1) // in-description match
                    result.priority = 4;
                else if (elem.hostname.indexOf(text) > -1) // in hostname match
                    result.priority = 5;

                if (result.priority)
                    matches.push(result);
            });
            results = matches.sort(function(a, b) {
                return a.priority - b.priority || a.index - b.index;
            });

            if(track) {
                StackExchange.using("gps", function() {
                    StackExchange.gps.track('sitesearch.submit', { term: text, numresults: matches.length }, false);
                });
            }

            return results;
        },

        _findSitesToPin: function(text) {
            var $container = $('.js-found-sites'),
                $items = this.$pinnedSiteSearchItems;

            $container.empty();

            if (text === '') {
                $container.hide();
                $('#pin-site-btn').disable();
                return;
            }

            $items = this.doSearch($items, text, false);

            if (!$items.length) return;

            $container.show();
            $('#pin-site-btn').enable();

            var alreadyPinnedSites = $('.pinned-site-link').map(function (i, site) { return $(site).data('id'); }).toArray();
            $.each($items, function(idx, elem) {
                var $li = $('<li class="pinned-site-candidate">' + elem.item.sitename + '</li>');

                if (alreadyPinnedSites.indexOf(elem.item.siteid) > -1) {
                    $li.addClass('already-pinned-site');
                }
                else {
                    $li.click(function () {
                        var sitename = $(this).text();
                        $('#js-site-search-txt').val(sitename);
                        $('.js-found-sites').hide();

                        return false;
                    });
                }
                $li.appendTo($container);
            });
        },

        findSitesToPin: function (text) {
            if (this.$pinnedSiteSearchItems) {
                this._findSitesToPin(text);
                return;
            }

            var siteSwitcher = this;
            $.ajax({
                type: 'GET',
                url: '/topbar/site-switcher/all-pinnable-sites',
                dataType: 'json'
            }).done(function (sites) {
                siteSwitcher.$pinnedSiteSearchItems = sites;
                siteSwitcher._findSitesToPin(text);
            });
        },

        filterSites: function (text) {
            var $container = $('.js-other-sites'),
                $items = this.$searchItems;

            $container.empty();
            
            if (text != '') {
                $items = this.doSearch($items, text, true);
            }
            
            $container.append($items.map(function (elem) { return this && this.li || elem.li; }));
        },

        editPinnedSites: function() {
            $('.siteSwitcher-dialog .header').not('#your-communities-header').css('opacity', 0.2);
            $('.siteSwitcher-dialog .modal-content').not('#your-communities-section').css('opacity', 0.2);

            $('.my-sites').hide();
            $('.pinned-site-editor-container').show();
            $('#edit-pinned-sites').hide();
            $('#cancel-pinned-sites').show();

            var $pinnedSiteList = $('.pinned-site-list');

            // if the list is empty, fetch it
            if ($pinnedSiteList.html().trim() === "") {
                var spinner = $('<div/>').append(StackExchange.helpers.getSpinnerImg()).html();

                $pinnedSiteList.append('<li style="text-align:center;">' + spinner + '</li>');
                $.ajax({
                    type: 'GET',
                    url: '/topbar/site-switcher/current-pinned-sites',
                    dataType: 'html'
                }).done(function(data) {
                    $pinnedSiteList.html(data);
                }).fail(function() {
                    $pinnedSiteList.showErrorMessage(__tr(["Something bad happened; please try again"], undefined, "en", []));
                }).always(function() {
                    $pinnedSiteList.find('.ajax-loader').remove();
                });
            } 
                
            this.toggleSiteListResetLink($pinnedSiteList.data('custom-list').toString().toLowerCase() === "true");

            var $sortable = $('.sortable'),
                dialog = this;

            if (!$sortable.data('isSortable')) {
                StackExchange.loadJqueryUi().done(function() {
                    $sortable
                        .sortable({
                            axis: "y",
                            update: function() {
                                $('#save-pinned-sites-btn').enable();
                                dialog.toggleSiteListResetLink(true);
                            }
                        })
                        .disableSelection()
                        .data('isSortable', true);
                });
            }

            return false;
        },

        toggleSiteListResetLink: function(showOrHide) {
            $('.js-reset-pinned-sites').toggle(showOrHide);
        },

        cancelSiteListEdits: function(forceListRefresh) {
            $('.header').not('#your-communities-header').css('opacity', 1);
            $('.modal-content').not('#your-communities-section').css('opacity', 1);

            $('.my-sites').show();
            $('#edit-pinned-sites').show();
            $('.pinned-site-editor-container').hide();
            $('#cancel-pinned-sites').hide();
            $('#save-pinned-sites-btn').disable();

            if (forceListRefresh) {
                $('.pinned-site-list').empty();
                $('.js-found-sites').hide();
                $('#js-site-search-txt').val('');
                $('#pin-site-btn').disable();
            }

            return false;
        }
    });
    var SiteSwitcherButton = Button.extend({
        name: 'SiteSwitcher',
        selector: '.js-site-switcher-button',
        dialog: new SiteSwitcherDialog(),
        showsOnMouseOver: false,
        onClass: 'icon-site-switcher-on',
    });

    var FeatureNoticeDialog = Dialog.extend({
        cssClass: 'feature-notice-dialog',
        alignment: 'left'
    })
    .methods({
        loadDialog: function () {
            // our content is already in the page, just move it to the corral so it can be styled properly
            // note: this loadDialog only gets called once; then, $dialog isn't null and can be toggled
            this.$dialog = $('.js-feature-notice-dialog');
            var button = this.button;
            var $button = button.$button;

            this.$dialog.find('.js-close-button').click(function () {

                // Remove the button completely.
                button.mark(1 << 2 /* dismissed */);
                $button.hide();
                button.toggle(false);
                return false;
            });
            this.$dialog.find('.js-cta-button').click(function () {
                button.didClickCTA = true;
                button.mark(1 << 1 /* clicked */);
                return true;
            });
            this.showOrHide(true);
        },
    });

    function updateFeatureCookie($button, fun) {
        var key = $button.data('cookie');
        if (key) {
            var newValue = fun($.cookie(key));
            if (newValue) {
                $.cookie(key, newValue, {
                    expires: (new Date($button.data('expire-date'))),
                    path: '/'
                });
            }
        }
    }

    var FeatureNoticeButton = Button.extend({
        name: 'FeatureNotice',
        selector: '.-feature-notice',
        dialog: new FeatureNoticeDialog(),
    })
    .methods({
        initialize: function () {

            Button.prototype.initialize.apply(this, arguments);

            var $button = this.$button;

            /*
            The cookie stores two different values.  Before the dialog is shown, the cookie stores the number
            of times it has been seen (counted as initializations, here).  This is used for determining when
            to auto-popup.  After the notice has been shown, it stores interaction flags and the initial
            interaction date as updated in `mark`, below.

            If the cookie exists and is not prefixed with "!", we assume it has already been marked and do
            nothing.
             */
            updateFeatureCookie($button, function (existing) {
                if (!existing)
                    return '!1';
                if (existing.substring(0, 1) == '!')
                    return '!' + (1 + parseInt(existing.substring(1)));
                return null;
            });

            if ($button.data('autopopup')) {
                this.toggle(true, false, true);
            }
        },
        mark: function (state) {
            updateFeatureCookie(this.$button, function (existing) {
                if (existing) {
                    var parts = existing.split(';');
                    if (parts.length == 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
                        return (parts[0] | state) + ';' + parts[1];
                    }
                }
                return state + ';' + Date.now();
            });
        },

        markAsRead: function () {
            if (this.didClickCTA) {
                Button.prototype.markAsRead.apply(this, arguments);
            }
        },
        toggle: function (showOrHide, preventMarkAsRead, isAutoPopup) {
            showOrHide = typeof showOrHide == 'boolean' ? showOrHide : !this.$button.hasClass(this.onClass);
            isAutoPopup = !!isAutoPopup;

            Button.prototype.toggle.apply(this, arguments);

            var $button = this.$button;
            var $dialog = this.dialog.$dialog;

            if (showOrHide) {
                this.mark(1 /* seen */);
                if (!isAutoPopup) {
                    this.mark(1 << 3 /* intentionally_seen */);
                }

                if ($button.hasClass('js-sample')) {
                    StackExchange.using('gps', function () {
                        StackExchange.gps.track('new_feature.show', {
                            campaign: $button.data('campaign'),
                            location: $button.data('location'),
                            auto_popup: isAutoPopup
                        });
                    });
                }

            }
        }
    });

    var InboxDialog = Dialog.extend({
        url: '/topbar/inbox',
        cssClass: 'inbox-dialog',
        viewUnreadOnly: false,
        ignoreRealtimeMessageDuringUserOperation: false
    })
        .methods({
            afterLoad: function () {
                this.supr();
                this.hookupMarkAllAsRead(this);
                this.hookupSwitchBetweenAllAndOnlyRead(this);
                this.hookupMarkAsReadOnClick(this);
                this.hookupReadUnreadToggles(this);
                this.hookupRefreshButton(this);
                this.enableOrDisableMarkAllAsRead(this);
            },

            // we need to get stripped fkey to explicitly say we want to call post on SO
            // otherwise we'll be marked for cross-site posting
            getStrippedFkey: function () {
                var fkey = StackExchange.options.user.fkey;
                var idx = fkey.lastIndexOf('/');
                if (idx >= 0) fkey = fkey.substr(idx + 1);
                return fkey;
            },

            hookupRefreshButton: function (context) {
                const self = context; 
                const $refreshButton = context.$dialog.find('.js-refresh-inbox');
                $refreshButton.click(function () {
                    let $topBar = $('.inbox-top-bar-readonly');
                    $topBar.prepend(StackExchange.helpers.getSpinnerImg().addClass('ta-center'));
                    $refreshButton.addClass('d-none');
                    $.ajax({
                        type: "GET",
                        url: "/topbar/notifications",
                    }).success(function (html) {
                        $('.js-inbox-notifications').html(html);
                        self.hookupMarkAsReadOnClick(self);
                        self.hookupReadUnreadToggles(self);
                        self.enableOrDisableMarkAllAsRead(self);
                    }).fail(function () {
                        $refreshButton.removeClass('d-none');
                        StackExchange.helpers.showToast(__tr(["An error occurred while reloading notifications. Please try again."], undefined, "en", []), { type: 'danger' });
                    }).always(function () {
                        $topBar.find('.ajax-loader').remove();
                    });
                });
            },

            hookupSwitchBetweenAllAndOnlyRead: function (context) {
                const self = context;
                const dialog = context.$dialog;
                dialog.find('.js-view-unread-only').click(function () {
                    dialog.find('.inbox-item').not('.unread-item').not('.js-see-all-inbox-items').addClass('d-none');
                    dialog.find('.js-inbox-header-unread').removeClass('d-none');
                    dialog.find('.js-inbox-header-all').addClass('d-none');
                    dialog.find('.js-checkmark-all').addClass('v-hidden');
                    dialog.find('.js-checkmark-unread').removeClass('v-hidden');
                    self.viewUnreadOnly = true;
                    Stacks.hidePopover($('.js-open-context-menu')[0]);
                });
                dialog.find('.js-view-read-and-unread').click(function () {
                    dialog.find('.inbox-item').not('.unread-item').not('.js-see-all-inbox-items').removeClass('d-none');
                    dialog.find('.js-inbox-header-unread').addClass('d-none');
                    dialog.find('.js-inbox-header-all').removeClass('d-none');
                    dialog.find('.js-checkmark-all').removeClass('v-hidden');
                    dialog.find('.js-checkmark-unread').addClass('v-hidden');
                    self.viewUnreadOnly = false;
                    Stacks.hidePopover($('.js-open-context-menu')[0]);
                });
            },

            hookupMarkAsReadOnClick: function (context) {
                const self = context;
                const dialog = context.$dialog;

                // hooks up events for items in the list
                dialog.find('.js-readable-inbox-item').mousedown(function (e) {
                    if (e.which != _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.LEFT_MOUSE && e.which != _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.MIDDLE_MOUSE)
                        return;
                    const $target = $(e.currentTarget);
                    if (!$target.hasClass('unread-item')) {
                        return;
                    }
                    self.clickMarkAsRead($target, self, INBOX_POPUP_ITEM_EVENT_SOURCE);
                });
                dialog.find('.js-readable-inbox-item').keyup(function (e) {
                    if (e.which != _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ENTER)
                        return;
                    const $target = $(e.currentTarget);
                    if (!$target.hasClass('unread-item')) {
                        return;
                    }
                    self.clickMarkAsRead($target, self, INBOX_POPUP_ITEM_EVENT_SOURCE);
                });
            },

            hookupReadUnreadToggles: function (context) {
                const self = context;
                const dialog = context.$dialog;

                dialog.find('.js-toggle-read').mousedown(function (e) {
                    if (e.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.LEFT_MOUSE) {
                        const $element = $(this).closest('.js-readable-inbox-item');
                        self.clickMarkAsRead($element, self, UNREAD_MESSAGE_ICON_EVENT_SOURCE);
                    }
                    e.stopImmediatePropagation();
                });

                dialog.find('.js-toggle-unread').mousedown(function (e) {
                    if (e.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.LEFT_MOUSE) {
                        const $element = $(this).closest('.js-readable-inbox-item');
                        self.clickMarkAsUnread($element, self);
                    }
                    e.stopImmediatePropagation();
                });

                dialog.find('.js-toggle-read').keyup(function (e) {
                    if (e.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ENTER) {
                        const $element = $(this).closest('.js-readable-inbox-item');
                        self.clickMarkAsRead($element, self, UNREAD_MESSAGE_ICON_EVENT_SOURCE);
                    }
                    e.stopImmediatePropagation();
                });

                dialog.find('.js-toggle-unread').keyup(function (e) {
                    if (e.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ENTER) {
                        const $element = $(this).closest('.js-readable-inbox-item');
                        self.clickMarkAsUnread($element, self);
                    }
                    e.stopImmediatePropagation();
                });
            },

            hookupMarkAllAsRead: function (context) {
                const self = context;
                const dialog = context.$dialog;
                // hooks up events for mark as read button
                dialog.find('.js-mark-all-as-read').click(function () {
                    self.ignoreRealtimeMessageDuringUserOperation = true;
                    $.ajax({
                        type: 'POST',
                        url: '/topbar/mark-all-as-read',
                        data: { fkey: self.getStrippedFkey() },
                        dataType: 'json'
                    }).done(function (result) {
                        context.button.setUnread({ count: result.UnreadMessagesCount });
                        if (context.isLoaded()) {
                            self.markMessageAsRead(dialog.find('.unread-item'));
                        }
                        self.enableOrDisableMarkAllAsRead(self);
                    }).fail(function () {
                        StackExchange.helpers.showToast(__tr(["An error occurred while updating notification status. Please try again."], undefined, "en", []), { type: 'danger' });
                    }).always(function () {
                        self.ignoreRealtimeMessageDuringUserOperation = false;
                    });
                    Stacks.hidePopover($('.js-open-context-menu')[0]);
                });
            },

            enableOrDisableMarkAllAsRead: function (context) {
                const $markAllAsReadButton = context.$dialog.find('.js-mark-all-as-read');
                var count = context.button.$button.find('.js-unread-count').text();
                $markAllAsReadButton.prop('disabled', count == 0); 
            },

            markAsRead: function () {
                if (StackExchange.settings.topBar != null && StackExchange.settings.topBar.enableInboxManagement) {
                    this.button.markAsRead();
                } else {
                    Dialog.prototype.markAsRead.apply(this);
                }
            },

            markMessageAsUnread: function ($messageLiElement) {
                $messageLiElement.addClass('unread-item').removeClass('read-item');
                $messageLiElement.find('.js-toggle-read').removeClass('d-none');
                $messageLiElement.find('.js-toggle-unread').addClass('d-none');
            },

            markMessageAsRead: function ($messageLiElement) {
                $messageLiElement.addClass('read-item').removeClass('unread-item');
                $messageLiElement.find('.js-toggle-unread').removeClass('d-none');
                $messageLiElement.find('.js-toggle-read').addClass('d-none');
            },

            clickMarkAsRead: function ($element, self, source) {
                self.ignoreRealtimeMessageDuringUserOperation = true;
                $.ajax({
                    type: 'POST',
                    url: '/topbar/mark-inbox-as-read',
                    data: { inboxId: $element.attr('id'), relatedPostId: $element.attr('relatedPostId'), source: source, fkey: self.getStrippedFkey() },
                    dataType: 'json'
                }).done(function (result) {
                    self.button.setUnread({ count: result.UnreadMessagesCount });
                    self.markMessageAsRead($element);
                    if (self.viewUnreadOnly) {
                        $element.addClass('d-none');
                    }
                    self.enableOrDisableMarkAllAsRead(self);
                }).fail(function (jqXHR) {
                    if (jqXHR.status == 0 || !jqXHR.getAllResponseHeaders()) {
                        // these are all signs that the request was aborted due to the page being unloaded,
                        // and the fail branch is hit in response to this, and not in response to an actual failure.
                        // therefore in this case, but out early, and dont show an error toast.
                        return;
                    }
                    StackExchange.helpers.showToast(__tr(["An error occurred while updating the status of the notification. Please try again."], undefined, "en", []), { type: 'danger' });
                }).always(function () {
                    self.ignoreRealtimeMessageDuringUserOperation = false;
                });
            },

            clickMarkAsUnread: function ($element, self) {
                self.ignoreRealtimeMessageDuringUserOperation = true;
                $.ajax({
                    type: 'POST',
                    url: '/topbar/mark-inbox-as-unread',
                    data: { inboxId: $element.attr('id'), relatedPostId: $element.attr('relatedPostId'), fkey: self.getStrippedFkey() },
                    dataType: 'json'
                }).done(function (result) {
                    self.button.setUnread({ count: result.UnreadMessagesCount });
                    self.markMessageAsUnread($element);
                    self.enableOrDisableMarkAllAsRead(self);
                }).fail(function () {
                    StackExchange.helpers.showToast(__tr(["An error occurred while updating the status of the notification. Please try again."], undefined, "en", []), { type: 'danger' });
                }).always(function () {
                    self.ignoreRealtimeMessageDuringUserOperation = false;
                });
            }
        });
    var InboxButton = Button.extend({
        name: 'Inbox', 
        selector: '.js-inbox-button', 
        dialog: new InboxDialog(),
        showsOnMouseOver: false
    })
    .methods({
        handleRealtimeMessage: function (json) {
            this.setUnread({ count: json.UnreadInboxCount });
            if (StackExchange.settings.topBar != null && StackExchange.settings.topBar.enableInboxManagement && !this.dialog.ignoreRealtimeMessageDuringUserOperation) {
                let refreshButton = $('.js-refresh-inbox');
                refreshButton.html(__tr(["Refresh ($count$)","Refresh ($count$)"], {count: json.UnreadInboxCount}, "en", ["count"]));
                refreshButton.removeClass('d-none');
            }
        },

        getButtonLabelAndTitle: function (unreadCount) {
            var label, title;
            if (unreadCount > 0) {
                label = __tr(["Inbox ($__count$ unread message)","Inbox ($__count$ unread messages)"], {__count: unreadCount}, "en", ["__count"]);
                title = __tr(["You have unread inbox messages"], undefined, "en", []);
            }
            else {
                label = __tr(["Inbox"], undefined, "en", []);
                title = __tr(["Recent inbox messages"], undefined, "en", []);
            }
            return { label: label, title: title };
        },

        markAsRead: function () {
            if (StackExchange.settings.topBar != null && StackExchange.settings.topBar.enableInboxManagement) {
                return;
            }
            Button.prototype.markAsRead.apply(this);
        },

        setUnread: function (status) {
            if (StackExchange.settings.topBar != null && StackExchange.settings.topBar.enableInboxManagement) {
                this.pendingUnread = {};
                this.applyUnreadCount(status.count, status.litUp);
            } else {
                Button.prototype.setUnread.apply(this, arguments);
            }
        },
    });

    
    var AchievementsDialog = Dialog.extend({
        url: (StackExchange.options.site.routePrefix || '') + '/topbar/achievements',
        cssClass: 'achievements-dialog'
    })
    .methods({
        afterLoad: function () {
            this.alignRep();
            this.bindDateGroupToggles();
            this.displayUtcTime();
            this.bindGpsTracker();
            this.supr();
        },
        
        alignRep: function() {
            // HACK: everyone be hatin' on <table>, so we need to ensure the rep "column" is the same width all the way down
            var $cols = this.$dialog.find('.js-items .js-faux-column'),
                maxChars = 0;

            $cols.filter('.js-rep-change').each(function () {
                var chars = $.trim($(this).text()).length;
                if (chars > maxChars) {
                    maxChars = chars;
                }
            });

            if (maxChars > 0) {
                $cols.width((maxChars + 1) * 6); // TODO: actually measure what we really need, but this works from 2 chars up to 4 chars
            }
        },
        
        bindDateGroupToggles: function () {
            this.$dialog.find('.js-date-group-toggle').click(function () {
                var $toggle = $(this),
                    $group = $toggle.closest('.js-date-group'),
                    $items = $group.find('.js-items'),
                    $summation = $group.find('.rep-site-container');

                $toggle.find('.date-group-toggle').toggleClass('toggle-hidden');
                $items.add($summation).fadeToggle('fast');
            });
            this.$dialog.find('.rep-site-container').on('click', function (e) {
                e.stopImmediatePropagation();
            });
        },
        
        displayUtcTime: function () {
            var $dialog = this.$dialog,
                setTime = function () {
                    var now = new Date();
                    now.setTime(now.getTime() + StackExchange.options.serverTimeOffsetSec * 1000);
                    var h = now.getUTCHours(),
                        m = now.getUTCMinutes();
                    if (h < 10) h = "0" + h;
                    if (m < 10) m = "0" + m;
                    $dialog.find('.js-utc-time').text(h + ":" + m);
                };

            setTime();
            setInterval(setTime, 1000 * 60); // TODO: could unbind this when the dialog is hidden
        },

        bindGpsTracker: function() {
            // https://trello.com/c/D7xXfTPP
            var container = $('#js-gps-container.js-empty-achiev');
            container.find('a:first').addClass('js-gps-track').data('gps-track', 'achievements_popup.click({ item_type:6 })');
            container.find('a:last').addClass('js-gps-track').data('gps-track', 'achievements_popup.click({ item_type:7 })');
            StackExchange.gps.bindTrackClicks(container);
        }
    });
    var AchievementsButton = Button.extend({
        name: 'Achievements', 
        selector: '.js-achievements-button', 
        dialog: new AchievementsDialog(),
        unreadCountPrefix: '+',
        showsOnMouseOver: false
    })
    .methods({
        handleRealtimeMessage: function (json) {
            var status = { count: json.UnreadRepCount };
            if (json.UnreadNonRepCount !== undefined) { status.litUp = json.UnreadNonRepCount > 0; }
            this.setUnread(status);
        },
        getButtonLabelAndTitle: function (unreadCount, hasUnreadAchievements) {
            var label, title;
            if (unreadCount > 0) {
                label = __tr(["Achievements ($__count$ new reputation)","Achievements ($__count$ new reputation)"], {__count: unreadCount}, "en", ["__count"]);
                title = __tr(["You have new reputation changes"], undefined, "en", []);
            }
            else if (hasUnreadAchievements) {
                label = __tr(["Achievements (unread)"], undefined, "en", []);
                title = __tr(["You have new achievements"], undefined, "en", []);
            }
            else {
                label = __tr(["Achievements"], undefined, "en", []);
                title = __tr(["Recent achievements: reputation, badges, and privileges earned"], undefined, "en", []);
            }
            return { label: label, title: title };
        },
    });
    
    var HelpDialog = Dialog.extend({
        cssClass: 'help-dialog'
    })
    .methods({
        loadDialog: function () {
            // our content is already in the page, just move it to the corral so it can be styled properly
            // note: this loadDialog only gets called once; then, $dialog isn't null and can be toggled
            this.$dialog = $('.js-help-dialog');
            this.showOrHide(true);
        }
    });
    var HelpButton = Button.extend({
        name: 'Help', 
        selector: '.js-help-button', 
        dialog: new HelpDialog()
    });

    var NetworkLogoDialog = Dialog.extend({
        cssClass: 'network-logo-dialog',
        alignment: 'left'
    })
    .methods({
        loadDialog: function () {
            // our content is already in the page, just move it to the corral so it can be styled properly
            // note: this loadDialog only gets called once; then, $dialog isn't null and can be toggled
            this.$dialog = $('.js-network-logo-dialog');
            this.showOrHide(true);

            var button = this.button;
            this.$dialog.find('.js-close-button').click(function () {
                button.toggle(false);
                return false;
            });
        },
    });
    var NetworkLogoButton = Button.extend({
        name: 'NetworkLogo',
        selector: '.js-network-logo',
        dialog: new NetworkLogoDialog()
    });

    var ReviewDialog = Dialog.extend({
        url: '/topbar/review',
        cssClass: 'review-dialog'
    });

    var ReviewButton = Button.extend({
        name: 'Review',
        selector: '.js-review-button',
        dialog: new ReviewDialog()
    });

    var ModInboxDialog = Dialog.extend({
        url: '/topbar/mod-inbox',
        cssClass: 'modInbox-dialog'
    })
    .methods({
        
    });
    var ModInboxButton = Button.extend({
        name: 'ModInbox', 
        selector: '.js-mod-inbox-button', 
        dialog: new ModInboxDialog()
    });
    var LeftNavHamburgerDialog = Dialog.extend({
        cssClass: 'js-leftnav-dialog',
        alignment: 'left'
    })
    .methods({
        loadDialog: function () {
            this.$dialog = $('.js-leftnav-dialog');
            this.showOrHide(true);
            var that = this;
            if (StackExchange.responsive) {
                StackExchange.responsive.addBreakpointListener(function (newRange, oldRange) {
                    if ($("html").hasClass("html__unpinned-leftnav")) {
                        return;
                    }
                    // close the dialog if left nav is pinned and we're moving from small to medium
                    // (in the small range it's always unpinned)
                    if (oldRange === "sm") {
                        that.button.toggle(false);
                    }
                });
            }
        }
    });

    var LeftNavHamburgerButton = Button.extend({
        name: 'LeftNav',
        selector: '.js-left-sidebar-toggle',
        dialog: new LeftNavHamburgerDialog()
    });

    

    function log(message) {
        if (!StackExchange.options.enableLogging) return;
        console.log('topbar: ' + message);
    };

    function isButtonOrDialogClick(clickedElement) {
        for (var i = 0; i < buttons.length; i++) {
            var button = buttons[i];

            if ((button.$button || $()).get(0) === clickedElement) {
                return true;
            }

            if (button.dialog && button.dialog.contains(clickedElement)) {
                return true;
            }
        }
        return false;
    };
    
    function hideAll() {
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].toggle(false);
        }
    };

    function handleRealtimeMessage(data) {
        var json;
        if (!data || !(json = JSON.parse(data))) return;

        log('realtime message - ' + data);
        
        // each top-level property on the json corresponds to a button name
        for (var prop in json) {
            for (var i = 0; i < buttons.length; i++) {
                if (prop == buttons[i].name) {
                    buttons[i].handleRealtimeMessage(json[prop]);
                    break;
                }
            }
        }
    };


    /**
     * @typedef SearchAutoCompleteConstructorOptions
     * @type {object}
     * @property {boolean} enableHints - should search hints be fetched and used?  if false, popover will be hidden when no query
     * @property {boolean} enablePrizm - should GPS events be fired?
     * @property {boolean} isTopbarAware - should this autocomplete be hidden if a topbar popup is shown or vice-versa?
     * @property {SearchAutoCompleteConstructorOptions~onChoiceCallback} onChoice
     * @property {string} searchUrl - where to send queries to; should return an AutoCompleteResult.cshtml
     * @property {SearchAutoCompleteConstructorOptions~transformResultsHtmlCallback} transformResultsHtml
     */

    /**
     * @callback SearchAutoCompleteConstructorOptions~onChoiceCallback
     * @param {JQuery} $chosenItem - the .js-ac-result that was mouse-clicked/keyboard-entered
     */

    /**
     * @callback SearchAutoCompleteConstructorOptions~transformResultsHtmlCallback
     * @param {string} html - the list of results we fetched for a given search
     * @returns {JQuery} what will be inserted into the results container
     */

    /**
     * Search help and autocomplete
     * 
     *   - used on channels/enterprise topbar search
     *   - used on PostCollections Show Page's Edit path
     *   
     * @param $searchBox {jQuery} inside of a .js-search--outer-container
     * @param options {SearchAutoCompleteConstructorOptions}
     * @constructor
     */ 
    function SearchAutoComplete($searchBox, options) {
        
        var self = this;

        /** @type {SearchAutoCompleteConstructorOptions} */
        var defaults = {
            enableHints: true,
            enablePrizm: true,
            isTopbarAware: true,
            onChoice: null,
            searchUrl: '/search/ac?q=',
            transformResultsHtml: null
        };
        this.settings = $.extend({}, defaults, options);
        
        this.resultsCache = {};
        this.searchHintsLoaded = false;
        
        // when true, showing the popup (usually after clicking somewhere else to close it) will re-render the results 
        this.refreshResultsOnNextShow = false;
        $searchBox.on('s-popover:show', function() {
            if (self.refreshResultsOnNextShow) {
                self.suggest.call(self);
                self.refreshResultsOnNextShow = false;
            }
        });
        
        var $searchPopover = $('#' + $searchBox.attr('aria-controls')); // usually .js-top-search-popover
        var $resultsDiv = $searchPopover.find('.js-ac-results');

        this.$searchPopover = $searchPopover;
        this.$searchBox = $searchBox; // textbox
        this.$resultsDiv = $resultsDiv;
        this.$screenReaderInfo = $searchPopover.find('.js-screen-reader-info');
        this.$loadingIndicator = $searchPopover.find('.js-spinner');
        this.$searchHintsContainer = $searchPopover.find('.js-search-hints');

        if (this.settings.enableHints) {
            $searchBox.on('s-popover:show', this.fetchSearchHints.bind(this)); // fetch search hints via AJAX
        }
        else {
            this.searchHintsLoaded = true;
        }
        
        if (this.settings.isTopbarAware) {
            $('.js-products-menu').on('s-popover:show', this.hidePopover.bind(this)); // hide when opening "products" popover
            $searchBox.on('s-popover:show', StackExchange.topbar.hideAll); // hide all topbar dialogs when showing search popover
        }

        // only trigger autocomplete searches and keyboard navigation if feature is enabled
        if ($searchBox.hasClass('js-search-autocomplete')) {
            
            var delayedSuggest = StackExchange.helpers.DelayedReaction(this.suggest.bind(this), 500, {sliding: true});
            
            var inputEventName = /Trident/.test(navigator.userAgent) ? 'textinput' : 'input';
            $searchBox.on(inputEventName, this.onInput.bind(this));
            $searchBox.on(inputEventName, delayedSuggest.trigger);
            $searchBox.on('keydown', this.searchBoxOnKeyDown.bind(this));
            
            $searchPopover.on('keydown', this.searchPopoverOnKeyDown.bind(this));
            
            $resultsDiv.on('click', '.js-ac-result', this.choose.bind(this)); // note this handles Enter press, too
            
            if (this.settings.isTopbarAware) {
                $('.js-top-bar').focusin(this.hideWhenFocusLost.bind(this)); // hide when selecting anything else in the topbar
            }
        }
    }

    SearchAutoComplete.prototype = {
        query: function () {
            return this.$searchBox.val().trim();
        },
        
        hasQuery: function() {
            return !!this.query();
        },
        
        fetchSearchHints: function () {
            var self = this;
            
            if (this.searchHintsLoaded) {
                return;
            }
            
            $.ajax({
                type: "GET",
                url: "/search/hints",
            }).success(function (results) {
                self.$searchHintsContainer.append(results);
                self.searchHintsLoaded = true;
            }).fail(function (jqxhr, textStatus, error) {
                StackExchange.debug.log('Autocomplete Error: ' + error.toString());
            });
        },

        hasResults: function () { return this.$resultsDiv[0].childElementCount > 0; },
        
        hideResults: function () { 
            this.showResults('');
        },
        
        hidePopover: function () {
            this.$searchPopover.removeClass('is-visible');
        },
        
        hideWhenFocusLost: function(e) {
            if (!$(e.target).is(this.$searchBox) && $(e.target).parents('.js-top-search-popover').length === 0) {
                this.hidePopover();
            }
        },
        
        onInput: function() {
            
            var hasQuery = this.hasQuery();
            this.toggleSpinner(hasQuery);
            
            // there's no hints to show, so hide the entire thing
            if (!hasQuery && !this.settings.enableHints) {
                this.hidePopover();
            }
        },

        showResults: function (results) {
            var noResults = $.trim(results).length === 0;
            this.$searchHintsContainer.find('.js-search-hints-text').toggleClass('d-none', !noResults);
            this.toggleSpinner(false);
            
            var transformer = this.settings.transformResultsHtml || function(s) { return $(s); };
            var $results = transformer(results);
            
            this.$resultsDiv
                .empty()
                .append($results)
                .toggleClass('d-none', noResults);
            
            var resultCount = this.$resultsDiv.find(".js-ac-result").length;
            this.$screenReaderInfo.text(resultCount === 0 ? "No results" : __tr(["$__results$ result found","$__results$ results found"], {__results: resultCount}, "en", ["__results"]));
        },
        
        toggleSpinner: function (show) {
            this.$loadingIndicator.toggleClass('d-none', !show);
        },

        suggest: function () {
            var self = this;
            var query = self.query();

            if (!self.hasQuery()) {
                self.hideResults();
                return;
            }
 
            // cached results
            var cached = self.resultsCache[query];
            if (cached !== undefined) {
                self.showResults(cached);
            } else {
                var acURL = new URL(this.settings.searchUrl + encodeURIComponent(query), location.href);
                
                $.get(acURL.href).done(function (results) {
                    self.resultsCache[query] = results;
                    self.showResults(results);
                }).fail(function (jqxhr, textStatus, error) {
                    StackExchange.debug.log('Autocomplete Error: ' + error.toString());
                    self.toggleSpinner(false);
                });
            }
        },

        selected: function (element) {
            if (arguments.length === 0) {
                return this.$resultsDiv.find('.js-ac-result:focus');
            }

            if (element) {
                element = $(element);
                if (!element.hasClass('js-ac-result')) return; // nope

                element.siblings().blur();
                element.focus();
            } else {
                this.$resultsDiv.children().blur();
            }
        },

        selectNext: function () {
            if (!this.hasResults())
                return;

            var $current = this.selected();
            var $next = $current.next('.js-ac-result');
            
            if ($current.length === 0) {
                this.$resultsDiv.children('.js-ac-result').first().focus();
                return;
            }
            
            if ($next.length > 0) {
                this.selected($next);
                $next[0].scrollIntoView({behavior: "smooth", block: "nearest"});
            }
        },

        selectPrev: function () {
            if (!this.hasResults())
                return;

            var $current = this.selected();
            var $prev = $current.prev('.js-ac-result');
            if ($prev.length > 0) {
                this.selected($prev);
                $prev[0].scrollIntoView({behavior: "smooth", block: "nearest"});
            } else {
                this.$searchBox.focus();
            }
        },

        searchBoxOnKeyDown: function (e) {
            switch (e.key) {
                case 'ArrowDown':
                    if (this.hasResults()) {
                        this.selectNext();
                    }
                    e.preventDefault();
                    break;
                case 'Escape':
                    this.hidePopover();
                    break;
            }
        },
        
        searchPopoverOnKeyDown: function (e) {
            switch (e.key) {
                case 'ArrowDown':
                    if (this.hasResults()) {
                        this.selectNext();
                    }
                    e.preventDefault();
                    break;
                case 'ArrowUp':
                    if (this.hasResults()) {
                        this.selectPrev();
                    }
                    e.preventDefault();
                    break;
                case 'Escape':
                    this.hidePopover();
                    this.$searchBox.focus();
                    break;
            }
        },

        choose: function (e) {
            var $selected = $(e.target).closest('.js-ac-result');
            var selectedIndex = this.$resultsDiv.find(".js-ac-result").index($selected);
            $selected.find('.js-ac-enter-hint').addClass('d-none');

            if (this.settings.enablePrizm) {
                StackExchange.using("gps", function() {
                    StackExchange.gps.track(
                        'sitesearch.autocomplete.click', { completion_index: selectedIndex });
                });
            }
            
            if (this.settings.onChoice) {
                // we want to do something other than pure navigation
                e.preventDefault();
                
                this.settings.onChoice($selected);
                
                return false;
            }
        }
    };


    // new SO top nav only
    function initSearchInteractions() {

        var $input = $('.js-search-field');

        $('.js-search-channel-selector').change(function () {
            var selected = $(this).find('option:selected');
            if (selected && selected.length === 1) {
                var url = selected.data('url');
                if (url) {
                    $('#search').attr('action', url);
                }

                var searchOn = selected.data('search-on');
                if (searchOn) {
                    $('.js-search-on').val(searchOn);
                }
            }
        }).trigger('change'); // Kick off the first one, so it's in sync

        if (!StackExchange.settings.search.enableNewQuickSearch) {
            // Init legacy autocomplete search component
            new SearchAutoComplete($input);
        }
        
        (0,_TopBar__WEBPACK_IMPORTED_MODULE_1__.attachInQuestionUrlRewriter)($input[0]);
    }

    function initSearchInteractionsForNarrowView() {
        var $searchbar = $('.js-searchbar'),
            $searchbarTrigger = $('.js-searchbar-trigger'),
            $searchField = $('.js-search-field'),
            triggerOpenClass = 'is-selected',
            searchbarOpenClass = 's-topbar--searchbar__open';

        function toggleSearch(yesno) {
            $searchbarTrigger.toggleClass(triggerOpenClass, yesno);
            $searchbar.toggleClass(searchbarOpenClass, yesno);
        }
        
        $searchbarTrigger.on('click', function (e) {
            e.preventDefault();
            toggleSearch();
            // we need to delay the focus event so stimulus can pick it up and show the popup correctly
            StackExchange.helpers.DelayedReaction(function () {
                $searchField.focus();
            }, 0).trigger();
        });
    }

    function toggleUnpinnedLeftNav(unpin) {
        var isunpinned = $("html").hasClass("html__unpinned-leftnav"); 
        if (!arguments.length)
            unpin = !isunpinned;
        if (isunpinned === !!unpin)
            return;

        var unpinnedRanges, pinnedRanges;

        if (unpin) {
            $("html").addClass("html__unpinned-leftnav"); 
            unpinnedRanges = "sm md lg";
            pinnedRanges = "";
        } else {
            $("html").removeClass("html__unpinned-leftnav"); 
            unpinnedRanges = "sm";
            pinnedRanges = "md lg";
        }
        $(".js-pinned-left-sidebar").attr("data-is-here-when", pinnedRanges);
        $(".js-unpinned-left-sidebar").attr("data-is-here-when", unpinnedRanges);
        StackExchange.responsive.forceCheck();
    }

    // reconsider moving left nav stuff out of 02_topbar.js? It's sort of related/intertwined. not sure
    function stickyLeftnavForLegacyBrowsers() {
        var brokenBrowser = false;
        var medge /* match edge */ = (navigator.userAgent || "").match(/\bEdge\/(\d+)/);
        if (medge) {
            if (parseInt(medge[1], 10) < 17) {
                // position: sticky has issues in Edge 16 (https://chat.meta.stackexchange.com/transcript/message/7081732#7081732)
                brokenBrowser = true;
            }
        }

        if (!brokenBrowser && window.CSS && CSS.supports && CSS.supports("(position: sticky) or (position: -webkit-sticky)")) {
            return;
        }
        var sticky = $(".js-sticky-leftnav");
        if (!sticky.length) {
            return;
        }
        if (brokenBrowser) {
            sticky.addClass("left-sidebar__fake-sticky");
        }
        var leftnav = $(".js-pinned-left-sidebar");
        var leftNavTopPadding = parseInt(leftnav.css("padding-top"), 10);
        var win = $(window);
        function reposition() {
            if (!leftnav.is(":visible")) {
                return;
            }
            var pos = leftnav.offset();
            var top = pos.top - win.scrollTop() + StackExchange.scrollPadding.getPaddingTop();
            var stickyTop = Math.max(StackExchange.scrollPadding.getPaddingTopMinimal(), top) + leftNavTopPadding;
            var stickyHeight = sticky.height();
            var bottomOverflow = stickyTop + stickyHeight - top - leftnav.height();
            stickyTop -= Math.max(0, bottomOverflow);
            sticky.css("top", stickyTop);
            leftnav.css("min-height", stickyHeight + leftNavTopPadding);
        }
        // We reposition the sticky left nav 1) when the window is scrolled; 2) when we cross a breakpoint; 3) once right now.
        // That won't catch *all* cases, but almost all of them. Since this is just for IE11, that's completely fine.
        win.on("scroll", reposition);
        StackExchange.responsive.addBreakpointListener(reposition);
        reposition();
    }

    function initGdprBanner() {
        // cookie is set server-side
        var $banner = $('#js-gdpr-consent-banner');
        var $btn = $banner.find('.js-notice-close');
        $btn.click(function () {
            $btn.prop('disabled', true);
            $.ajax({
                method: 'POST',
                url: '/accounts/accept-gdpr-consent-banner',
                data: { fkey: StackExchange.options.user.fkey },
                dataType: "json",
                success: function (success) {
                    if (success) {
                        $banner.remove();
                    }
                },
                complete: function () { $btn.prop('disabled', false); }
            });

        });
    }

    function initSearchPulsingAnimation() {
        var $searchBar = $(".s-topbar--searchbar--input-group.js-search-pulsing input");

        var style = ".js-alpha-search-label { color: hsl(210, 8%, 75%); }" + ".js-search-pulsing { border-radius: 8px; border: 2px solid transparent; -webkit-animation: pulse 5s infinite; animation: pulse 5s infinite; outline: 0 }" + "@-webkit-keyframes pulse { from { border-color: transparent; } 50% { border-color: hsl(206, 93%, 83.5%); } to { border-color: transparent }}" + "@keyframes pulse { from { border-color: transparent; } 50% { border-color: hsl(206, 93%, 83.5%); } to { border-color: transparent }}" + ".js-input-border-pulsing { animation: blink 5s infinite; outline: 0; -webkit-animation: blink 5s infinite; outline: 0 }" + "@-webkit-keyframes blink { from { border-color: hsl(210, 8%, 75%); } 50% { border-color: hsl(206, 93%, 83.5%); } to { border-color: hsl(210, 8%, 75%); }}" + "@keyframes blink { from { border-color: hsl(210, 8%, 75%); } 50% { border-color: hsl(206, 93%, 83.5%); } to { border-color: hsl(210, 8%, 75%); }}" + ".js-text-pulsing { color: hsl(210, 8%, 75%); animation: color-change 5s infinite; -webkit-animation: color-change 5s infinite; }" + "@-webkit-keyframes color-change { from { color: hsl(210, 8%, 75%); } 50% { color: hsl(210, 77%, 36%); } to { color: hsl(210, 8%, 75%); }}" + "@keyframes color-change { from { color: hsl(210, 8%, 75%); } 50% { color: hsl(210, 77%, 36%); } to { color: hsl(210, 8%, 75%); }}";
        $("<style type='text/css' />").text(style).appendTo("head");

        $searchBar.on("focus", function () {
            dismissPulsingAnimation();
        });

        setTimeout(function () {
            dismissPulsingAnimation();
        }, 2 * 60 * 1000); // minutes * seconds * milliseconds
    }

    function dismissPulsingAnimation() {
        $.cookie('notice-apa', '1', { path: '/', expires: 180 });
        var $searchBar = $(".s-topbar--searchbar--input-group.js-search-pulsing");
        var $input = $searchBar.find("input");
        var $label = $(".js-text-pulsing");
        $.post("/ai-search-alpha-launch-items/dismiss", {
            fkey: StackExchange.options.user.fkey,
            itemToDismiss: "PulsingAnimation"
        });

        $searchBar.removeClass("js-search-pulsing");
        $input.removeClass("js-input-border-pulsing");
        $label.removeClass("js-text-pulsing");
    }

    // so we can iterate over the above klasses
    var buttons = [],
        dialogs = [];

    return {
        init: function (options) {

            options = options || {};

            if (window.devicePixelRatio >= 1.5) {
                $('.js-avatar-me').attr('src', function (i, a) {
                    return a.replace('?s=24', '?s=48');
                });
            }

            // these string names, e.g. 'Inbox', will be used in realtime messages
            buttons.push(new SiteSwitcherButton());
            buttons.push(new NetworkLogoButton());

            if ($('.js-left-sidebar-toggle').length) {
                buttons.push(new LeftNavHamburgerButton());
            }

            // StackExchange.settings.topBar is not available on insights.stackoverflow.com
            if (StackExchange.settings.userMessaging && StackExchange.settings.userMessaging.showNewFeatureNotice) {
                buttons.push(new FeatureNoticeButton());
            }
            buttons.push(new InboxButton());
            buttons.push(new AchievementsButton());
            buttons.push(new HelpButton());
            buttons.push(new ReviewButton());
            
            if (StackExchange.options.user.isModerator) {
                buttons.push(new ModInboxButton());
            }

            // clicking anywhere else closes dialogs
            $(document).click(function (e) {
                if (!isButtonOrDialogClick(e.target)) {
                    hideAll();
                }
            });
            
            /* Cheap hack to make the top bar not completely unusable in browsers that don't support flexbox.
                * All browsers that we support *do* have flexbox, so this is just a case of being nice to people
                * stuck on old browsers. We won't spend any significant time making this better.
                */
            var bs = document.body.style;
            if (!("justifyContent" in bs || "WebkitJustifyContent" in bs)) {
                $(".js-top-bar *:visible").css({"display": "inline-block", "white-space": "nowrap", "vertical-align": "middle"}).not(".-logo, .-logo *, svg, .-badges *").css("width", "auto");
            }

            initSearchInteractions();
            initSearchInteractionsForNarrowView();
            stickyLeftnavForLegacyBrowsers();
            initGdprBanner();

            // search bar pulsing animation for OverflowAI Search
            var $pulsingSearchBar = $(".s-topbar--searchbar--input-group.js-search-pulsing input");
            if ($pulsingSearchBar.length > 0) {
                initSearchPulsingAnimation();
            }

            if ($("#js-ai-search-alpha-popover").length > 0) {
                initAISearchAlphaPopover();
            }

            $(".js-products-menu").click(function () { return false; /* prevent navigation on the products menu */ });

            if ($('#popover-review-queue').length) {

                var $reviewButton = $('.js-review-button');

                $reviewButton.on('s-popover:hide', function (e) {
                    var dispatcher = e.originalEvent.detail.dispatcher;
                    if (dispatcher && $(dispatcher).closest('.js-top-bar').length === 0) {
                        e.preventDefault();
                    }
                });

                $reviewButton.attr({
                    'data-controller': 's-popover',
                    'aria-controls': 'popover-review-queue'
                });

                StackExchange.helpers.toggleStacksPopover($reviewButton, true);

                $(".js-review-queue-popover-learn-more, .js-review-queue-popover-close-button, .js-review-button").click(
                    function () {
                        StackExchange.helpers.toggleStacksPopover($reviewButton, false);
                        StackExchange.helpers.toggleUserFlags(StackOverflow.Models.UserFlags.ShowReviewQueueNotice | StackOverflow.Models.UserFlags.ReviewQueueNoticeIsForCampaign, false);
                        StackExchange.helpers.toggleAccountPreferenceFlags(StackOverflow.Models.AccountPreferenceFlags.DismissReviewQueueNoticeCampaign, true);
                    }
                )
            }
        },
        
        hideAll: hideAll,
        handleRealtimeMessage: handleRealtimeMessage,
        toggleUnpinnedLeftNav: toggleUnpinnedLeftNav,
        
        SearchAutoComplete: SearchAutoComplete
    };
})();




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/03_Notify.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/03_Notify.js ***!
  \****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// Used to display messages at the top of the page..
StackExchange.notify = (function () {
    var numMsgs = 0;

    // remember the dismissed messages in a hidden <input> (the browser will remember
    // contents of <input>s when navigating back to the page; thus this is a way to
    // remember the already-dismissed messages when going back)
    // TODO: Is #dismissed-messages ever in the DOM? Looks like not. Consider nuking.
    function setDismissed(messageTypeId, id) {
        var container = $("#dismissed-messages");
        container.val(container.val() + "~" + messageTypeId + (id ? " " + id : "") + "~");
    }

    function isDismissed(messageTypeId, id) {
        var dismissed = $("#dismissed-messages").val();
        if (!dismissed)
            return false;
        return new RegExp("~" + messageTypeId + (id ? " " + id : "") + "~").test(dismissed);
    }

    function adjustTopMargin(oldNumber, newNumber, animate) {
        var oldMargin = parseInt($("body").css("margin-top").match(/\d+/));
        var newMargin = newNumber * oldMargin / oldNumber;
        if (animate) {
            $("body:not(.no-message-slide), body:not(.no-message-slide) .js-top-bar").animate({ marginTop: newMargin + "px" }, 'fast', 'linear');
        } else {
            $("body:not(.no-message-slide), body:not(.no-message-slide) .js-top-bar").css("marginTop", newMargin + "px");
        }
    }

    var close = function (messageTypeId, id) {
        var jHide = $("#notify-" + messageTypeId + (id ? "-" + id : ""));
        if (!jHide.length)
            return;

        if (messageTypeId >= 0) { // client-side only messages will have negative type ids
            $.post("/messages/mark-as-read", { "messagetypeid": messageTypeId, "id": (id ? id : null) });
        }

        setDismissed(messageTypeId, id);
        numMsgs--;
        jHide.fadeOut("fast", function () {
            adjustTopMargin(numMsgs + 1, numMsgs, true);
            jHide.remove();
            if ($('#notify-container div').length === 0) {
                $('#notify-container').hide();
            }
        });
    };

    // returns true if the message was actually added; false if not (because it was already dismissed in a "previous visit" to this page)
    var appendMsg = function (json) {
        numMsgs++;

        if (isDismissed(json.messageTypeId, json.id))
            return false;

        var id = '';
        if (json.messageTypeId) {
            id = ' id="notify-' + json.messageTypeId + (json.id ? "-" + json.id : "") + '"';
        }

        var html =
        '<div' + id + ' style="display:none">' +
            '<span class="notify-close">' +
                $('<a>&times;</a>').attr('title', __tr(["dismiss this notification"], undefined, "en", [])).outerHTML() +
            '</span>' +
            '<span class="notify-text">' + json.text + '</span>';

        if (json.showProfile) {
            var userUrl = encodeURIComponent("/users/" + json.userId + "?tab=badges&sort=recent");
            html += ' ' + __tr(["See your <a href=\"$url$\">profile</a>."], {url: '/messages/mark-as-read?messagetypeid=' + json.messageTypeId + '&returnurl=' + userUrl}, "en", []);
        }

        html += '</div>';
        var jDiv = $(html);

        if (json.cssClass) {
            jDiv.addClass(json.cssClass);
        }

        jDiv.find('.notify-close').click(function () {
            if (json.close) {
                json.close();
            }
            close(json.messageTypeId, json.id);
        });

        $("#notify-container").append(jDiv);
        $('#notify-container').show();
        return true;
    };

    var show = function () {
        $('#notify-container div').fadeIn('slow');
    };

    var lowerBody = function () {
        $("body:not(.no-message-slide), body:not(.no-message-slide) .js-top-bar").animate({ marginTop: "2.5em" }, 'fast', 'linear');
    };

    var addShowMoreLink = function (count, otherMessages) {
        var link = $('<div class="link-more">').append($('<a>').text(__tr(["view $numNotifications$ more notification","view $numNotifications$ more notifications"], {numNotifications: count}, "en", ["numNotifications"])));
        $('#notify-container').append(link);

        link.click(
            function () {
                link.detach();
                for (var i = 0; i < otherMessages.length; i++) {
                    appendMsg(otherMessages[i]);
                }

                show();
            }
        );
    };

    return {
        showMessages: function (jsonMsgArray) {
            var numAdded = 0;
            var oldCount = numMsgs;

            var maxShowCount = jsonMsgArray.length;

            for (var i = 0; i < maxShowCount && i < jsonMsgArray.length; i++) {
                if (appendMsg(jsonMsgArray[i]))
                    numAdded++;
            }
            adjustTopMargin(oldCount, numAdded, false); // the view set the margin for numMsgs messages, but we (only) added numAdded
            show();
        },

        show: function (html, messageTypeId, cssClass) {
            lowerBody();
            appendMsg({ text: html, messageTypeId: messageTypeId, cssClass: cssClass });
            show();
        },

        close: close,

        getMessageText: function (notifyMessageTypeId) {
            return $('#notify-' + notifyMessageTypeId + ' .notify-text').text();
        }
    };
})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/04_MoveScroller.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/04_MoveScroller.js ***!
  \**********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// assumes a <div id="scroller-anchor"> and <div id="scroller"> exist
// should be called on document ready
window.moveScroller = function moveScroller() {

    var width = $('#scroller').width();

    var move = function () {
        var enabled = StackExchange.responsive.currentRange() === "lg"; // the sidebar is no longer a sidebar at smaller widths
        var st = $(window).scrollTop();
        var ot = $('#scroller-anchor').offset().top;
        var s = $('#scroller');
        var topOffset = StackExchange.scrollPadding.getPaddingTop();
        var cssTop = topOffset + "px";
        if (enabled && st > ot) { 
            if (s.height() > $(window).height()) {
                s.css({ 'position': 'fixed', 'top': '', 'bottom': '0', 'width': width, 'z-index': 3 });
            } else {
                s.css({ 'position': 'fixed', 'top': cssTop, 'bottom': '', 'width': width, 'z-index': 3 });
            }
        }
        else {
            s.css({ 'position': 'relative', 'top': '', 'bottom': '', width: '' });
        }
    };
    StackExchange.responsive.addBreakpointListener(function () {
        // when crossing breakpoints, remeasure the natural width of the scroller (e.g. on the ask page, the sidebar is
        // wider when it's an actual sidebar vs. when it drops to the bottom)
        var s = $('#scroller');
        var inlineWidth = s[0].style.width; // jQuery's .css() doesn't necessarily give you the inline style
        var inlinePosition = s[0].style.position;
        s.css({position: 'relative', width: ''});
        width = s.width();
        s.css({position: inlinePosition, width: inlineWidth});
        
        move();
    });

    $(window).scroll(move).resize(move);
    move();
}




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/05_StyleCode.js":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/05_StyleCode.js ***!
  \*******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// In the long run, we probably want this to more explicitly know whether the current site has syntax
// highlighting or not. It does, however, do the right thing at the moment: If the hidden codeblockLang div
// isn't present, nor is the class "prettyprint-override", then hljs is never loaded.
window.styleCode = (function () {

    /**
     * Gets the default language for code blocks via the HtmlUtil.CodeblockLangDiv that is set
     * based on whether the post has a default language override, from either:
     * a tag (e.g. python, language set to "py") OR the Site.StyleCodeDefaultLang setting
     */
    function getDefaultCodeblockLanguageOverride() {
        // pull lang from hidden div rendered server side via @HtmlUtil.CodeblockLangDiv call
        return $('#js-codeblock-lang').text() || null;
    }

    /**
     * Styles all `pre code` code blocks using the default syntax highlighter
     */
    function styleCodeBlocks() {
        // if jtab is present (guitar tab support), don't color any code blocks
        if (typeof jtab !== "undefined") {
            jtab.renderimplicit();
            return;
        }

        // keep track of if we need to even need to load the syntaxhighlighter
        var detectedCodeBlock = false;

        // check every `pre code` block (in a post or editor preview) and set the language classes as needed
        $(".js-post-body pre code, .js-wmd-preview pre code, .js-md-preview pre code, .js-style-code pre code").parent().each(function () {

            // explicitly specify the classes we're using in one spot for reuse
            var highlightClass = "s-code-block";
            // TODO can't change to `codeblock-override` without rebaking posts...
            var overrideClass = "prettyprint-override";

            // if this block has a specifically overridden language, use it
            if ($(this).hasClass(overrideClass)) {
                $(this).removeClass(overrideClass).addClass(highlightClass);
                detectedCodeBlock = true;
            }

            // if there is no specific language set, try to use the set default class
            if (!$(this).hasClass(highlightClass)) {
                var defaultLang = getDefaultCodeblockLanguageOverride();
                if (defaultLang) {
                    $(this)
                        .addClass(defaultLang)
                        .addClass(highlightClass);
                    detectedCodeBlock = true;
                }
            }
        });

        
        // if we detected any code blocks that need styling, init our highlighter
        if (detectedCodeBlock) {
            StackExchange.using("highlightjs", function () {
                // highlightjs.initHighlighting highlights all `pre code`s by default and requires the lang class to be on the `code` block.
                // We only want to highlight our `pre.s-code-block`s specifically and our lang class is on the `pre` block.
                // Highlight each of these manually while skipping already highlighted blocks with the added hljs class
                $("pre.s-code-block code:not(.hljs)").each(function () {

                    // Exclude code blocks that are direct descendents of the stacks editor contenteditable div
                    if ($(this).parents('.js-editor').length != 0) {
                        return;
                    }
                    StackExchange.highlightjs.instance.highlightElement(this);
                });
            });
        }
    }

    return function () {
        if (typeof MathJax != 'undefined') MathJax.Hub.Queue(["Typeset", MathJax.Hub]);

        // Snippet redraw
        StackExchange.ifUsing("snippets", function () {
            if (StackExchange.snippets.redraw) {
                StackExchange.snippets.redraw();
            }
        });

        // style all `pre code` blocks
        styleCodeBlocks();

        // HACK: i put this here because styleCode is already called everywhere this spoiler click would need to be, too
        // if only there was an "on post body shown" event that we could all tie into

        // allow apple tablets to touch a spoiler to show

        styleCode.initializeSpoilers();
    };
})();
/**
 * Initializes all spoilers on a page by adding the translated `Reveal spoiler` badge, along with visual unveiling click events;
 * This does *not* need to be called anywhere that `styleCode()` is already called
 * NOTE: This is safe to call repeatedly (for e.g. refreshing post previews) - multiple click handlers are not rebound
 */
styleCode.initializeSpoilers = function () {
    $("body")
        .off("click.spoilers", ".spoiler")
        .on("click.spoilers", ".spoiler", function (e) {
            // only intercept the click if:
            // * the target is the spoiler itself (not a link or other child element)
            // * the spoiler is not already shown (will not re-hide on click)
            if (e.target.classList.contains("spoiler") && !e.target.classList.contains("is-visible")) {
                e.preventDefault();

                e.target.classList.add("is-visible");

                return false;
            }
        });

    $(".spoiler:not([data-spoiler])").attr("data-spoiler", __tr(["Reveal spoiler"], undefined, "en", []));
};

/**
 * Adds an `onPreviewRefresh` hook to the markdown editor to initialize spoilers on preview refresh
 * This needs to be called *before* editor.init/.initIfShown
 * NOTE: this is *not* needed if there is already a hook to call styleCode on refresh
 */
styleCode.updateSpoilersOnPreviewRefresh = function () {
    if (!StackExchange.MarkdownEditor) {
        return;
    }

    // hook into the editor preview renderer so we can initialize newly created spoilers on refresh
    StackExchange.MarkdownEditor.creationCallbacks.add(function (editor) {
        editor.hooks.chain("onPreviewRefresh", function () {
            styleCode.initializeSpoilers();
        });
    });
};

styleCode.updateLangdivDelayed = StackExchange.helpers.DelayedReaction(function (tags) {
    var langdiv = $('#js-codeblock-lang');
    if (!langdiv.length)
        return;

    $.get("/api/tags/langdiv", { tags: tags.join(" ") })
        .done(function (result) {
            if (result)
                langdiv.replaceWith(result)
            else
                langdiv.empty();
            StackExchange.MarkdownEditor.refreshAllPreviews();
            styleCode();
        });
}, 1500, { sliding: true });



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/07_TagMenu.js":
/*!*****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/07_TagMenu.js ***!
  \*****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// StackExchange.tagmenu.init can safely be called multiple times. If an argument is given, it
// should be a function taking two arguments; a jQuery object (the actual tag menu) and the
// name of the tag. This function is then called on load. Calling init again overwrites the
// previously given callback.
StackExchange.tagmenu = (function () {

    var initialized = false;

    var init = function () {
        if (initialized) {
            return;
        }

        initialized = true;

        var options = {
            selector: ".post-tag:not(.user-tag,.no-tag-menu,.invalid-tag,.job-link), .js-hoverable-post-tag",
            className: 'tag-popup',
            getUrl: suffixedGetUrl('/popup'),
            showing: showingPopup,
            fade: true,
            unclipped: true,
            renderInline: true,
        };

        StackExchange.helpers.MagicPopup(options); //TODO: MagicPopup now has a module 
    };
    return {
        init: init,
    };

    function suffixedGetUrl(suffix) {
        return function(elem) {
            var url = getUrl(elem);
            return url !== null ? url + suffix : url;
        }
    }

    function getUrl(elem) {
        var $tag = $(elem);
        if ($tag.closest('.mixed-site-content, .js-post-body, .js-tag-preferences-container').length) return null; // not for mixed-mode channels content, post bodies or sidebar
        var tagurl = $tag.attr("href");
        var forcedTagName = $tag.data("tag-menu-tagname");
        if (forcedTagName) forcedTagName = forcedTagName.toString(); // can be an integer (channels)

        // no link, or not a tag on *this* site (probably a parent-site tag posted on a meta)
        if (!forcedTagName && (!tagurl || tagurl.charAt(0) !== "/")) {
            return null;
        }

        var tagName = forcedTagName || $tag.text();

        if (tagName.indexOf("*") > -1) {
            return null;
        }

        $tag.attr("title", "");

        // On channels pages, '/' resolves to the channel root in ajax.
        return '/tags/' + encodeURIComponent(tagName);
    }

    function showingPopup(elem, $popup) {

        var $tag = $(elem),
            $window = $(window),
            $arrow = $popup.find('.js-source-arrow'),
            $leftSidebar = $('.left-sidebar:visible'),
            tagOffset = $tag.position(),
            tagHeight = $tag.outerHeight(),
            tagCenter = tagOffset.left + ($tag.outerWidth() / 2),
            width = $popup.outerWidth(),
            height = $popup.outerHeight(),
            result = { left: tagCenter - (width / 2) },
            top = tagOffset.top + tagHeight,
            onScreenTop = $window.scrollTop(),
            onScreenBottom = onScreenTop + $window.height() + - StackExchange.scrollPadding.getPaddingTop(),
            tagParentAbsoluteOffset = $tag.offsetParent().offset();

        if (
            tagParentAbsoluteOffset.top + top + height > onScreenBottom // When placed below, the popup will extend past the bottom of the screen
            && tagParentAbsoluteOffset.top + tagOffset.top - (height + 8) > onScreenTop // And when placed above, the popup doesn't extend past the top edge of the screen
        ) {
            // Show above
            result.bottom = $tag.offsetParent().outerHeight(true) - tagOffset.top - (tagHeight / 2); 
            $arrow.addClass('-bottom');
        } else {
            // Show below
            result.top = top;
            $arrow.addClass('-top');
        }

        var minLeftEdge = $leftSidebar.length > 0 ? $leftSidebar.offset().left + $leftSidebar.outerWidth() : 0;
        var maxRightEdge = $window.width();

        if (tagParentAbsoluteOffset.left + result.left + width > maxRightEdge) { // minimum supported screen width
            result.left -= (tagParentAbsoluteOffset.left + result.left + width) - maxRightEdge;
        }

        if (tagParentAbsoluteOffset.left + result.left < minLeftEdge) { // max supported screen width
            result.left = minLeftEdge - tagParentAbsoluteOffset.left;
        }

        var arrowOffset = tagCenter - (result.left + (width / 2));
        $arrow.css('margin-left', arrowOffset + 'px');

        return result;
    }
})();



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/08_UserMenu.js":
/*!******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/08_UserMenu.js ***!
  \******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.usermenu = (function () {

    var initialized,
        gravatarClone,
        visible,
        isOwn;

    var init = function () {

        if (initialized)
            return;
        initialized = true;

        //TODO: MagicPopup now has a module 
        StackExchange.helpers.MagicPopup({
            selector: ".user-hover .user-gravatar48, .user-hover .user-gravatar32, .js-user-hover-target",
            predicate: function (el) { return !$(el).closest('.mixed-site-content').length;},
            getUrl: getUrl,
            cache: true,
            id: "user-menu",
            showing: showing,
            shown: shown,
            removed: removed,
            renderInline: true
        })
        
        function getUrl(elem) {
            var jElem = $(elem);
            var userId;

            if (jElem.is(".js-user-hover-target")) {
                userId = parseInt(jElem.data("userId"), 10);
            }
            else {
                var container = jElem.closest(".user-hover"),
                    userUrl = container.find(".user-details a").attr("href"),
                    userReg = new RegExp("/users/([^/]+).*$"),
                    match = userReg.exec(userUrl);

                if (!match)
                    return null;

                userId = parseInt(match[1]);
            }
            
            if (StackExchange.options.user.isAnonymous) {
                isOwn = false;
            } else {
                isOwn = userId === StackExchange.options.user.userId;
            }

            return "/users/user-info/" + userId;
        }

    };
    
    return {
        init: init
    };
    
    function showing(elem, jMenu) {
        let jElem = $(elem),
            jGravatar = jElem.find("img:last"),
            elementPosition = jElem.position(),
            gravatarOffset = jGravatar.offset(),
            gravatarHeight = jGravatar.height(), // stupid non-square avatars
            gravatarWidth = jGravatar.width(),
            maxDimension = Math.max(gravatarWidth, gravatarHeight),
            largeHeight = 64 * gravatarHeight / maxDimension,
            largeWidth =  64 * gravatarWidth / maxDimension,
            largeGravatar = jMenu.find("img:first").css({width: largeWidth , height: largeHeight}),
            anonymousGravatar = jMenu.find(".anonymous-gravatar");

        let largeGravatarOffset = largeGravatar.offset() ?? anonymousGravatar.offset();
        let largeGravatarPosition = largeGravatar.position() ?? anonymousGravatar.position();

        largeGravatar.css("visibility", "hidden");
        largeGravatar.attr("aria-hidden", "true");

        let overflow = 0;
        if (largeGravatar.length) {
            gravatarClone = jGravatar.clone().css({
                position: "absolute",
                zIndex: 1003,
                left: largeGravatarPosition.left,
                top: largeGravatarPosition.top,
                width: gravatarWidth,
                height: gravatarHeight
            }).appendTo(jMenu.offsetParent());

            let check = function () {
                if (!largeGravatar[0].complete) { // only fade after the 64x64 has loaded
                    setTimeout(check, 100);
                    return;
                }
                largeGravatar.css("visibility", "visible");
                gravatarClone?.fadeOutAndRemove();
            }

            overflow = Math.max(0, gravatarOffset.left - largeGravatarOffset.left + jMenu.outerWidth() - $(window).width() + 8);

            gravatarClone.animate({
                    width: largeWidth,
                    height: largeHeight,
                    top: largeGravatarPosition.top,
                    left: largeGravatarPosition.left
                },
                200, check);
        }
        jMenu.trigger("userhovershowing", elem); // for winterbash; we can't make this prettier with dashes, because jQuery replaces \bhover\b with... something

        visible = true;

        let hasLinks = jMenu.find(".um-header-info a:not(.um-user-link), .um-about-me a, .um-links a").length > 0;

        StackExchange.gps.track('user_popup.show', { "is_own": isOwn, "has_links": hasLinks });
        setTimeout(function () {
            if (visible) StackExchange.gps.track('user_popup.read', { "is_own": isOwn, "has_links": hasLinks });
        }, 2000);

        jMenu.on('click', '.um-gravatar a, a.um-user-link', function () {
            StackExchange.gps.track('user_popup.click', { "clicked_link": 0, "is_own": isOwn });
        });
        jMenu.on('click', '.um-header-info a:not(.um-user-link)', function () {
            StackExchange.gps.track('user_popup.click', { "clicked_link": 1, "is_own": isOwn });
        });
        jMenu.on('click', '.um-about-me a', function () {
            StackExchange.gps.track('user_popup.click', { "clicked_link": 2, "is_own": isOwn });
        });
        jMenu.on('click', '.um-links a', function () {
            StackExchange.gps.track('user_popup.click', { "clicked_link": 3, "is_own": isOwn });
        });


        return {
            top: elementPosition.top,
            left: elementPosition.left - overflow,
            additional : gravatarClone
        };
    }
    
    function shown(element, jMenu) {
        jMenu.trigger("userhovershown"); // for winterbash; we can't make this prettier with dashes, because jQuery replaces \bhover\b with... something
    }
    
    function removed(elem, jMenu) {
        $(elem).trigger("userhoverremoved"); // for winterbash; we can't make this prettier with dashes, because jQuery replaces \bhover\b with... something
        gravatarClone?.remove();

        visible = false;
    }
    
})();




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/09_ChatAd.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/09_ChatAd.js ***!
  \****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// Javascript need to support the chat ad (zone 502)
//    We're putting it in so many places that it really needs to be properly minified
//    thus the pull into full-anon.js
StackExchange.chatAd = (function () {
    var chatUrl, reloadUrl; // the two are set by init()
    var reloadInterval = 180; // how many seconds before the first refresh
    var reloadFrequencyThrottle = 30; // increase reloadInterval by this value on every refresh
    var reloadStopInterval = 480; // stop reloading altogehter when reloadInterval is over this value (happens after ~1 hour)
    var months = [__tr(["Jan"], undefined, "en", []), __tr(["Feb"], undefined, "en", []), __tr(["Mar"], undefined, "en", []), __tr(["Apr"], undefined, "en", []), __tr(["May"], undefined, "en", []), __tr(["Jun"], undefined, "en", []), __tr(["Jul"], undefined, "en", []), __tr(["Aug"], undefined, "en", []), __tr(["Sep"], undefined, "en", []), __tr(["Oct"], undefined, "en", []), __tr(["Nov"], undefined, "en", []), __tr(["Dec"], undefined, "en", [])];
        
    function init(options) {

        if (/^\/questions\/\d+/i.test(window.location.pathname)) {
            reloadStopInterval = 0; // never reload on a single-question page
        }

        chatUrl = options.chatUrl;
        reloadUrl = options.reloadUrl;

        if (options.tagBased) {
            var tags = getTags();
            if (!tags)
                return; // no ad if we coouldn't infer tags

            if (reloadUrl)
                reloadUrl += (/\?/.test(reloadUrl) ? "&" : "?") + "tags=" + encodeURIComponent(tags);
        }

        if (options.preloadedData === null) {
            loadAd();
        } else {
            displayRooms(options.preloadedData, null, null);
        }
    }

    function getTags() {
        var tags = $(".question .post-taglist .post-tag");
        if (!tags.length)
            return null;
        return tags.map(function (i, elem) { return $(elem).text() }).get().join(" ");
    }

    function pad(n) {
        return n < 10 ? "0" + n : n;
    }
    function absoluteTime(ut) {
        var date = new Date();
        date.setTime(ut * 1000);

        return [
            date.getUTCFullYear(),
            "-", pad(date.getUTCMonth() + 1),
            "-", pad(date.getUTCDate()),
            " ", pad(date.getUTCHours()),
            ":", pad(date.getUTCMinutes()),
            ":", pad(date.getUTCSeconds()),
            "Z"
        ].join("");
    }
    function friendlyTime(dt) {
        var utcNow = Math.floor((new Date()).getTime() / 1000);

        var delta = utcNow - dt;
        var seconds = delta % 60;
        var minutes = Math.floor(delta / 60);
        var hours = Math.floor(delta / 3600);
        if (delta < 1) {
            return __tr(["just now"], undefined, "en", []);
        }
        if (delta < 60) {
            return __tr(["$seconds$ sec ago","$seconds$ secs ago"], {seconds: seconds}, "en", ["seconds"]);
        }
        if (delta < 3600) // 60 mins * 60 sec
        {
            return __tr(["$minutes$ min ago","$minutes$ mins ago"], {minutes: minutes}, "en", ["minutes"]);
        }
        if (delta < 86400)  // 24 hrs * 60 mins * 60 sec
        {
            return __tr(["$hours$ hour ago","$hours$ hours ago"], {hours: hours}, "en", ["hours"]);
        }

        var days = Math.floor(delta / 86400);

        if (days == 1) {
            return __tr(["yesterday"], undefined, "en", []);
        }
        else if (days <= 2) {
            return __tr(["$__count$ day ago","$__count$ days ago"], {__count: days}, "en", ["__count"]);
        }

        var date = new Date(dt * 1000);
        return __tr(["$month$ $date$ at $hours$:$minutes$"], {month: months[date.getMonth()],date: date.getDate(),hours: date.getHours(),minutes: pad(date.getMinutes())}, "en", []);
    }

    function loadAd() {
        if (reloadUrl) {
            $.get(reloadUrl, null, displayRooms);
        }
    }

    function avatarUrl(emailHash) {
        if (emailHash.charAt(0) === '!') {
            var result = emailHash.substr(1);
            if (/^https?:\/\/i.stack.imgur.com\//.test(result)) {
                var sep = /\?/.test(result) ? "&" : "?";
                result += sep + "g&s=32";
            }
            return result;
        }

        return "https://www.gravatar.com/avatar/" + emailHash + "?s=23&d=identicon&r=PG";
    }

    // Build a summary line of the last 5 users to talk, in order
    function userBox(users) {
        var $box = $('<div class="d-flex gs4 ai-center fw-wrap" />');

        for (var i = 0; i < users.length && i < 7; i++) {
            var user = users[i];

            var toolTip = user.name;
            if (user.lastPost) {
                toolTip += ": " + friendlyTime(user.lastPost);
            }

            var $icon = $('<img class="bar-sm">').attr({
                title: toolTip,
                src: avatarUrl(user.emailhash),
                width: 23,
                height: 23
            });
            var $user = $('<a class="flex--item">').attr('href', chatUrl + '/users/' + user.id).append($icon);
            $box.append($user);
        }

        return $box;
    }

    function singleImageOfAllUsers(roomId) {
        return $('<div class="flex--item"><img src="' + chatUrl + '/rooms/users/' + roomId + '.jpeg" /></div>');
    }

    // Link to the user responsible for the message
    function userLink(msg) {
        var name = msg.user;
        var id = msg.userid;

        if (id) {
            return $('<a>').attr('href', chatUrl + '/users/' + id).text(name);
        } else {
            return $('<span>').text(name);
        }
    }

    function setupNextRefresh() {
        if (!reloadUrl) return;

        if (reloadInterval <= reloadStopInterval) // stop refreshing after an hour -- the user probably just left the page open overnight
            window.setTimeout(loadAd, reloadInterval * 1000);
        reloadInterval += reloadFrequencyThrottle; // the longer the user has the page open, the higher the chance that they're not even looking at it -- throttle back
    }

    // Callback to build the room list
    function displayRooms(data, textStatus, req) {
        var $roomContainer = $('.js-chat-ad-rooms');
        if (data.error) {
            setupNextRefresh();
            return;
        }

        $roomContainer.empty();

        var roomData = data.rooms;

        for (var i = 0; i < roomData.length && i < 2; i++) {
            var room = roomData[i];

            var roomLink = chatUrl + '/rooms/' + room.id;

            var lastMessage = (room.messages || []).length > 0 ? room.messages[0] : null;

            var $room = $('<div class="d-flex fd-column gs2" />');
            $('<a class="flex--item" />').attr('href', roomLink).text(room.name).appendTo($room);

            if (lastMessage) {
                $('<div class="flex--item fs-fine fc-black-350 mb4" />')
                    .attr('title', absoluteTime(room.lastPost))
                    .html(friendlyTime(room.lastPost) + ' - ')
                    .append(userLink(lastMessage))
                    .appendTo($room);
            }

            if (room.singleImage)
                $room.append(singleImageOfAllUsers(room.id));
            else
                $room.append(userBox(room.users));
            
            $roomContainer.append($('<div class="s-sidebarwidget--item" />').append($room));
        }

        $roomContainer.toggleClass('d-none', roomData.length === 0);

        var $link = $('.js-chat-ad-link');

        if (data.activeUsers > 1) {
            $link.text(__tr(["$num$ person chatting","$num$ people chatting"], {num: data.activeUsers}, "en", ["num"]));
        } else {
            $link.text(__tr(["Visit chat"], undefined, "en", []));
        }

        $link.attr('title', __tr(["$users$ user active in $rooms$ room the last 60 minutes","$users$ user active in $rooms$ rooms the last 60 minutes","$users$ users active in $rooms$ room the last 60 minutes","$users$ users active in $rooms$ rooms the last 60 minutes"], {users: data.activeUsers,rooms: data.activeRooms}, "en", ["users","rooms"]));

        setupNextRefresh();
    }

    return { init: init };
})();




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/10_TagSanitizer.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/10_TagSanitizer.js ***!
  \**********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// note that this only works on lowercase
$.extend(StackExchange.helpers, (function () {
    var diacSubstitutions = {
        "Ã Ã¥Ã¡Ã¢Ã¤Ã£Ã¥ÄÉáµá¶": "a",
        "Ã¦Ç£Ç½á´áµ": "ae",
        "Ã§ÄÄÄ": "c",
        "ÄÆÃ°Ã": "d",
        "Ã¨Ã©ÃªÃ«ÄÇá´áµ": "e",
        "â": "f",
        "ÄÄáµ·": "g",
        "Ä¥É¥Ê®á¶£": "h",
        "Ã¬Ã­Ã®Ã¯Ä±á´áµ": "i",
        "Äµ": "j",
        "Ê": "k",
        "Å": "l",
        "É¯É°áµá¶­á´": "m",
        "Ã±Å": "n",
        "Ã²Ã³Ã´ÃµÃ¶Ã¸Å": "o",
        "ÅÉ¶á´": "oe",
        "ÅÉ¹ÉºÉ»Ê´Êµ": "r",
        "ÅÅÅ¡Å": "s",
        "Ã": "ss",
        "Ê": "t",
        "Ã": "th",
        "Ã¹ÃºÃ»Ã¼Å­Å¯": "u",
        "Êá¶º": "v",
        "Ê": "w",
        "Ã½Å¸Ã¿Ê": "y",
        "Å¼ÅºÅ¾": "z"
    };

    function noDiacritics(s) {
        for (var orig in diacSubstitutions) {
            if (diacSubstitutions.hasOwnProperty(orig)) {
                s = s.replace(new RegExp("[" + orig + "]", "g"), diacSubstitutions[orig]);
            }
        }
        return s;
    }

    // the following is courtesy balpha, ala https://chat.meta.stackexchange.com/transcript/message/1025265#1025265
    var allowedNonAsciiCharacters =
        '\\u0030-\\u0039\\u0041-\\u005a\\u005f\\u0061-\\u007a\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1' +
        '\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5' +
        '\\u03f7-\\u0481\\u048a-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0621-\\u064a\\u0660-\\u0669' +
        '\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07c0-\\u07ea' +
        '\\u07f4-\\u07f5\\u07fa\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0966-\\u096f\\u0971-\\u0972\\u097b-\\u097f\\u0985-\\u098c' +
        '\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09e6-\\u09f1' +
        '\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e' +
        '\\u0a66-\\u0a6f\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0' +
        '\\u0ae0-\\u0ae1\\u0ae6-\\u0aef\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d' +
        '\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b66-\\u0b6f\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c' +
        '\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0be6-\\u0bef\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28' +
        '\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58-\\u0c59\\u0c60-\\u0c61\\u0c66-\\u0c6f\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8' +
        '\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0ce6-\\u0cef\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d28\\u0d2a-\\u0d39' +
        '\\u0d3d\\u0d60-\\u0d61\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30' +
        '\\u0e32-\\u0e33\\u0e40-\\u0e46\\u0e50-\\u0e59\\u0e81-\\u0e82\\u0e84\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f' +
        '\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb0\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ed0-\\u0ed9\\u0edc-\\u0edd' +
        '\\u0f00\\u0f20-\\u0f29\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8b\\u1000-\\u102a\\u103f-\\u1049\\u1050-\\u1055\\u105a-\\u105d\\u1061' +
        '\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u1090-\\u1099\\u10a0-\\u10c5\\u10d0-\\u10fa\\u10fc\\u1100-\\u1159\\u115f-\\u11a2' +
        '\\u11a8-\\u11f9\\u1200-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0' +
        '\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f' +
        '\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u1676\\u1681-\\u169a\\u16a0-\\u16ea\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731' +
        '\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u17e0-\\u17e9\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18a8' +
        '\\u18aa\\u1900-\\u191c\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19a9\\u19c1-\\u19c7\\u19d0-\\u19d9\\u1a00-\\u1a16\\u1b05-\\u1b33' +
        '\\u1b45-\\u1b4b\\u1b50-\\u1b59\\u1b83-\\u1ba0\\u1bae-\\u1bb9\\u1c00-\\u1c23\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1d00-\\u1dbf' +
        '\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4' +
        '\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc' +
        '\\u203f-\\u2040\\u2054\\u2071\\u207f\\u2090-\\u2094\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128' +
        '\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2183-\\u2184\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2c6f' +
        '\\u2c71-\\u2c7d\\u2c80-\\u2ce4\\u2d00-\\u2d25\\u2d30-\\u2d65\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6' +
        '\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3006\\u3031-\\u3035\\u303b-\\u303c' +
        '\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31b7\\u31f0-\\u31ff' +
        '\\u3400-\\u4db5\\u4e00-\\u9fc3\\ua000-\\ua48c\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua65f\\ua662-\\ua66e\\ua67f-\\ua697' +
        '\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78c\\ua7fb-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873' +
        '\\ua882-\\ua8b3\\ua8d0-\\ua8d9\\ua900-\\ua925\\ua930-\\ua946\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa50-\\uaa59' +
        '\\uac00-\\ud7a3\\uf900-\\ufa2d\\ufa30-\\ufa6a\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36' +
        '\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb' +
        '\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe' +
        '\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc';

    // See Tag.ToArray
    function tagSeparator(tags) {

        tags = $.trim(tags);

        if (/^\|.*\|$/.test(tags)) {
            return "|";
        }

        // See Tag.IsPlusDelimited
        var extraLetters = StackExchange.settings.tags.allowNonAsciiTags ? allowedNonAsciiCharacters : "";
        if (!/\s/.test(tags) && RegExp('[A-Za-z' + extraLetters + '0-9#\\-.*]\\+[A-za-z' + extraLetters + '0-9#\\-.]').test(tags)) {
            return "+";
        }

        return /[\s|,;]+/;
    };

    // takes the user entered tag string and splits it into a list of "nice" tags
    function sanitizeAndSplitTags(tags, allowWildcards, allowOperators, allowUpperCase) {

        var splitted = $.trim(tags).split(StackExchange.helpers.tagSeparator(tags));

        var result = [];
        for (var i = 0; i < splitted.length; i++) {
            // remove all characters that aren't allowed in tags
            var tag = splitted[i];

            if (!allowUpperCase) { // HACK: to support display names in question mention notifications ONLY!
                tag = tag.toLowerCase();
            }

            if (!StackExchange.settings.tags.allowNonAsciiTags) {
                tag = StackExchange.helpers.noDiacritics(tag); // replace diacritics and similar characters by their plain ascii brothers
            }
            tag = tag.replace(/_/g, "-"); // turn underscore into dash
            var illegalChars = (allowUpperCase ? "[^A-Za-z0-9.#+" : "[^a-z0-9.#+")
                + (allowWildcards ? "*" : "")
                + (StackExchange.settings.tags.allowNonAsciiTags ? allowedNonAsciiCharacters : "")
                + "-]";
            tag = tag.replace(new RegExp(illegalChars, "g"), "");

            // # + - aren't allowed in the first position
            tag = tag.replace(/^[#+-]+/, "");

            // . - aren't allowed at the end
            tag = tag.replace(/[.-]+$/, "");

            var operators = ["or", "and", "not"];
            var isOperator = operators.indexOf(tag) !== -1;
            var alreadyExists = result.indexOf(tag) !== -1;

            // 1. Don't add empty strings
            // 2. Don't add existing tags or operators unless we're allowing operators, in which case both operators and duplicates are allowed.
            if (tag.length > 0 && ((!isOperator && !alreadyExists) || allowOperators))
                result.push(tag);
        }
        return result;
    }

    return {
        noDiacritics: noDiacritics,
        tagSeparator: tagSeparator,
        sanitizeAndSplitTags: sanitizeAndSplitTags
    };

})());



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/11_Question.js":
/*!******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/11_Question.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _citation_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../citation.mod */ "./_Scripts/LegacyJS/citation.mod.ts");
/* harmony import */ var _saves_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../saves.mod */ "./_Scripts/LegacyJS/saves.mod.ts");
/* harmony import */ var _constants_mod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});






// options to StackExchange.questions.init:
//   questionId            the number of microseconds since the big bang (No, not really. Guess what this is).
//   hasOpenBounty         true if the current user has an open bounty on this question
//   canOpenBounty         true if the current user can open a bounty on this question
//   votesCast             array of objects of the kind {"PostId":38292,"VoteTypeId":2}, denoting on what posts and how the current user has voted on this page
//   canViewVoteCounts     true if the user has the privilege to view the vote split on posts
//   autoShowCommentHelp   true if the comment help div should automatically be shown when the user starts to write a comment

//   totalCommentCount     number of comments on the question, total
//   shownCommentCount     number of comments shown on the question

//   focusPostEditor       focuses the "post an answer"-editor, and scrolls until it is visible

StackExchange.question = (function () {

    function showAnswerHelp() {
        $(".js-answer-help").removeClass("d-none").attr("aria-hidden", "false");
    };

    function hideAnswerHelp(e) {
        e.preventDefault();
        $(".js-answer-help").addClass("d-none").attr("aria-hidden", "true");
    }

    function showAnswerBanWarning() {
        $('#qualityBanWarningShown').val('true');
        $(".js-answer-ban").removeClass("d-none").attr("aria-hidden", "false");
    };

    function hideAnswerBanWarning(e) {
        e.preventDefault();
        $(".js-answer-ban").addClass("d-none").attr("aria-hidden", "true");
    }

    var getQuestionId = function (context) {
        // context allows passing in an element that should have a question its ancestry (or be the question)
        var q = context ? context.closest('.question') : $('.question'),
            result = q.data('questionid');

        if (!result) throw new Error('getQuestionId could not find an id');

        return result;
    };

    var canViewVoteCounts;

    function getPost(postId) {
        return $('.question[data-questionid=' + postId + '], .answer[data-answerid=' + postId + ']');
    }

    function scrollToPost(postId) {
        var $post = getPost(postId);
        if ($post.length === 0) {
            return false;
        }

        var hash = $post.hasClass('question') ? '#question' : '#' + postId;

        if (location.hash !== hash) {
            location.hash = hash;
        } else {
            $post.scrollIntoView();
        }
        doHighlight($post);
        return true;
    }

    function scrollToComment(commentId, postId) {
        var $post = getPost(postId);
        if ($post.length === 0) {
            return false;
        }

        var hash = '#comment' + commentId + '_' + postId;
        if (location.hash !== hash) {
            location.hash = hash;
        } else {
            StackExchange.comments.highlight(commentId, postId);
        }
        return true;
    }

    var doHighlight = function (jEle) {
        jEle.addClass("highlighted-post");
    };


    var initShareLinks = function () {
        var clickEventName = 'click.shareLinks';

        // bind post menu's "link" to toggle the share popup
        $(document)
            .off(clickEventName)
            .on(clickEventName, ".bottom-share-links a", function (event) {
            var href = $(this).attr('href');
            var svc = null;
            if (href && href.length)
            {
                if (href.indexOf('%3fsgp%3d') >= 0) svc = 1;
                else if (href.indexOf('%3fsfb%3d') >= 0) svc = 2;
                else if (href.indexOf('%3fstw%3d') >= 0) svc = 3;
                else if (href.indexOf('%3fsem%3d') >= 0) svc = 4;
            }
            if (svc) {
                StackExchange.gps.track('share.click', {
                    location: 3,
                    service: svc
                }, true);
            }
            });

        var bn = $('.bottom-notice');
        if (bn && bn.length && bn.data('loc'))
        {
            bn.off(clickEventName).on(clickEventName, "a", function () {
                var type = 0, loc = bn.data('loc');
                var href = $(this).attr('href');

                if ($(this).hasClass('post-tag')) type = 1;
                else if (/\/ask$/.test(href)) type = 2;
                else if (/\/tags$/.test(href)) type = 4;
                else if (/\/unanswered$/.test(href)) type = 5;
                else if (/\/questions$/.test(href) || /\/questions[?\/]/.test(href)) type = 3;
                StackExchange.gps.track("next_action.click", { type: type, location: loc }, true);
            });
        }
    };

    var currentlySelectedTitleLink = null;
    var moveSelection = function (jSearch, options, dir) {
        // nothing to move around in, ignore the event
        if (!currentlySelectedTitleLink && !jSearch.is(":focus")) return true;

        var canBeSelected = options.find('.title-float-option');

        var curIndex = currentlySelectedTitleLink ? canBeSelected.index(currentlySelectedTitleLink) : -1;

        curIndex += dir;

        if (curIndex < -1 || curIndex >= canBeSelected.length) return true;

        options.find('.title-float-selected').removeClass('title-float-selected');

        if (curIndex == -1) {
            currentlySelectedTitleLink = null;
            jSearch.focus();
            return false;
        }

        currentlySelectedTitleLink = canBeSelected.eq(curIndex);

        currentlySelectedTitleLink.addClass('title-float-selected');

        return false;
    };

    // Puts resultHtml into a box floating under jSearch if appropriate
    var floatTitleSearchResults = function (jSearch, resultHtml) {
        // Don't show this popup box if the user has moved on
        if (!jSearch.is(':focus')) return;

        var pos = jSearch.offset();
        var jResults = $(resultHtml);
        jResults.find('.answer-summary').addClass('title-float-option');

        jResults.find('.answer-link a').attr('target', '_blank');

        var jFloat = $('.title-search-float');
        // first run!
        if (jFloat.length == 0) {
            jSearch.focus(function () {
                if (jFloat.children().length > 0) {
                    setTimeout(function () { jFloat.show(); }, 0);
                }
            });

            jFloat = $('<div class="title-search-float"></div>');
            jSearch.parent().append(jFloat);

            // keydown so we can prevent default
            $(document).keydown(
                function (e) {
                    // if you ESC or TAB out, hide the floater
                    if (e.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.ESC || e.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.TAB) {
                        jFloat.hide();
                        $('.title-float-selected').removeClass('title-float-selected');
                        currentlySelectedTitleLink = null;
                    }

                    // down key
                    if (e.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.DOWN) {
                        return moveSelection(jSearch, jFloat, -1);
                    }

                    // up key
                    if (e.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.UP) {
                        return moveSelection(jSearch, jFloat, 1);
                    }

                    // enter
                    if (e.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.ENTER) {
                        var selected = jFloat.find('.title-float-selected:visible');
                        if (selected.length != 0) {
                            var link = selected.find('a').attr('href');
                            window.open(link, '_blank');
                            return false;
                        }
                    }
                }
            );
            $(document).click(
                function (e) {
                    var isClickedOnSearch = $(e.target)[0] == jSearch[0];

                    if ($(e.target).parents('.title-search-float').length == 0 && !isClickedOnSearch) {
                        jFloat.hide();
                    }
                }
            );

            $(window).resize(
                function (e) {
                    if (!jFloat.is(":visible")) return;

                    var pos = jSearch.offset();

                    var top = pos.top + jSearch.outerHeight();
                    // -2 because "internet"
                    jFloat.width((jSearch.outerWidth() - 2) + "px");
                    jFloat.offset({ top: top, left: pos.left });
                }
            );
        } else {
            jFloat.show();
        }

        jFloat.empty();

        var top = pos.top + jSearch.outerHeight();

        jFloat.append(jResults);
        jFloat.css({ position: "absolute" });

        // -2 because "internet"
        jFloat.width((jSearch.outerWidth() - 2) + "px");
        jFloat.offset({ top: top, left: pos.left });
    };

    // returns a function that can let you "force" an update
    // options:
    //  siteName - site name to append to the end of the question title in search results e.g. How do I frob the widget? - Stack Overflow
    //  onResults - function to be run that does something for every question link in the result set
    //  searchRouteOverride - specify a different route to use for searching. by default, /search/titles
    var initTitleSearch = function (jTitleBox, jIntoBox, options) {
        var originalTitle = document.title;

        var searchRoute = options.searchRouteOverride || '/search/titles';
        var onResults = options.onResults || function() {};

        var lastRefreshed = 0,
            lastTitle,
            popup;

        // disable autocomplete
        jTitleBox.attr('autocomplete', 'off');

        var doUpdate = function (bypassChecks) {
            var s = jTitleBox.val();

            if (s == '' || (s == lastTitle && bypassChecks !== true)) return;

            // Don't do an update once somebodies tabbing down.
            if (StackExchange.settings.site.newTitleSearchBoxEnabled) {
                if ($('.title-float-selected:visible').length > 0) return;
            }

            var parts = s.split(' ');
            var wordCount = 0;
            for (var i = 0; i < parts.length; i++) {
                if ($.trim(parts[i]).length > 0) wordCount++;
            }

            var now = (new Date()).getTime();

            var sinceLast = (now - lastRefreshed) / 1000;

            if (bypassChecks !== true && (wordCount < 3 || sinceLast < 5) && !jTitleBox.hasClass('edit-field-overlayed')) return;

            lastRefreshed = now;
            lastTitle = s;

            // If we don't want this title updating behavior, just don't pass a sitename
            if (options.siteName) {
                if (s) {
                    document.title = s + ' - ' + options.siteName;
                } else {
                    document.title = originalTitle;
                }
            }

            if (!$('.js-similar-questions-loader').length) {
                jIntoBox.empty();
                StackExchange.helpers.addSpinner(jIntoBox);
            } else {
                jIntoBox.empty();
                StackExchange.helpers.addStacksSpinner(jIntoBox, "lg", "fc-orange-400 ml16 mt12");
            }

            if (popup)
                popup.fadeOutAndRemove();

            $.ajax({
                url: searchRoute,
                dataType: 'json',
                data: { title: s },
                success: function (data) {
                    if (data && data.content) {
                        jIntoBox.html(data.content);
                        setTimeout(function () {
                            onResults(jIntoBox.find('.answer-link a').attr('target', '_blank'));
                        }, 1);
                        $(".js-link").attr('target', '_blank');
                        $('.js-verify-not-duplicate').removeClass("d-none");
                        $('.js-next-title').prop('disabled', true);
                        if ($('.js-similar-questions-outer-div').length) {
                            $('.js-similar-questions-outer-div').removeClass('d-none');
                            $('.js-question-summary-scroll').one('scroll', function () {
                                StackExchange.using("gps", function () { StackExchange.gps.track("similarquestions.title_scroll"); });
                            })
                        }
                    } else {
                        $('.js-similar-questions-outer-div').toggleClass('d-none', true);
                        onResults(null);
                    }
                },
                complete: function (data) {
                    if (data.responseJSON.content.length > 0) StackExchange.helpers.removeSpinner(jIntoBox);
                    $('.js-next-title').prop('disabled', false);
                }
            });
        };

        var overResults = false;
        jIntoBox.mouseenter(
            function () {
                overResults = true;
            }
        ).mouseleave(
            function() {
                overResults = false;
            }
        );

        jTitleBox.keyup(doUpdate).blur(
            function () {
                var blurUpdate =
                    function () {
                        lastRefreshed = 0;
                        doUpdate();
                    };

                // If the user is currently trying to *click* the search results, don't move the targets just
                //   because focus left the title box
                if (overResults) {
                    jIntoBox.one('mouseleave', blurUpdate);
                } else {
                    blurUpdate();
                }
            }
        );

        if (jTitleBox.val()) {
            doUpdate();
        }

        //setInterval(doUpdate, 100);

        return function (bypassChecks) { lastRefreshed = 0; doUpdate(bypassChecks); };
    };

    // this is needed to reclaim a bunch of localStorage crap from the next/previous button experiment
    var cleanupNextAndPreviousButtonState = function () {
        try {
            localStorage.removeItem('nextPrevTrackState');
            localStorage.removeItem('nextPrevTrackState2');
            localStorage.removeItem('nextPrevState');
        } catch (e) { }
    };

    var bindNewContributorIndicators = function () {

        var current, canceller;

        $(document).on({
            mouseenter: function () {

                var $this = $(this);
                var $label = $this.find('.js-new-contributor-label');
                var $popover = $this.find('.js-new-contributor-popover');

                if (canceller && this === current) {
                    canceller.cancel();
                } else {
                    $popover.addClass('is-visible').css({
                        top: $this.height() + 4,
                        left: $label.position().left + $label.width() / 2 - $this.width() / 2,
                        width: $this.width()
                    });

                    current = this;

                    canceller = StackExchange.helpers.DelayedReaction(function () {
                        $popover.removeClass('is-visible');
                        canceller = null;
                    }, 100);
                }
            },
            mouseleave: function () {
                if (canceller) {
                    canceller.trigger();
                }
            }
        },
        '.js-new-contributor-indicator');
    };

    /**
     * Handles focusing the targets indicated by the location hash (eg the add comment editor, add answer editor, etc)
     */
    var handleHashFocusTarget = function () {
        // gather and normalize the hash
        var hash = window.location.hash.replace('#', '').toLowerCase();

        // check if the hash has a value
        if (!hash) {
            return;
        }

        var commandSegments = hash.split('_'),
            command = commandSegments[0],
            postId = commandSegments[1];

        var handled = true;

        // focus the appropriate editor
        switch (command) {
            case 'answer':
                // ensure that the editor is loaded before attempting to focus answer input
                StackExchange.using('editor', function () {
                    var answerInput = $('#wmd-input');
                    if (answerInput.is(':visible')) {
                        answerInput.focus();
                    }
                    else {
                        // ensure that the editor init has happened (async race conditions w/ editor callback)
                        window.setTimeout(function () {
                            $('.js-add-another-answer').click();
                        }, 10);
                    }
                });
                break;
            case 'addcomment':
                if (postId) {
                    $('#comments-link-' + postId).find('.js-add-link').click();
                }
                break;
            case 'notify':
                $('.js-inline-mentions-edit-link').click();
                break;
            default:
                handled = false;
        }

        if (handled) {
            //remove the #
            window.history.replaceState(null, null, window.location.href.split('#')[0]);
        }
    };

    function initEndorsementLinks() {
        var setSelected = function ($el, value) {
            $el
                .attr('aria-pressed', value ? 'true' : 'false')
                .each(function () {
                    var selectedClasses = $(this).data('selected-classes');
                    if (selectedClasses) {
                        $(this).toggleClass(selectedClasses, value);
                    }
                });

            var newTitle = !isSelected($el)
                ? $el.data('add-endorsement-title')
                : $el.data('remove-endorsement-title');

            $el.each(function() {
                Stacks.setTooltipHtml($(this)[0],
                    newTitle,
                    {
                        placement: "right"
                    });
            });
        };

        var isSelected = function ($el) {
            return $el.attr('aria-pressed') === 'true';
        };

        var endorseAnswerSingleCommunity_click = function () {
            var $clicked = $(this);

            if ($clicked.is(':working')) return;

            $clicked.working(true);
            var endorsed = isSelected($clicked);

            var url = $clicked.data('action-edit-endorsement-url');

            var xhr = $.ajax({
                type: "POST",
                url: url,
                content: "application/json; charset=utf-8",
                dataType: "json",
                data: {
                    fkey: StackExchange.options.user.fkey,
                    'EndorseActions': [
                        { 'perform': endorsed ? 'Remove' : 'Add', 'slug': singleCommunitySlug }
                    ]
                }
            });

            xhr.success(function (data, _, ___) {
                if (data.Success) {
                    updateEndorsements(data);
                } else {
                    StackExchange.helpers.showToast(data.Message.message, { type: 'danger' });
                }
            })
            .error(function () {
                StackExchange.helpers.showToast(__tr(["Error updating recommendation"], undefined, "en", []), { type: 'danger' });
            })
            .always(function (data, _, ___) {
                $clicked.working(false).trigger('update');
            });
        };

        var endorseAnswerManyCommunities_click = function (evt) {
            var $clicked = $(this);

            if ($clicked.is(':working')) return;

            $clicked.working(true);

            var endorseModalUrl = $clicked.data('action-endorse-modal-url');

            StackExchange.helpers.loadModal(endorseModalUrl)
                .done(function () {
                    const $dlg = $('.js-stacks-managed-popup');

                    const closeDialog = function () {
                        $dlg.remove();
                    };

                    var $recommendationForm = $('.js-change-recommendation');
                    var $communitySelections = $('input.js-community-selection');
                    var $submitRecommendation = $('.js-submit-recommendation');

                    $communitySelections.change(function () {
                        $submitRecommendation.prop('disabled', !hasChanges());
                    });

                    function hasChanges() {
                        for (var i = 0; i < $communitySelections.length; i++) {
                            var $communitySelection = $($communitySelections[i]);
                            var originalState = !!$communitySelection.data('original-state');
                            var newState = !!$communitySelection.is(':checked');

                            if (originalState !== newState) {
                                return true;
                            }
                        }

                        return false;
                    }

                    function submitUpdate(e, overrideEndorseActions) {
                        e.preventDefault();

                        // Just in case, change validation should already handle this.
                        if (!hasChanges()) {
                            StackExchange.helpers.showToast(__tr(["No changes to save"], {transient: true}, "en", []));
                            return;
                        }

                        var endorseActions = [];

                        if (overrideEndorseActions && overrideEndorseActions.length > 0) {
                            endorseActions = overrideEndorseActions;
                        } else {
                            for (var i = 0; i < $communitySelections.length; i++) {
                                var $communitySelection = $($communitySelections[i]);
                                var originalState = !!$communitySelection.data('original-state');
                                var newState = !!$communitySelection.is(':checked');

                                if (originalState !== newState) {
                                    endorseActions.push({
                                        slug: $communitySelection.data('slug'),
                                        perform: newState ? 'add' : 'remove'
                                    });
                                }
                            }
                        }

                        var url = $recommendationForm.prop('action');
                        $.post(url, {
                            fkey: StackExchange.options.user.fkey,
                            endorseActions: endorseActions
                        })
                            .success(function (data, _, ___) {
                                if (data.Success) {
                                    updateEndorsements(data);

                                    // reverse the action for undo
                                    for (var i = 0; i < endorseActions.length; i++) {
                                        var added = endorseActions[i].perform === 'add';

                                        endorseActions[i].perform = (added ? 'remove' : 'add');
                                    }

                                    StackExchange.helpers.showToast(data.Message.message, {
                                        type: 'success', actions: [{
                                            labelContents: 'Undo',
                                            click: function () {
                                                submitUpdate(e, endorseActions);
                                            }
                                        }]
                                    });
                                    closeDialog();
                                } else {
                                    // the server sent back a reason that it blocked this vote - inform the user
                                    // if the message is that it's too early to accept to the answer, fade it away automatically.
                                    StackExchange.helpers.showToast(data.Message.message, { type: 'danger' });
                                }
                            })
                            .error(function () {
                                StackExchange.helpers.showToast('Error updating recommendations', { type: 'danger' });
                            })
                            .always(function (data, _, ___) {
                                $clicked.working(false).trigger('update');
                            });
                    }

                    $recommendationForm.submit(submitUpdate);

                    $communitySelections.change();

                    $clicked.working(false).trigger('update');
                }).always(function () {
                    $clicked.working(false).trigger('update');
            });

            $clicked.working(false).trigger('update');

            evt.preventDefault();
            return false;
        }

        var updateEndorsements = function (data) {
            // reset all icons
            var $links = $('.js-endorse-link');
            setSelected($links, false);

            var $oldEndorsements = $('.js-endorsements');
            $oldEndorsements.empty();

            for (var i = 0; i < data.ExplicitEndorsements.length; i++) {
                var endorsementData = data.ExplicitEndorsements[i];
                var id = endorsementData.PostId;
                var hasEndorsements = endorsementData.HasEndorsements;
                var $newEndorsement = $(endorsementData.EndorsementContent);

                if (id && $newEndorsement) {
                    var $answer = $('#answer-' + id)
                    var $oldEndorsement = $answer.find('.js-endorsements');

                    // Update endorsement text above answer text
                    if ($oldEndorsement.length > 0) {
                        $oldEndorsement.replaceWith($newEndorsement);
                    } else {
                        var $answerCell = $('#answer-' + id).find('.answercell');
                        $answerCell.prepend($newEndorsement);
                    }

                    // Update button
                    var $postLayout = $newEndorsement.parents('.answer');
                    var $endorsementButton = $postLayout.find('.js-endorse-link');

                    setSelected($endorsementButton, hasEndorsements);
                }
            };
        };

        var $endorseLink = $('.js-endorse-link');
        var singleCommunitySlug = $endorseLink.data('single-community-slug');

        if (singleCommunitySlug) {
            $endorseLink.click(endorseAnswerSingleCommunity_click);
        } else {
            $endorseLink.click(endorseAnswerManyCommunities_click);
        }

        $('.js-endorse-link').each(function () {
            var $this = $(this);

            setSelected($this, isSelected($this));
        });
    }

    function changeSortPreference(preference) {
        let currentUrl = window.location.href;
        $.ajax({
            type: "POST",
            url: currentUrl,
            data: {
                fkey: StackExchange.options.user.fkey,
                sortOrderPreference: preference
            }
        });
    }
    
    function changeSortPreferenceAndRefresh(preference) {
        const currentUrl = new URL(window.location.href);
        if (currentUrl) {
            currentUrl.searchParams.set('answertab', preference);
            currentUrl.searchParams.delete('page');
            currentUrl.searchParams.delete('tab');

            // remove #tab-top anchor
            const urlString = currentUrl.toString().replace(/#.*$/, '');
            window.location.href = urlString + '#tab-top';
        }
        changeSortPreference(preference);
    }

    function dismissTrendingSortLaunchPopover(showTrendingSortLaunchPopover) {
        if (!showTrendingSortLaunchPopover) {
            // we only track the first 30 days popover,
            // not the 90 days post-launch popover
            return;
        }
        
        $.cookie('notice-tsl', '1', { path: '/', expires: 30 });

        if (!StackExchange.options.user.isAnonymous) {
            $.post("/trending-launch-popover/dismiss", {
                fkey: StackExchange.options.user.fkey
            });
        }
    }
    
    return {
        initTitleSearch: initTitleSearch,
        getQuestionId: getQuestionId,
        initShareLinks: initShareLinks,
        canViewVoteCounts: function () { return canViewVoteCounts; },
        scrollToPost: scrollToPost,
        scrollToComment: scrollToComment,
        instrumentVotingForVotePromptExperiment: function () {
            $('.js-voting-container').each(function (ix, e) {
                var $e = $(e);
                var pid = +$e.data('post-id');
                var $upVote = $e.find('.js-vote-up-btn');
                var $downVote = $e.find('.js-vote-down-btn');

                $upVote.attr('data-gps-track', 'post.prompted_vote({post_id:' + pid + ', vote_type: 2})').addClass('js-gps-track');
                $downVote.attr('data-gps-track', 'post.prompted_vote({post_id:' + pid + ', vote_type: 3})').addClass('js-gps-track');

                // there's a chance GPS hasn't been loaded yet
                StackExchange.using("gps", function () {
                    StackExchange.gps.bindTrackClicks($e);
                });
            });
        },
        init: function (options) {

            if (StackExchange.settings.questions.enableSavesFeature) {
                (0,_saves_mod__WEBPACK_IMPORTED_MODULE_1__.initSaves)();
            }
            
            canViewVoteCounts = options.canViewVoteCounts;
            if (StackExchange.question.fullInit)   // this function is set in full.part.js, so it's only available for logged in users
                StackExchange.question.fullInit(options);
            else {
                StackExchange.question.bindAnonymousVoteDisclaimers();
                StackExchange.OutdatedAnswers.initAnon(true);
            }

            StackExchange.comments.init({
                autoShowCommentHelp: options.autoShowCommentHelp,
                commentHighlightFocus: options.commentHighlightFocus
            });

            initShareLinks();

            if (options.showAnswerBanWarning)
                $('#wmd-input').one("focus", showAnswerBanWarning);
                $(".js-answer-ban-close-btn").on("click", hideAnswerBanWarning);

            if (options.showAnswerHelp && !options.showAnswerBanWarning)
                $("#wmd-input").one("focus", showAnswerHelp);
                $(".js-answer-help-close-btn").on("click", hideAnswerHelp);

            if (options.focusPostEditor) {
                $("#wmd-input").focus();

                $('#post-form')[0].scrollIntoView(true);
            }

            initEndorsementLinks();

            // bind citation menu if it is enabled
            if (options.showCitation) {
                $(document).on("click", ".js-post-menu .js-cite-link", function (evt) {
                    evt.preventDefault();
                    (0,_citation_mod__WEBPACK_IMPORTED_MODULE_0__.showCitation)($(this));
                });
            }

            StackExchange.helpers.bindOnHashChange_HighlightDestination(
                function (commentId, postId) {
                    StackExchange.comments.highlight(commentId, postId);
                },
                function (postId) {
                    var $post = getPost(postId);
                    doHighlight($post);
                }
            );

            cleanupNextAndPreviousButtonState();

            bindNewContributorIndicators();

            $('.downvoted-answer').on('click', function (e) {
                // One click removes the opacity-50% that is in css (setting it explicitly to 100%
                // The next click removes the forced o100 and returns it to 50%, see https://meta.stackexchange.com/q/355103/51
                var $downvotedAnswer = $(e.target).parents('.downvoted-answer');
                $downvotedAnswer.find('.s-prose, .comment-body, .post-signature, .vote > *').toggleClass('o100');
            });

            // post request to change answer sort order preference for reset to default
            $(document).on('click', '.js-sort-preference-change', function () {
                const $this = $(this);
                const preference = $this.attr('data-value');
                changeSortPreference(preference);
            })

            // post request to change answer sort order preference for sort dropdown
            $(document).on('change', '#answer-sort-dropdown-select-menu', function (e) {
                const preference = e.target.value;
                changeSortPreferenceAndRefresh(preference);
            })

            var showEitherTrendingSortLaunchPopover = options.showTrendingSortLaunchPopover || options.showTrendingSortPostLaunchPopover;
            
            if (showEitherTrendingSortLaunchPopover) {
                $('.js-try-trending-sort').on('click', function() {
                    dismissTrendingSortLaunchPopover(options.showTrendingSortLaunchPopover);
                    changeSortPreferenceAndRefresh("trending");
                });
                
                $('.js-launch-popover-toggle').on('s-popover:shown', function() {
                    $.post('/trending-launch-popover/track', {
                        fkey: StackExchange.options.user.fkey,
                        type: options.showTrendingSortLaunchPopover ? "First30Days" : "After30Days"
                    });
                });

                $('.js-launch-popover-toggle').on('s-popover:hidden', function() {
                    dismissTrendingSortLaunchPopover(options.showTrendingSortLaunchPopover);
                });
            }

            //HACK move the call to the end of the execution queue so all controls are init'd first
            window.setTimeout(handleHashFocusTarget, 0);
        }
    };

})();

StackExchange.question.bindAnonymousVoteDisclaimers = function () {
    function handler(e) {
        var $clicked = $(this);
        var $container = $clicked.closest('.js-voting-container');
        var isUpVote = $clicked.hasClass('js-vote-up-btn');
        var isDownVote = $clicked.hasClass('js-vote-down-btn');
        var isBookmark = $clicked.hasClass('js-bookmark-btn');
        var isFollow = $clicked.hasClass('js-follow-post');
        var isAnswer = $clicked.closest(".answer").length;
        e.preventDefault();

        if (isUpVote || isDownVote || isFollow) {
            if (StackExchange.options.inReadOnly) {
                $container.showErrorMessage(__tr(["Voting isn't available in read-only mode."], undefined, "en", []), { "transient": true });
                return;
            }

            var postId = $container.data('post-id');
            if (isFollow) {
                var isQuestion = $clicked.closest('.question').length > 0;
                isAnswer = !isQuestion;
                // this logic is only ever shown on page if is question or answer
                postId = parseInt(isQuestion ? $clicked.closest('.question').data('questionid') : $clicked.closest('.answer').data('answerid'));
            }
            var voteTypeId = isFollow ? 21 : (isUpVote ? 2 : 3);

            if ($container.is(':working')) { return; }
            $container.working(true);

            StackExchange.helpers.removeMessages();

            $.ajax({
                type: 'POST',
                url: '/posts/popup/anon-vote/{postId}?voteTypeId={voteTypeId}'.formatUnicorn({ postId: postId, voteTypeId: voteTypeId }),
                data: { fkey: StackExchange.options.user.fkey },
                dataType: 'html',
                success: function (html) {
                    if (html.indexOf('js-research-toast') !== -1) {
                        StackExchange.helpers.showToast(html, { transient: false, useRawHtml: true });
                    } else {
                        StackExchange.openid.showLoginModal(html, { returnElements: $clicked });

                        if (isUpVote || isDownVote) {
                            StackExchange.using("gps", function () {
                                StackExchange.gps.track("vote_popup.show", { type: isAnswer ? 2 : 1 });
                            });
                        }
                    }
                },
                complete: function () {
                    $container.working(false);
                }
            });
        }
        else if (isBookmark) {
            if (StackExchange.options.inReadOnly) {
                $container.showErrorMessage(__tr(["Bookmarking is disabled while the site is in read-only mode."], undefined, "en", []), { "transient": true });
                return;
            }

            var message =
                __tr(["Please $startAnchor$log in or register$endAnchor$ to bookmark this question."], {startAnchor: '<a href="/users/login?ssrc=bookmark_question&returnurl=' + escape(document.location) + '">',endAnchor: '</a>'}, "en", []);
            StackExchange.using("gps", function () {
                StackExchange.gps.track('favorite_popup.show', {});
            });
            StackExchange.helpers.showMessage($clicked, message, { type: 'info', position: { my: 'left top', at: 'right center' }, css: { 'margin-left': '-10px' } });
        }
    }

    $('.js-vote-down-btn, .js-vote-up-btn, .js-bookmark-btn:not(.disabled), .js-follow-post:not(.disabled)').each(function () {
        var $this = $(this);
        if (!$this.data('bound-anonymous')) {
            $this.data('bound-anonymous', true);
            $this.click(handler);
        }
    });

    StackExchange.question.bindFetchAcceptedAnswerDates();
};

StackExchange.question.bindFetchAcceptedAnswerDates = function () {

    // for users that aren't the question owner, only fetch when the accepted answer occurred if they hover over the checkmark
    $('.js-accepted-answer-indicator').on('mouseenter mouseleave focus', function () {
        var $a = $(this);
        if ($a.is(':working')) { return; }

        $a.working(true);

        var answerId = $a.closest('.answer').data('answerid');
        if (!answerId) {
            $a.removeAttr('title data-controller');
            return;
        }

        var url = '/posts/' + answerId + '/accepted-answer-date';
        $.get(url, function(text) {
            $a.setTooltipHtml(text);
        });
    });

};

/*
 *  This depends on answers having a data-ivc and data-answerid attribute
 */
StackExchange.question.addAnswerIvcObservers = function () {
    var intersectionObserverViewedAnswers = new Set();
    var scrollEventViewedAnswers = new Set();
    var observer = new IntersectionObserver(intersectionCallback);
    var answerVoteCounts = document.querySelectorAll('.js-answer .js-vote-count');

    // Observe using intersection observer
    answerVoteCounts.forEach(function (target) {
        observer.observe(target);
    });

    function intersectionCallback(entries, observer) {
        /*
         *  From MDN: (https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
         *  > Be aware that your callback is executed on the main thread. It should operate as quickly as possible;
         *  > if anything time-consuming needs to be done, use Window.requestIdleCallback()
         */
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                var answer = entry.target.closest('.js-answer');
                var id = answer.dataset.answerid;
                if (!intersectionObserverViewedAnswers.has(id)) {
                    intersectionObserverViewedAnswers.add(id);
                    sendAnswerIvc(answer, 'intersection');
                    observer.unobserve(entry.target);
                }
            }
        });
    }

    function sendAnswerIvc(answerElement, type) {
        var contentPosition = answerElement.querySelector('.js-post-body').getBoundingClientRect();
        var clientParams = {
            v: '1', // version string to support data team analysis, update when something significant changes with collection
            contentHeight: contentPosition.height.toFixed(1),
            contentY: (contentPosition.y + window.scrollY).toFixed(1),
            scrollY: window.scrollY.toFixed(1),
            pageHeight: document.body.scrollHeight.toFixed(1),
            viewportHeight: window.innerHeight.toFixed(1),
            viewportWidth: window.innerWidth.toFixed(1),
            trigger: type,
        }
        var endpoint = answerElement.dataset.ivc + '&' + new URLSearchParams(clientParams).toString();
        $.get(endpoint);
    }
}


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/12_Comments.js":
/*!******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/12_Comments.js ***!
  \******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// passive functionality, i.e. for *displaying* comments only.
// In full.js (i.e. when full.part.js is appended to this file),
// this will be extended to also include active functionality.
//
// StackExchange.comments.loadAll(elem) can be called to fetch missing comments
// from the server. elem should be a jQuery object or anything that can be passed
// to $(...), and should be something (anything, really) within a question or answer.
// Could be the "show more" link, or a comment, or whatever -- just so we know
// for which post you want to load the comments. It returns a deferred object promise.

StackExchange.comments = (function () {
    var commentHighlightFocus;
    var postUiCache = {};

    function PostUi(postId, jCommentsDiv, context) {
        this.postId = postId;
        // Location is used for prizm events
        this.location = jCommentsDiv.closest('.answer').length ? 'answer' : jCommentsDiv.closest('.question').length ? 'question' : 'other';
        this.jDiv = jCommentsDiv;
        this.jCommentsList = jCommentsDiv.find('.js-comments-list');
        this.jCommentsLinkContainer = $("#comments-link-" + postId);
        this.context = context;
    }

    var noop = function () { };

    PostUi.prototype = {

        // these five will be replaced with actual functionality if we have a non-anon user
        checkDiscussion: noop,
        ensureInput: noop,
        renderTextInput: noop,
        alterAddEditDataBeforeSubmit: noop,
        saveEditingComments: noop,
        restoreEditingComments: noop,

        isInputShown: function () {
            var form = this.jDiv.find('form[id^="add-comment-"]');
            return form.children().length && form.is(":visible");
        },

        commentsShown: function () {
            this.remainingCommentsCount(0);
        },

        remainingCommentsCount: function (valueOrNothing) { // getter if called without argument
            if (typeof valueOrNothing === "undefined") {
                return parseInt(this.jCommentsList.data('remaining-comments-count')) || 0;
            }
            this.jCommentsList.data('remaining-comments-count', valueOrNothing);
        },

        addShow: function (noFocus, shouldRenderAddForm) {
            var that = this;
            var loadAllDone = this.loadAllComments().done(function () { that.checkDiscussion(); });
            if (shouldRenderAddForm) {
                var input = this.ensureInput();
                if (input && !noFocus)
                    input.focus();
            }

            loadAllDone.done(function() { if (input && input.length > 0) that.jCommentsLinkContainer.hide(); });
        },

        ajax: function (options, errorDescription, jContainer, noLoaderAnimation) {
            if (jContainer && !noLoaderAnimation)
                StackExchange.helpers.addSpinner(jContainer, { 'margin-left': '10px' });
            var that = this;
            return $.ajax(options).fail(function (res) {
                var error = res.responseText;
                if (!error || error.indexOf("<html") >= 0) // <- YSOD?
                    error = errorDescription || __tr(["An error occurred"], undefined, "en", []);

                StackExchange.helpers.showErrorMessage(jContainer || that.jDiv, error, { transient: res.status == 409 }); // fade away throttle errors

                if (jContainer && !noLoaderAnimation)
                    StackExchange.helpers.removeSpinner();
            }).done(StackExchange.helpers.removeSpinner).promise();
        },

        setCommentsMenu: function(commentsCount) {
            var encodedAddLinkHtml = "";
            var encodedShowLinkHtml = "";


            if (commentsCount > 0) {
                encodedShowLinkHtml = __tr(["Show <strong>$count$</strong> more comment","Show <strong>$count$</strong> more comments"], {count: commentsCount}, "en", ["count"]);
            }

            if (!this.isInputShown() && (this.jCommentsList.data('cansee') || this.jCommentsList.data('canpost'))) {
                if (StackExchange.settings.comments.addButtonSaysSuggestImprovements) {
                    encodedAddLinkHtml = __tr(["Suggest improvements"], undefined, "en", []);
                }
                else {
                    encodedAddLinkHtml = __tr(["Add a comment"], undefined, "en", []);
                }
            }

            // if there is no other label, and comments unavailable is set, then add a comments disabled link
            // (otherwise not because mods can add comments on all posts)
            if (!encodedAddLinkHtml.length && !encodedShowLinkHtml && this.jCommentsList.data('comments-unavailable')) {
                encodedAddLinkHtml = __tr(["Comments disabled on deleted / locked posts / reviews"], undefined, "en", []);
            }

            if (StackExchange.options.inReadOnly) {
                encodedAddLinkHtml = "";
            }

            var addLink = this.jCommentsLinkContainer.find('.js-add-link');
            var showLink = this.jCommentsLinkContainer.find('.js-show-link');

            addLink.html(encodedAddLinkHtml);
            showLink.html(encodedShowLinkHtml);

            // if either of the two links is empty, hide it
            if (encodedAddLinkHtml.length) {
                addLink.removeClass("dno");
            } else {
                addLink.addClass("dno");
            }

            if (encodedShowLinkHtml.length) {
                showLink.removeClass("dno");
            } else {
                showLink.addClass("dno");
            }

            // remove the | separator if only one of the two links is visible
            if (encodedAddLinkHtml.length && encodedShowLinkHtml.length) {
                this.jCommentsLinkContainer.find('.js-link-separator').removeClass('dno');
            } else {
                this.jCommentsLinkContainer.find('.js-link-separator').addClass('dno');
            }

            if (this.jCommentsList.data('addlink-disabled')) {
                addLink.addClass('disabled-link');
            }
        },
        clearHighlights: function() {
             this.jCommentsList.find('.js-comment').removeClass('new_comment').css('background-color', '');
        },
        showComments: function (htmlOrJQuery, submittedEditCommentId, noHighlighting, noScrolling) {
            this.saveEditingComments(submittedEditCommentId);
            var highlight = !noHighlighting;
            var existing = {};
            this.clearHighlights();
            if (highlight)
            {
                this.jCommentsList.find('.js-comment').each(function (index, tr) {
                    if (tr.id && tr.id.length) existing[tr.id] = true;
                });
            }
            this.jCommentsList.empty().append(htmlOrJQuery);
            if (highlight)
            {
                var first = null;
                this.jCommentsList.find('.js-comment').each(function (index, jComment) {
                    if (jComment.id && jComment.id.length && !existing[jComment.id]) {
                        if (!first) first = jComment;
                        $(jComment).addClass('new_comment');
                    }
                });
                var found = this.jCommentsList.find('.new_comment');
                flashHighlight(found);

                if (commentHighlightFocus && found.length && !noScrolling) found[0].scrollIntoView(true);
            }

            this.restoreEditingComments();
            this.setCommentsMenu(0);

            if (typeof MathJax != 'undefined')
                MathJax.Hub.Queue(["Typeset", MathJax.Hub]);

            deepLink();
            this.commentsShown();
        },

        loadAllComments: function (force, additionalQueryParams, noHighlighting, noScrolling) {

            this.jDiv.removeClass("dno");
            var allCommentsShown = this.remainingCommentsCount() === 0;
            if (!force && allCommentsShown) {
                return $.Deferred().resolve().promise();
            }

            const isStagingGround = location.href.indexOf('/staging-ground/') > 0;
            const url = isStagingGround
                ? "/staging-ground/" + this.postId + "/comments" + (additionalQueryParams || '')
                : "/posts/" + this.postId + "/comments" + (additionalQueryParams || '');

            var that = this;
            return this.ajax({
                type: "GET",
                url: url,
                dataType: "html"
            }, __tr(["An error occurred while fetching comments"], undefined, "en", [])).done(function (html) { that.showComments(html, null, noHighlighting, noScrolling); }).promise();
        }
    };

    function flashHighlight(jCommentsOrId) {
        if (typeof jCommentsOrId === "string") {
            jCommentsOrId = $('#comment-' + jCommentsOrId);
        }
        jCommentsOrId.addClass("comment__highlight");
        setTimeout(function () {
            jCommentsOrId.removeClass("comment__highlight new_comment");
        }, 0);
    }

    function realtimeMessage(postId) {
        var container = $('#comments-' + postId);
        if (!container.length) // the realtime message may be for comments on an answer that's not shown on the page (yet)
            return;
        var ui = uiForPost(container);

        var commentLink = ui.jCommentsLinkContainer;
        var ctBody = ui.jCommentsList;
        var commentsCount = ui.remainingCommentsCount();

        commentsCount++;
        commentLink.data('comments-count', commentsCount);
        commentLink.attr('title', __tr(["Expand to show all comments on this post, or add one of your own"], undefined, "en", []));

        ui.setCommentsMenu(commentsCount);

        commentLink.removeClass('disabled-link');
        ui.remainingCommentsCount(commentsCount);

        commentLink.show().fadeTo('fast', 0.7).fadeTo('fast', 1);
    };


    function uiForPost(elOrJQueryOrSelector) {
        var $el = elOrJQueryOrSelector.constructor === $ ? elOrJQueryOrSelector : $(elOrJQueryOrSelector);
        var $container = $el.closest('.js-comments-container');
        if ($container.length === 0) {
            $container = $el.closest(".js-post-comments-component, .question, .answer, div[id^='post-'], .js-article, .js-collective-collection").find(".js-comments-container");
        }
        if ($container.length === 0) {
            $container = $(".js-staging-ground-comments-container");
        }
        var postId = $container.data('post-id');
        var commentContext = $container.data('comment-context') || 'none';
        var key = postId + '-' + commentContext;

        if (postUiCache[key]) {
            return postUiCache[key];
        }

        var ui = new PostUi(postId, $container, commentContext);
        postUiCache[key] = ui;
        return ui;
    }

    // This is used for "comment_popup.show" tracking only, which is limited for questions/answer on the question page - all others should be "unknown"
    function getPostTypeIdForTracking(commentLink) {

        //exclude review
        if (window.location.pathname.indexOf('/review') === 0)
            return 0; // unknown

        if (commentLink.closest('.question').length)
            return 1;

        if (commentLink.closest('.answer').length)
            return 2;

        return 0;
    }

    function commentsLinkClicked(e) {
        e.preventDefault();
        var commentLink = $(this);
        var ui = uiForPost(commentLink);
        var allCommentsShown = ui.remainingCommentsCount() === 0;
        var disabled = commentLink.hasClass("disabled-link");
        var repRequired = ui.jCommentsLinkContainer.data("rep");

        if (allCommentsShown && ui.jCommentsLinkContainer.data("anon")) {
            loadAnonCommentPopup(ui.postId, commentLink);
        }

        if (allCommentsShown && ui.jCommentsLinkContainer.data("reg")) {
            StackExchange.helpers.showMessage(commentLink,
                __tr(["You must have $linkStart$$rep$ reputation$linkEnd$ to comment","You must have $linkStart$$rep$ reputation$linkEnd$ to comment"], {rep: repRequired,linkStart: "<a href='/help/privileges/comment'>",linkEnd: "</a>"}, "en", ["rep"]),
                { type: "info", position: { my: "left top", at: "right center" }, relativeToBody: true });
            $.ajax({
                type: 'POST',
                url: '/posts/popup/attempted-comment/{postId}'.formatUnicorn({ postId: ui.postId }),
                data: { fkey: StackExchange.options.user.fkey },
                dataType: 'html',
            });
        }

        if (commentLink.hasClass('js-show-link')) {
            StackExchange.using("gps", function () { StackExchange.gps.track("comment.show"); });
        }

        var shouldRenderAddForm = false;

        if (commentLink.hasClass('js-add-link')) {
            shouldRenderAddForm = true;

            var location = ui.location || 'other';
            var type = allCommentsShown ? "all_shown" : "hidden";
            StackExchange.using("gps", function () { StackExchange.gps.track("comment.add", { location: location, type: type }); });
        }

        if (disabled)
            return;

        e.preventDefault();
        ui.addShow(false, shouldRenderAddForm);
    }

    function loadAnonCommentPopup(postId, $link) {

        if ($link.is(':working')) { return; }
        $link.working(true);

        StackExchange.helpers.removeMessages();

        StackExchange.using("gps", function () {
            StackExchange.gps.track("comment_popup.show", { type: getPostTypeIdForTracking($link) });
        });

        $.ajax({
            type: 'POST',
            url: '/posts/popup/anon-comment/{postId}'.formatUnicorn({ postId: postId }),
            data: { fkey: StackExchange.options.user.fkey },
            dataType: 'html',
            success: function (html) {
                StackExchange.openid.showLoginModal(html, { returnElements: $link });
            },
            complete: function () {
                $link.working(false);
            }
        });
    }

    function init(options) {
        options = options || {};
        var context = options.post || document;

        // init is sometimes called multiple times, which screws stuff up
        postUiCache = {}; // post cache stores stuff removed from the DOM tree ...
        $(context)
            .off("click", "a.js-add-link", commentsLinkClicked) // do not delegate multiple times
            .on("click", "a.js-add-link", commentsLinkClicked);
        $(context)
            .off("click", "a.js-show-link", commentsLinkClicked) // do not delegate multiple times
            .on("click", "a.js-show-link", commentsLinkClicked);
        // only deep link to comments on question/show
        if (context == document) {
            deepLink(options.hashPrefix);
        }

        extendPostUi(null, true); // we need to re-apply the default behavior on init because of review audits
        if (options.commentHighlightFocus) commentHighlightFocus = options.commentHighlightFocus;
    }

    var extendPostUiObj;
    function extendPostUi(obj, isTemp) {
        if (!isTemp) {
            extendPostUiObj = obj;
        }
        obj = obj || extendPostUiObj || {};
        for (var k in obj) {
            if (obj.hasOwnProperty(k))
                PostUi.prototype[k] = obj[k];
        }
    }

    // turns timestamps into anchors that allow direct linking
    function deepLink(hashPrefix) {
        var isQuestionPage = location.href.indexOf('/questions/') > 0;
        var isStagingGround = location.href.indexOf('/staging-ground/') > 0;
        var isElectionPage = !isQuestionPage && (location.href.endsWith('/election') || location.href.indexOf('/election/') > 0);
        var isCollectiveArticlePage = /\/collectives\/.+\/articles\//.test(location.href);
        var isCollectiveCollectionPage = /\/collectives\/.+\/collections\//.test(location.href);

        // only question/show, moderator election, Collective Article, and Collective Collecton pages are supported
        if (!isElectionPage && !isStagingGround && !isQuestionPage && !isCollectiveArticlePage && !isCollectiveCollectionPage) return;

        if (isQuestionPage && $('.question[data-questionid]').length == 0) return;

        // .comment-date has an inner span for UTC tooltip - we'll wrap an anchor around this tooltip span
        // note when using "Show More" comments, this will only find those freshly pulled comments
        $('.js-comment .comment-date > span').each(function () {

            var me = $(this);
            var cid = me.closest('.js-comment').attr('id').substr('comment-'.length);

            var pid = 0;
            if (isQuestionPage) {
                var $answer = me.closest('.answer');
                var answerId = $answer && $answer.length ? $answer.data('answerid') : 0;

                pid = (answerId ? answerId : StackExchange.question.getQuestionId());
            } else if (isCollectiveArticlePage || isStagingGround || isCollectiveCollectionPage) {
                pid = me.closest(".js-comments-container").data("post-id");
            } else {
                pid = me.closest('.js-nomination').data('postid');
            }

            var hash = (hashPrefix ? hashPrefix : '') + '#comment' + cid + '_' + pid;

            if (isQuestionPage || isStagingGround || isElectionPage || isCollectiveArticlePage || isCollectiveCollectionPage) {
                me.wrap('<a class="comment-link" href="{hash}" aria-label="Link to comment"></a>'.formatUnicorn({ hash: hash }));
            } else {
                me.wrap('<a class="comment-link" href="/q/{pid}/{hash}" aria-label="Link to comment"></a>'.formatUnicorn({ hash: hash, pid: pid }));
            }
        });
    }

    function highlight(commentId, postId) {
        var selector = '#comment-' + commentId,
            c = $(selector);

        if (c.length) { // comment is on the screen
            StackExchange.comments.flashHighlight(c);
            c[0].scrollIntoView(true);
        }
        else { // we need to fetch all comments
            var commentContainer = $('#comments-link-' + postId);

            if (commentContainer.length) {

                // If the user is a moderator, loads all comments, including deleted ones
                // that way we can highlight deleted comments from e.g.: the timeline
                var additionalQueryParams = null;
                if (StackExchange.options.user.isModerator) {
                    additionalQueryParams = '?includeDeleted=true';
                }

                StackExchange.comments.loadAll(commentContainer, additionalQueryParams).done(function () {
                    StackExchange.comments.flashHighlight(commentId);
                    ($(selector)[0] || commentContainer.closest(".question, .answer")[0]).scrollIntoView(true);
                });
            }

            // if we got here, the post (answer?) was probably deleted. do nothing.
        }
    };

    return {
        init: init,
        loadAll: function (where, additionalQueryParams) { return uiForPost(where).loadAllComments(true, additionalQueryParams, true, true); },
        replaceAll: function (where, htmlOrJQuery) {
            uiForPost(where).showComments(htmlOrJQuery, null, true, true);
        },
        realtimeMessage: realtimeMessage,
        flashHighlight: flashHighlight,
        highlight: highlight,

        // the following two are intended only for adding active functionality
        // (in full.part.js)
        // the passed in handler must execute on each call since review audits need to override some functionality
        extendPostUi: extendPostUi,
        uiForPost: uiForPost
    };
})();          // end of StackExchange.comments




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/14_TagRenderer.js":
/*!*********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/14_TagRenderer.js ***!
  \*********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// required and moderator_only are string arrays
window.initTagRenderer = function initTagRenderer(required, moderator_only, channelOptions) {
    if (window.tagRenderer)
        return;

    channelOptions = channelOptions || {
        tags: [],
        id: "",
    };

    // if link_root is given, the resulting URL is absolute, and required/moderator_only are ignored (because those are about *this* site)
    window.tagRendererRaw = function (tag, link_root, tagName, useStacksClasses) {
        link_root = link_root || "";
        tagName = tagName || "a";
        var extra_class = "";
        var base_class = useStacksClasses ? "s-tag" : "post-tag";
        var tagNameHtmlEntityEncoded = StackExchange.helpers.encodeHexHtmlEntities(tag);

        if (!link_root) {
            if (required && $.inArray(tagNameHtmlEntityEncoded, required) > -1)
                extra_class = useStacksClasses ? "s-tag__required" : "required-tag";
            else if (moderator_only && $.inArray(tagNameHtmlEntityEncoded, moderator_only) > -1)
                extra_class = useStacksClasses ? "s-tag__moderator" : "moderator-tag";
        }

        var result = $("<" + tagName + ">")
            .addClass(base_class)
            .addClass(extra_class)
            .addClass($.inArray(tag, channelOptions.tags) > -1 ? "site" + channelOptions.id + " themed channel" + channelOptions.id + "-tag" : "")
            .text(tag);
        if (tagName.toLowerCase() === "a") {
            result.attr({
                rel: 'tag',
                href: link_root + "/questions/tagged/" + encodeURIComponent(tag),
                title: __tr(["show questions tagged '$tag$'"], {tag: tag}, "en", []),
            });
        }
        return result.outerHTML();
    };
    window.tagRenderer = function (tag, link_root, tagName, useStacksClasses) {
        return $(tagRendererRaw(tag, link_root, tagName, useStacksClasses));
    };

    window.tagRenderer.requiredTags = required;
    window.tagRenderer.moderatorOnlyTags = moderator_only;
    window.tagRenderer.channelOptions = channelOptions;
    window.tagRenderer.markDivergedTag = (tagName) => {
        if (!channelOptions.tags.includes(tagName)) {
            channelOptions.tags.push(tagName)
        }
    }
}




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/15_FadingHelpText.js":
/*!************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/15_FadingHelpText.js ***!
  \************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


function showFadingHelpText(elem) {
    // to accommodate special css files, wrap the help in another div and animate that - remove wrapper when complete                
    elem.wrap('<div class="dno" />').show().parent().fadeIn('slow', function () { $(this).children().unwrap(); });
}

window.initFadingHelpText = function initFadingHelpText() {
    var map = {
        'wmd-input': '#how-to-format',
        'tagnames': '#how-to-tag',
        'tag-editor': '#how-to-tag',
        'title': '#how-to-title',
        'wmd-input-42': '#how-to-format',
        'edit-comment': '#how-to-comment',
        'js-stacks-editor-container': '#how-to-format'
    };
    var jInputs = $('.wmd-input, #tagnames, #title, .tag-editor input, #wmd-input-42, .edit-comment, .js-stacks-editor-container');
    var getHelpSelector = function (i) {
        var jI = $(i);
        if (jI.parent().hasClass("tag-editor") && !jI.closest('.js-mentions-input').length)
            return map["tag-editor"];
        if (jI.hasClass("wmd-input"))
            return map["wmd-input"];
        if (jI.hasClass("edit-comment"))
            return map["edit-comment"];
        if (jI.hasClass("js-stacks-editor-container"))
            return map["js-stacks-editor-container"];
        return map[$(i).attr('id')];
    };
    jInputs.focusin(function () {
        var newSelector = getHelpSelector(this);
        jInputs.each(function () {
            var thisSelector = getHelpSelector(this);            
            if (thisSelector != newSelector) {
                $(thisSelector).hide();                
            }
        });
        var newHelp = $(newSelector);
        if (!newHelp.is(":visible")) {
            showFadingHelpText(newHelp);
        }
    });
}




/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/18_jQueryCaretPlugin.js":
/*!***************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/18_jQueryCaretPlugin.js ***!
  \***************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


/*
 *
 * Copyright (c) 2010 C. F., Wong (<a href="http://cloudgen.w0ng.hk">Cloudgen Examplet Store</a>)
 * Licensed under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */
(function($,len,createRange,duplicate){
    var browser= !("selectionStart" in $("<input type='text' />")[0]);
	$.fn.caret=function(options,opt2){
		var start,end,t=this[0];
		if(typeof options==="object" && typeof options.start==="number" && typeof options.end==="number") {
			start=options.start;
			end=options.end;
		} else if(typeof options==="number" && typeof opt2==="number"){
			start=options;
			end=opt2;
		} else if(typeof options==="string"){
			if((start=t.value.indexOf(options))>-1) end=start+options[len];
			else start=null;
		} else if(Object.prototype.toString.call(options)==="[object RegExp]"){
			var re=options.exec(t.value);
			if(re != null) {
				start=re.index;
				end=start+re[0][len];
			}
		}
		if(typeof start!="undefined"){
			if(browser){
				var selRange = this[0].createTextRange();
				selRange.collapse(true);
				selRange.moveStart('character', start);
				selRange.moveEnd('character', end-start);
				selRange.select();
			} else {
				this[0].selectionStart=start;
				this[0].selectionEnd=end;
			}
			this[0].focus();
			return this
		} else {
			// Modification as suggested by ÐÐ½Ð´ÑÐµÐ¹ Ð®ÑÐºÐ¸Ð½
           if(browser){
				var selection=document.selection;
                if (this[0].tagName.toLowerCase() != "textarea") {
                    var val = this.val(),
                    range = selection[createRange]()[duplicate]();
                    range.moveEnd("character", val[len]);
                    var s = (range.text == "" ? val[len]:val.lastIndexOf(range.text));
                    range = selection[createRange]()[duplicate]();
                    range.moveStart("character", -val[len]);
                    var e = range.text[len];
                } else {
                    var range = selection[createRange](),
                    stored_range = range[duplicate]();
                    stored_range.moveToElementText(this[0]);
                    stored_range.setEndPoint('EndToEnd', range);
                    var s = stored_range.text[len] - range.text[len],
                    e = s + range.text[len]
                }
			// End of Modification
            } else {
				var s=t.selectionStart,
					e=t.selectionEnd;
			}
			var te=t.value.substring(s,e);
			return {start:s,end:e,text:te,replace:function(st){
				return t.value.substring(0,s)+st+t.value.substring(e,t.value[len])
			}}
		}
	}
})(jQuery,"length","createRange","duplicate");


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/19_NoCaptcha.js":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/19_NoCaptcha.js ***!
  \*******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.nocaptcha = (function () {
    function init(html, callback) {
        var popupHtml = [
            '<div class="popup captcha-popup lightbox-panel" style="display: block; text-align: left;">',
                '<div class="popup-close">',
                $('<a>', { title: __tr(["close this popup (or hit Esc)"], undefined, "en", []), text: 'Ã' }).prop('outerHTML'),
                '</div>',
                html,
            '</div>'].join('');

        $('body').loadPopup({
            target: $('body'),
            html: popupHtml,
            lightbox: true,
            loaded: function (popup) { popupLoaded(popup, callback); }
        });
    }

    function popupLoaded($popup, callback) {
        var $form = $popup.find('form:first');

        StackExchange.helpers.enableSubmitButton($form);

        $form.submit(function () {
            StackExchange.helpers.disableSubmitButton($form);
            $form.find('input[type="submit"]').addSpinnerAfter();

            $.ajax({
                url: '/nocaptcha',
                type: 'POST',
                dataType: 'json',
                data: $form.serialize(),
                success: function (data) {
                    if (data.captchaError) {
                        StackExchange.helpers.removeSpinner();
                        StackExchange.helpers.enableSubmitButton($form);
                        $form.find('.form-error').html(data.captchaError);
                        Recaptcha.reload();
                    }
                    else {
                        $popup.find('.popup-close a').click();
                        callback(data);
                    }
                },
                error: function () {
                    StackExchange.helpers.removeSpinner();
                    StackExchange.helpers.enableSubmitButton($form);
                    StackExchange.helpers.showErrorMessage($form, __tr(["An error occurred submitting the CAPTCHA"], undefined, "en", []));
                }
            });

            return false;
        });
    }

    return {
        init: init
    };
})();



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/20_Analytics.js":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/20_Analytics.js ***!
  \*******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// Begin 20_Analytics.js
StackExchange.gps = (function () {
    if (StackExchange.gps && StackExchange.gps.inited) {
        return StackExchange.gps;
    }
    var inFlight = {};

    function getRoutePrefix() {
        if (StackExchange && StackExchange.options && StackExchange.options.site
            && StackExchange.options.site.routePrefix && StackExchange.options.site.routePrefix.length) {
            return StackExchange.options.site.routePrefix;
        } else {
            return "";
        }
    }

    // use the pre init track and sending until init is actually called
    var preInitTrack = StackExchange.gps.track;
    var preInitSendPending = StackExchange.gps.sendPending;

    // Initialize; takes no options, returns true if tracking will proceed and false if we have to bail
    function init(enabled) {
        if (StackExchange.gps.inited) {
            return true;
        }
        StackExchange.gps.inited = true;

        if (!enabled || !localStorageWorks()) {
            // we can't function, so ditch tracking (no reason to hit the server or spam client side errors)
            StackExchange.gps.track = function (evt, props, postponeSending, callback) {
                if (callback) callback();
            };
            delete StackExchange._gps_track;
            return false;
        }

        // only set those once we're sure we have localStorage
        StackExchange.gps.sendPending = sendPending;
        StackExchange.gps.track = track;

        slurpPreInit();
        sendPending();

        // https://trello.com/c/qYdHIGnN/1030-new-event-related-tags-click
        bindPositionalEventClicks('.tagged-questions-page, .questions-page, .tags-page', '.js-gps-related-tags .post-tag', 'related_tags.click', ', item_type:1');
        
        // https://trello.com/c/dqlHk3FJ
        bindPositionalEventClicks('.question-page .post-taglist', '.post-tag', 'question_tags.click', ', location:1'); //question
        bindPositionalEventClicks('.question-page #sidebar .tagged', '.post-tag', 'question_tags.click', ', location:2'); //sidebar

        bindTrackClicks();
        return true;
    }

    function localStorageWorks() {
        try {
            if (!window.localStorage) return false;
            window.localStorage['gps-probe'] = '1';
            if (window.localStorage['gps-probe'] != '1') return false;

            window.localStorage.removeItem('gps-probe');
        } catch (e) { return false; }

        return true;
    }
    
    // calls to this must occur before bindTrackClicks
    function bindPositionalEventClicks(bodySelector, anchorSelector, eventName, extraEventParameters) {
        $(bodySelector).find(anchorSelector).each(function (i) {
            $(this).addClass('js-gps-track').data('gps-track', eventName + '({ position:' + (i + 1) + extraEventParameters + ' })');
        });
    };
    
    function bindTrackClicks(optionalContainer) {
        /// <summary>
        /// Binds ONE INVOCATION of gps.track per anchor (or any clickable element) having class "js-gps-track" 
        /// and a data attribute with one or more events to be tracked.
        /// </summary>
        /*
            Examples where each anchor translates to the subsequent javascript calls: 
            
                <a href="#" class="js-gps-track" data-gps-track="site.switch({ item_type: 8, target_site:2 })">test</a>
                StackExchange.gps.track('site.switch', { "item_type":8, "target_site":2 });

                <a href="#" class="js-gps-track" data-gps-track="site_switcher.show;">test</a>
                StackExchange.gps.track('site_switcher.show', {});

                <a href="#" class="js-gps-track" data-gps-track="site.switch({ item_type: 8, target_site:2 }); site_switcher.show()">test</a>
                StackExchange.gps.track('site.switch', { "item_type":8, "target_site":2 });
                StackExchange.gps.track('site_switcher.show', {});
        */
        
        var $bound = $(optionalContainer || document).find('.js-gps-track').off('click.gps').one('click.gps', function () {
            var data = $.trim($(this).data('gps-track'));
            if (data) {
                var arrayOfPairs = bindTrackClicks_parseData(data);

                for (var i = 0; i < arrayOfPairs.length; i++) {
                    var pair = arrayOfPairs[i];
                    // queue up, so we don't send duplicates due to navigation killing an immediate ajax call    
                    StackExchange.gps.track(pair[0], pair[1], /*postponeSending*/ true);
                }
                
            }
        });
        
        log('bindTrackClicks bound {0} elements in {1}', $bound.length, optionalContainer || 'document');
    };

    function bindTrackClicks_parseData(data) {
        /// <summary>
        /// Returns an array of arrays parsed from the parameter data, where each 
        /// inner array is a pairing of an event name and its event data object.
        ///
        /// Example: 
        ///     data   = "site.switch();site_switcher.click({ item_type:3 })"
        ///     result = [ ["site.switch", { }], ["site_switcher.click", ["item_type":3] ]
        /// </summary>

        var result = [];

        // first, get each event name and its optional parameters as a whole string
        // e.g. "site.switch();site_switcher.click({ item_type:3 })" => ["site.switch", "site_switcher.click({ item_type:3 })"]
        var events = data.match(/([a-z._-]+)(\([^)]+\))?/ig);

        // we should consider refactoring this
        for (var i = 0; i < events.length; i++) {
            // now parse out the name and the parameters
            var event = events[i];
            if (event.indexOf('{') < 0) {
                // no parameters
                result.push([event, {}]);
            }
            else {
                // e.g. ["inbox_popup.click({ item_type:3, something: 4 })", "inbox_popup.click", " item_type:3, something:4 "]
                var nameAndAllParams = event.match(/([a-z._-]+)\s*\(\s*\{([^}]+)\}\s*\)/i) || [],
                    name = nameAndAllParams[1],
                    allParamsStr = $.trim(nameAndAllParams[2]) || "",
                    allParams = allParamsStr.match(/[^,]+/ig) || [],
                    params = {};
                
                // e.g. [" item_type:3 ", "something:4"]
                
                for (var j = 0; j < allParams.length; j++) {
                    var p = allParams[j],
                        colonIndex = p.indexOf(':'),
                        pName = $.trim(p.substr(0, colonIndex)),
                        pValue = $.trim(p.substr(colonIndex + 1)),
                        pValueParsed = parseString(pValue);
                    
                    params[pName] = pValueParsed;
                }
                result.push([name, params]);
            }
        }

        return result;

        function parseString(value) {
            if (value === "true")
                return true;
            if (value === "false")
                return false;

            if (value[0] === "'" || value[0] === '"')
                return value.substring(1, value.length - 1);

            var parsed = parseFloat(value);
            return isNaN(parsed) ? value : parsed;
        }
    }

    function trackOutboundClicks(contentContainerSelector, contentSelector) {
        /// <summary>
        /// Clicks to locations outside our network will have Google Analytics events logged.
        /// </summary>
        /// <param name="contentContainerSelector">
        /// A container element that should always exist in the DOM, even if parameter 'contentSelector' is dynamically added.
        /// </param>
        /// <param name="contentSelector">
        /// An element that can contain external links, e.g. a post's body.
        /// </param>

        $(contentContainerSelector).on("click", contentSelector + " a[href]:not(.question-hyperlink, .answer-hyperlink)", function () {
            var $a = $(this),
                href = $a.attr('href');

            if (!StackExchange.helpers.isInNetwork(href)) {
                if (typeof ga === "undefined") {
                    // local and dev builds don't include google analytics
                    log('outbound link clicked ' + href);
                }
                else {
                    // Google Analytics track outbound links https://support.google.com/analytics/answer/1136920?hl=en-GB
                    // beacon info https://developers.google.com/analytics/devguides/collection/analyticsjs/advanced#useBeacon
                    ga('send', 'event', 'outbound', 'click', href, { useBeacon: true });
                }
            }
        });
    }

    function sendPending(callback) {
        var pending = getPending();
        if (pending.length > 0) {
            var now = (new Date()).getTime();

            // batch these up to keep Haproxy from getting angry
            var keep = [];
            for (var i = 0; i < pending.length && keep.length < 20; i++) {
                var toSend = pending[i];

                var elapsed = now - toSend.now;
                if (elapsed < 0 || elapsed > (3600 * 1000)) {
                    removeFromPending(toSend);
                } else {
                    keep.push(toSend);
                }
            }

            if (keep.length > 0)
            {
                send(keep, callback);
            }
            else
            {
                if (callback) callback();
            }
        }
        
    }
    
    // Record some event given the event name (as evt) and some optional properties
    function track(evt, props, postponeSending, callback) {
        var pl = { evt: evt, properties: props || {}, now: (new Date()).getTime() };
        addToPending(pl);
        if (navigator && navigator.sendBeacon) { postponeSending = false; }
        if (postponeSending) {
            if (callback) callback();
            window.setTimeout(sendPending, 10000);
        }
        else {
            sendPending(callback);
        }
    }
    
    function addState(e)
    {
        if (e && StackExchange.options && StackExchange.options.user) {
            if (e.properties && !e.properties.user_type) e.properties.user_type = StackExchange.options.user.user_type;
            if (!e.ab && StackExchange.options.user.ab) e.ab = StackExchange.options.user.ab;
        }
    }
    
    // suck down anything from _gps_track (.track() calls before init()) into localStorage
    function slurpPreInit() {
        if (StackExchange._gps_track) {
            $.each(StackExchange._gps_track, function (i, e) { addToPending(e); });
            delete StackExchange._gps_track;
        }
    }

    function getPendingKey() {
        return "gps-pending" + getRoutePrefix();
    }

    function getPending() {
        var pendingKey = getPendingKey();
        var pending = localStorage[pendingKey];

        if (!pending) return [];

        return JSON.parse(pending);
    }

    function addToPending(obj) {
        addState(obj);

        var pendingKey = getPendingKey();
        var pending = localStorage[pendingKey],
            json;

        if (pending) {
            var arr = JSON.parse(pending);
            arr.push(obj);
            json = JSON.stringify(arr);
        }
        else {
            json = JSON.stringify([obj]);
        }
        
        log('addToPending ' + JSON.stringify(obj));
        localStorage[pendingKey] = json;
    }

    function removeFromPending(obj) {
        var pendingKey = getPendingKey();
        var pending = localStorage[pendingKey];

        if (!pending) return;

        var arr = JSON.parse(pending);
        var cur = JSON.stringify(obj);

        var ix = -1;
        for (var i = 0; i < arr.length; i++) {
            var other = JSON.stringify(arr[i]);

            if (cur == other) {
                ix = i;
                break;
            }
        }
        
        if (ix == -1) return;

        arr.splice(ix, 1);

        if (arr.length == 0) {
            localStorage.removeItem(pendingKey);
            return;
        }

        localStorage[pendingKey] = JSON.stringify(arr);
    }

    function send(obj, callback) {
        if (!$.isArray(obj)) {
            obj = [obj];
        }
        
        // filter out anything that's still "in flight"
        for (var i = 0; i < obj.length; i++) {
            var mark = JSON.stringify(obj[i]);
            if(inFlight[mark])
            {
                obj.splice(i, 1);
                i--;
            }
        }

        // now we're sending these, so mark them as "in flight"
        for (var i = 0; i < obj.length; i++) {
            var mark = JSON.stringify(obj[i]);
            inFlight[mark] = true;
        }

        var data = JSON.stringify(obj);
        
        if (navigator && navigator.sendBeacon)
        {
            try {
                log('sending (beacon): ' + data);
                // Current.Site.urlRelative
                var url = getRoutePrefix() + '/gps/event';
                if (navigator && navigator.sendBeacon(url, data)) {
                    for (var i = 0; i < obj.length; i++) {
                        removeFromPending(obj[i]);
                        var mark = JSON.stringify(obj[i]);
                        delete inFlight[mark];
                    }
                    if (callback) callback();

                    return;
                }
            } catch (err) { log(err); }
        }
        log('sending (AJAX): ' + data);
        $.ajax({
            type: 'POST',
            url: '/gps/event',
            data: { data: data },
            success: function (data, status, xhr) {
                for (var i = 0; i < obj.length; i++) {
                    removeFromPending(obj[i]);
                }
            },
            complete: function () {
                for (var i = 0; i < obj.length; i++) {
                    var mark = JSON.stringify(obj[i]);
                    delete inFlight[mark];
                }

                if (callback) callback();
            }
        });
    }
    
    function log(message) { 
        if (!((StackExchange.options && StackExchange.options.enableLogging) || $.cookie('devlog')) || typeof message !== "string") return;

        // can take optional arguments for string formatting
        if (arguments.length > 1) {
            var args = Array.prototype.slice.call(arguments, 1);
            message = String.prototype.formatUnicorn.apply(message, args);
        }
        
        console.log('gps: ' + message);
    }

    return {
        inited: false,
        init: init,
        bindTrackClicks: bindTrackClicks,
        track: preInitTrack,
        sendPending: preInitSendPending,
        trackOutboundClicks: trackOutboundClicks
    };
}());


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/21_OpenID.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/21_OpenID.js ***!
  \****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// Finally, replacing our crazy 3rd party openid

StackExchange.openid = (function () {
    "use strict";

    var gpsLoc = "unknown";

    function gpsLocation(parent, value)
    {
        if (parent) 
        {
            // if a value is supplied: assign
            if (value) $(parent).data('ssrc', value);
            return $(parent).data('ssrc');
        }
        // fallback return
        return gpsLoc;
    }
    function track(name, parent) {
        var ssrc = gpsLocation(parent);
        if (name) {
            StackExchange.gps.track("openid.click", { openid_provider: name, location: ssrc }, /*postponeSending=*/ true);
            StackExchange.gps.track("signup.openid.click", { openid_provider: name, location: ssrc }, /*postponeSending=*/ true);
        }
        StackExchange.gps.track("signup.start", { openid_provider: name, location: ssrc, tid: StackExchange.options.user.tid }, /*postponeSending=*/ true);
    }
    
    function initPostLogin(formSelector, rU, explicitLocation) {
        var returnUrl = decodeURIComponent(rU);
        var loc = 'unknown';
        if (explicitLocation && explicitLocation.length) {
            loc = explicitLocation;
        }
        else {
            if (returnUrl.indexOf("/questions/") === 0)
                loc = "question_page";

            if (returnUrl === "/questions/ask")
                loc = "question_ask";
        }
        var form = $(formSelector);
        gpsLocation(form, loc);
        form.removeClass('dno');

        var google = form.find('.google-login');
        google.click(function () {
            track("Google", form);
            googleChosen(form);
        });
        
        var facebook = form.find('.facebook-login');
        facebook.click(function () { track("Facebook", form); facebookChosen(form); });

        var github = form.find('.github-login');
        github.click(function () { track("GitHub", form); githubChosen(form); });

        var se = form.find('.stackexchange-login');
        se.click(draftSaveAnd(function () {
            track("Stack Exchange", form);
            StackExchange.navPrevention.stop();
            window.location = "/users/signup?ssrc=" + encodeURIComponent(loc) + "&returnUrl=" + encodeURIComponent(returnUrl);
        }));
        
        form.find('.js-submit-openid').click(function () {
            doRegister(form, returnUrl);
        });
    }

    var controllersBound = false;
    function bindControllers() {
        if (controllersBound) { return; }
        controllersBound = true;

        Stacks.addController('signup-modal', {
            targets: ['form', 'oauthVersion', 'oauthServer'],

            connect: function () {
                var $scope = $(this.element);
                StackExchange.gps.bindTrackClicks($scope);
                StackExchange.ga.bindHandlers($scope);
            },

            /**
             * Updates the login form to use the current 
             * @param {any} event A button click event
             */
            signUp: function (event) {
                event.preventDefault();
                this.oauthServerTarget.value = event.currentTarget.getAttribute('data-oauthserver');
                this.oauthVersionTarget.value = event.currentTarget.getAttribute('data-oauthversion') || '2.0';
                draftSaveAnd(function () {
                    this.formTarget.submit();
                }.bind(this))();
            },

            /**
             * Prevent navigation to the link until the draft is saved.
             * @param {any} event A link click event
             */
            linkClick: function (event) {
                event.preventDefault();
                var location = event.currentTarget.href;
                draftSaveAnd(function () {
                    StackExchange.navPrevention.stop();
                    window.location = location;
                })();
            }
        });
    }

    function showLoginModal() {
        bindControllers();
        return StackExchange.helpers.showModal.apply(StackExchange.helpers, arguments);
    }

    function facebookChosen(form) {
        form.find('.ssrc').val(gpsLocation(form));
        form.find('.use-facebook').val('true');
        form.find('.use-google').val('');
        form.find('.use-github').val('');
        form.find('.js-submit-openid').click();
    }

    function googleChosen(form) {
        form.find('.ssrc').val(gpsLocation(form));
        form.find('.use-google').val('true');
        form.find('.use-facebook').val('');
        form.find('.use-github').val('');
        form.find('.js-submit-openid').click();
    }

    function githubChosen(form) {
        form.find('.ssrc').val(gpsLocation(form));
        form.find('.use-google').val('');
        form.find('.use-facebook').val('');
        form.find('.use-github').val('true');
        form.find('.js-submit-openid').click();
    }
    
    // Note: this doesn't *do* anything by itself; you still have to *call* the result
    function draftSaveAnd(func) {
        return function () {
            // We have to demand this, in case someone tries to login before focusing the editor
            StackExchange.using('editor', function () { StackExchange.cardiologist.ensureDraftSaved(func); });
        }
    }

    function doRegister($container, returnUrl) {
        var useFacebook = $container.find('.use-facebook').val();
        var useGoogle = $container.find('.use-google').val();
        var useGitHub = $container.find('.use-github').val();
        
        draftSaveAnd(function () {

            var isChildMeta = !!StackExchange.options.site.isChildMeta;
            var formAction = (isChildMeta ? StackExchange.options.site.parentUrl : '') + '/users/signup?returnurl=' + encodeURIComponent(returnUrl);

            var $form = $('<form method="post" action="' + formAction + '"></form>');

            var oauthVersion = $('<input type="hidden" name="oauth_version" />');
            var oauthServer = $('<input type="hidden" name="oauth_server" />');

            $form.append(oauthVersion);
            $form.append(oauthServer);

            oauthVersion.val('2.0');

            if (useFacebook) {
                oauthServer.val('https://www.facebook.com/v2.0/dialog/oauth');
            }
            else if (useGoogle) {
                oauthServer.val('https://accounts.google.com/o/oauth2/auth');
            } else if (useGitHub) {
                oauthServer.val('https://github.com/login/oauth/authorize');
            }

            $form.append("<input type='hidden' name='fkey' value='" + StackExchange.options.user.fkey + "' />");
            $('<input type="hidden" name="ssrc" />').val(gpsLocation($container)).appendTo($form);

            StackExchange.navPrevention.stop();

            $form.hide().appendTo("body").submit();
        })();
    }

    return {
        initPostLogin: initPostLogin,
        showLoginModal: showLoginModal
    };
}());


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/22_UniversalAuth.js":
/*!***********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/22_UniversalAuth.js ***!
  \***********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// The javascript bits of Universal Auth
window.UniversalAuth = function () {
    // Because of races around joining a Team, a universl auth session can be interrupted
    //   by the user now needing to delegate their session creation to the CFZ
    // 
    // The server will notice and indicate this with a special pixel response
    //   at which point the script should re-run from the start (making a new request, 
    //   etc.).
    //
    // This controls the maximum number of times, for a single page load, we will try and
    //   restart universal auth.  In theory, 1 is sufficient for all purposes... but we'll
    //   see.
    var RETRIES_REMAINING = 1;

    var CHECK_REDIRECT_EVERY_MS = 200;
    var MAYBE_FAIL_AFTER_MS = 10000;
    var ABANDON_AFTER_MS = MAYBE_FAIL_AFTER_MS * 5;

    // is updated to TRUE once every pixel we pulled has loaded and we have no re-auth requests
    //   in flight
    var COMPLETED = false;

    return {
        // redirects this page to the given url once universal auth has done it's bit
        //
        // will invoke the given callback if an "unusual" amount of time has passed w/o
        //   universal auth completing
        redirectOnCompletion: function (redirectTo, maybeFailingCallback) {
            if (COMPLETED) {
                window.location.replace(redirectTo);        // replace instead of = or assign() to keep page out of the user's history
                return;
            }

            var handle;
            var elapsedTime = 0;
            var callback = function () {
                if (COMPLETED) {
                    window.location.replace(redirectTo);    // replace instead of = or assign() to keep page out of the user's history

                    clearInterval(handle);
                    return;
                }

                var hasntTriggered = elapsedTime < MAYBE_FAIL_AFTER_MS;
                var hasntBeenAbandoned = elapsedTime < ABANDON_AFTER_MS;

                elapsedTime += CHECK_REDIRECT_EVERY_MS;

                var shouldHaveTriggered = elapsedTime >= MAYBE_FAIL_AFTER_MS;
                var shouldHaveBeenAbandoned = elapsedTime >= ABANDON_AFTER_MS;

                // we cross the line into "we might be failing"-here
                var needsTrigger = hasntTriggered && shouldHaveTriggered;
                if (needsTrigger && maybeFailingCallback) {
                    maybeFailingCallback();
                }

                // ok, just give up
                var needsAbandon = hasntBeenAbandoned && shouldHaveBeenAbandoned;
                if (needsAbandon) {
                    clearInterval(handle);
                }
            };

            handle = setInterval(callback, CHECK_REDIRECT_EVERY_MS);
        },

        performAuth: function () {
            if (!UniversalAuth.enabled()) return;

            var icLoggedOut = $.cookie('clear-ic');
            if (icLoggedOut) {
                $(document).ready(function () {
                    if (StackExchange.settings.intercom.enableJavascriptImplementationFor !== true) {
                        var $img = $('<img/>').attr({
                            style: 'display:none',
                            src: StackExchange.settings.intercom.hostBaseUrl + '/intercom/logout.gif?appId=' + StackExchange.settings.intercom.appId,
                            'crossOrigin': 'use-credentials'  // needed for CORS
                        });

                        $('#footer').append($img);
                    }
                    // remove this cookie            
                    $.cookie('clear-ic', null, { path: '/' });
                });
            }

            var hasAuthed = $.cookie('uauth');
            if (hasAuthed === null) return;

            $.post(
                '/users/login/universal/request',
                function (data, text, req) {
                    var pixels = [];

                    var checkCompleted = function () {
                        var reauthRequested = $.cookie('uauth') !== null;
                        if (reauthRequested) return;

                        if (pixels) {
                            for (var i = 0; i < pixels.length; i++) {
                                var $img = pixels[i];
                                var img = $img[0];
                                if (!img.complete) {         // technically IE doesn't handle this attribute correctly, but a) to hell with IE and b) we timeout when dealing with COMPLETE anyway, so it's fine
                                    return;
                                }
                            }

                            COMPLETED = true;
                        }
                    };

                    if (data.length == 0) {
                        // we don't need to log in to places
                        COMPLETED = true;
                    }

                    $.each(data, function (arrayId, group) {
                        var url = '//' + group.Host + '/users/login/universal.gif?authToken=' + encodeURIComponent(group.Token) + '&nonce=' + encodeURIComponent(group.Nonce);
                        $(document).ready(function () {
                            var $img = $('<img/>').attr({
                                style: 'display:none',
                                src: url,
                                'crossOrigin': 'use-credentials'  // needed for CORS
                            });

                            pixels.push($img);

                            $img.one('load', function () {
                                var w = $img[0].width;
                                var h = $img[0].height;

                                // signals that we should retry
                                if (w === 2 && h === 2 && RETRIES_REMAINING > 0) {
                                    RETRIES_REMAINING--;

                                    var existingCookie = $.cookie('uauth');

                                    // if we've already requested a retry, don't re-reset the cookie
                                    if (!existingCookie) {
                                        var now = new Date();
                                        var expiration = new Date(now.getTime() + 5 * 60 * 1000);
                                        $.cookie('uauth', 'true', { path: '/', domain: document.domain, expires: expiration });
                                        pixels = null;
                                        setTimeout(
                                            function () { UniversalAuth.performAuth(); },
                                            10
                                        );
                                    }
                                }

                                checkCompleted();
                            });

                            $('#footer').append($img);
                        });
                    });
                },
                'json');

            // remove this cookie            
            $.cookie('uauth', null, { path: '/', domain: document.domain });
        },

        enabled: function () {
            return true;
        }
    };
}();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/33_AnonFkeyCookie.js":
/*!************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/33_AnonFkeyCookie.js ***!
  \************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.ready(function () {
    if (!StackExchange.options.user.isAnonymous)
        return;
    
    var hasFkey = /\bfkey=/i;
    
    $(document).ajaxSend(function (evt, jqxhr, options) {
        if (options.type.toLowerCase() !== "post")
            return;
        if (hasFkey.test(options.url) || hasFkey.test(options.data)) {
            addFkeyCookie();
        }
    });
    
    $(document).on("submit", "form", function (evt) {
        var jthis = $(this);
        if ((jthis.attr("method") || "").toLowerCase() !== "post")
            return;
        if (jthis.find("input[name='fkey']").length)
            addFkeyCookie();
    });

    function addFkeyCookie() {
        try {
            $.cookie("fkey", StackExchange.options.user.fkey, { path: "/", expires: 1 / (24 * 6) /* ten minutes */ });
        } catch (ex) { }
    }
});


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/34_jqueryUiLoader.js":
/*!************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/34_jqueryUiLoader.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// loads jquery ui, its css, and any needed i18n files - returns a promise that will be resolved when jquery-ui is available
//
// e.g. StackExchange.loadJqueryUi().done(function() { console.log($.ui); });
StackExchange.loadJqueryUi = function () {
    // Can this be done with StackExchange.using?

    var cssLink = StackExchange.settings.paths.jQueryUICSSPath;
    var jsLink = StackExchange.settings.paths.jQueryUIJSPath;

    if ($.ui) return $.Deferred().resolve();

    // this doesn't matter when it completes; styling should still happen
    $('<link>').attr({
        href: cssLink,
        rel: 'stylesheet',
        type: 'text/css',
        media: 'all'
    }).appendTo('head');

    var result = $.Deferred(),
        locale = StackExchange.options.locale,
        datepickerLanguageGetter,
        datepickerLanguageScript;

    // jquery will append cache breakers when getting scripts; prevent this
    $.ajaxSetup({ cache: true });

    if (locale !== 'en') {
        datepickerLanguageGetter = $.ajax({
            url: '/Content/Js/third-party/jquery-ui/datepicker-' + locale + '.js',
            dataType: 'text',
            type: 'GET'
        }).done(function(js) {
            datepickerLanguageScript = js;
        });
    }

    // allows both scripts to be simultaneously fetched, but we do have to use eval
    $.when(
        datepickerLanguageGetter || $.Deferred().resolve(),
        $.getScript(jsLink))
    .done(function() {
        // in order for this language script to work, jquery-ui *must* have been loaded already
        eval(datepickerLanguageScript);
        result.resolve();
    });

    $.ajaxSetup({ cache: false });
    
    return result.promise();
};

/**
 * Should be called after we load jQuery UI, especially if using the above promise.
 * 
 * https://github.com/RWAP/jquery-ui-touch-punch
 * 
 * From https://raw.githubusercontent.com/RWAP/jquery-ui-touch-punch/master/jquery.ui.touch-punch.js
 */
StackExchange.patchJqueryUiForTouch = function() {
    
/*!
 * jQuery UI Touch Punch 1.0.7 as modified by RWAP Software
 * based on original touchpunch v0.2.3 which has not been updated since 2014
 *
 * Updates by RWAP Software to take account of various suggested changes on the original code issues
 *
 * Original: https://github.com/furf/jquery-ui-touch-punch
 * Copyright 2011â2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Fork: https://github.com/RWAP/jquery-ui-touch-punch
 *
 * Depends:
 * jquery.ui.widget.js
 * jquery.ui.mouse.js
 */

    (function( factory ) {
        if ( true ) {

            // AMD. Register as an anonymous module.
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! jquery.ui */ "jquery") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
    }(function ($) {

        // Detect touch support
        $.support.touch = ( 'ontouchstart' in document
            || 'ontouchstart' in window
            || window.TouchEvent
            || (window.DocumentTouch && document instanceof DocumentTouch)
            || navigator.maxTouchPoints > 0
            || navigator.msMaxTouchPoints > 0
        );

        // Ignore browsers without touch or mouse support
        if (!$.support.touch || !$.ui.mouse) {
            return;
        }

        var mouseProto = $.ui.mouse.prototype,
            _mouseInit = mouseProto._mouseInit,
            _mouseDestroy = mouseProto._mouseDestroy,
            touchHandled;

        /**
         * Get the x,y position of a touch event
         * @param {Object} event A touch event
         */
        function getTouchCoords (event) {
            return {
                x: event.originalEvent.changedTouches[0].pageX,
                y: event.originalEvent.changedTouches[0].pageY
            };
        }

        /**
         * Simulate a mouse event based on a corresponding touch event
         * @param {Object} event A touch event
         * @param {String} simulatedType The corresponding mouse event
         */
        function simulateMouseEvent (event, simulatedType) {

            // Ignore multi-touch events
            if (event.originalEvent.touches.length > 1) {
                return;
            }

            // Prevent "Ignored attempt to cancel a touchmove event with cancelable=false" errors
            if (event.cancelable) {
                event.preventDefault();
            }

            var touch = event.originalEvent.changedTouches[0],
                simulatedEvent = document.createEvent('MouseEvents');

            // Initialize the simulated mouse event using the touch event's coordinates
            simulatedEvent.initMouseEvent(
                simulatedType,    // type
                true,             // bubbles
                true,             // cancelable
                window,           // view
                1,                // detail
                touch.screenX,    // screenX
                touch.screenY,    // screenY
                touch.clientX,    // clientX
                touch.clientY,    // clientY
                false,            // ctrlKey
                false,            // altKey
                false,            // shiftKey
                false,            // metaKey
                0,                // button
                null              // relatedTarget
            );

            // Dispatch the simulated event to the target element
            event.target.dispatchEvent(simulatedEvent);
        }

        /**
         * Handle the jQuery UI widget's touchstart events
         * @param {Object} event The widget element's touchstart event
         */
        mouseProto._touchStart = function (event) {

            var self = this;

            // Interaction time
            this._startedMove = event.timeStamp;

            // Track movement to determine if interaction was a click
            self._startPos = getTouchCoords(event);

            // Ignore the event if another widget is already being handled
            if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
                return;
            }

            // Set the flag to prevent other widgets from inheriting the touch event
            touchHandled = true;

            // Track movement to determine if interaction was a click
            self._touchMoved = false;

            // Simulate the mouseover event
            simulateMouseEvent(event, 'mouseover');

            // Simulate the mousemove event
            simulateMouseEvent(event, 'mousemove');

            // Simulate the mousedown event
            simulateMouseEvent(event, 'mousedown');
        };

        /**
         * Handle the jQuery UI widget's touchmove events
         * @param {Object} event The document's touchmove event
         */
        mouseProto._touchMove = function (event) {

            // Ignore event if not handled
            if (!touchHandled) {
                return;
            }

            // Interaction was moved
            this._touchMoved = true;

            // Simulate the mousemove event
            simulateMouseEvent(event, 'mousemove');
        };

        /**
         * Handle the jQuery UI widget's touchend events
         * @param {Object} event The document's touchend event
         */
        mouseProto._touchEnd = function (event) {

            // Ignore event if not handled
            if (!touchHandled) {
                return;
            }

            // Simulate the mouseup event
            simulateMouseEvent(event, 'mouseup');

            // Simulate the mouseout event
            simulateMouseEvent(event, 'mouseout');

            // If the touch interaction did not move, it should trigger a click
            // Check for this in two ways - length of time of simulation and distance moved
            // Allow for Apple Stylus to be used also
            var timeMoving = event.timeStamp - this._startedMove;
            if (!this._touchMoved || timeMoving < 500) {
                // Simulate the click event
                simulateMouseEvent(event, 'click');
            } else {
                var endPos = getTouchCoords(event);
                if ((Math.abs(endPos.x - this._startPos.x) < 10) && (Math.abs(endPos.y - this._startPos.y) < 10)) {

                    // If the touch interaction did not move, it should trigger a click
                    if (!this._touchMoved || event.originalEvent.changedTouches[0].touchType === 'stylus') {
                        // Simulate the click event
                        simulateMouseEvent(event, 'click');
                    }
                }
            }

            // Unset the flag to determine the touch movement stopped
            this._touchMoved = false;

            // Unset the flag to allow other widgets to inherit the touch event
            touchHandled = false;
        };

        /**
         * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
         * This method extends the widget with bound touch event handlers that
         * translate touch events to mouse events and pass them to the widget's
         * original mouse event handling methods.
         */
        mouseProto._mouseInit = function () {

            var self = this;

            // Delegate the touch handlers to the widget's element
            self.element.on({
                touchstart: $.proxy(self, '_touchStart'),
                touchmove: $.proxy(self, '_touchMove'),
                touchend: $.proxy(self, '_touchEnd')
            });

            // Call the original $.ui.mouse init method
            _mouseInit.call(self);
        };

        /**
         * Remove the touch event handlers
         */
        mouseProto._mouseDestroy = function () {

            var self = this;

            // Delegate the touch handlers to the widget's element
            self.element.off({
                touchstart: $.proxy(self, '_touchStart'),
                touchmove: $.proxy(self, '_touchMove'),
                touchend: $.proxy(self, '_touchEnd')
            });

            // Call the original $.ui.mouse destroy method
            _mouseDestroy.call(self);
        };

    }));
};


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/36_FlashMessage.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/36_FlashMessage.js ***!
  \**********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


/**
 * Flash messages are shown only once:
 * they are displayed then immediately deleted.
 */
StackExchange.showFlashMessageIfAny = function() {
    var cookieName = 'flash-message-json';
    var urlEncodedJson = $.cookie(cookieName);
    if (!urlEncodedJson)
        return;

    try {
        $.cookie(cookieName, null, { path: '/', domain: document.domain }); // expire

        // https://stackoverflow.com/questions/1969232/allowed-characters-in-cookies
        // replace the + first, as decode won't convert to spaces and there could be actual + in the message (as %3a)
        var flashJson = decodeURIComponent(urlEncodedJson.replace(/[+]/g, ' '));
        var flash = JSON.parse(flashJson);

        if (StackExchange.options.enableLogging) {
            console.log('flash message: showing ' + flashJson);
        }

        switch (flash.position) {
            case 'toast':
                StackExchange.helpers.showToast(flash.message, {
                    type: flash.type,
                    transient: flash.transient,
                    transientTimeout: flash.transientTimeout,
                    useRawHtml: flash.useRawHtml
                });
                break;

            case 'notice':
                StackExchange.helpers.showStacksNotice(flash.message, flash.type);
                break;

            default:
                StackExchange.helpers.showBannerMessage(flash.message, flash.type);
                break;
        }

    } catch(e) { }
}



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/37_PrepareEditor.js":
/*!***********************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/37_PrepareEditor.js ***!
  \***********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// options:
// - useStacksEditor (use Stacks-Editor over wmd)
// - heartbeatType (for editor.init)
// - autoActivateHeartbeat (for editor.init)
// - bindNavPrevention (for editor.init)
// - mutateConverter (a function that gets a chance to modify the markdown converter before it's put into use; must return a valid converter)
// - onDemand (if the editor JS isn't available yet, wait until textbox focus before loading it)
// - autoShowMarkdownHelp (for editor.init -- automatically shows the Markdown help (duh) when the editor is focused)
// - postfix -- appended to the HTML element ids, to support multiple editors
// - convertImagesToLinks -- if an image is uploaded, convert it to a link and popup an informative messages to inform the user what happened
// - reputationToPostImages -- if convertImagesToLinks is true, this is the amount of rep a user needs to *not* have their images converted to links
// - resize - if false, do not configure TextAreaResizer
// - onDraftDiscarded (for editor.init)
// - onCreated - callback to execute after the editor is created
// - oneboxEnabled - enables post/onebox dynamic rendering in preview
// - enableTables - enables markdown table support
// - enableSnippets - enables stack snippets support (stacks-editor only)
// - defaultView - Preference.StacksEditorPreferredEditMode (stacks-editor only)
StackExchange.prepareEditor = (function () {
    /**
     * Initializes the editor immediately; can init "wmd" vs "stacks-editor" based on the passed options
     */
    var initEditorImmediately = function (options) {
        // do this asynchronously, because with inline editing, prepareEditor is called
        // when the code comes back from the server but before everything is available
        // (in particular: visible); this is relied upon in a few places.
        setTimeout(function () {
            var editor = options.useStacksEditor ? "stacksEditor" : "editor";
            if(!options.useStacksEditor) {
                // pre-hookup spoiler events so we don't have to wait until the `styleCode` call on first preview render
                styleCode.initializeSpoilers();
            }
            StackExchange[editor].initIfShown(options);
        }, 1);
    };

    /**
     * Sets up the editor onDemand functionality where the editor isn't loaded until the user interacts with a related input
     * @param {any} callback The function to call when any of the delayed load inputs are interacted with
     */
    var setupInitEditorOnDemand = function (callback) {
        var loadingStarted = false; // even though we bind via .one(), this can be called more often than once (because, e.g., the click also causes a focus event)
        $("#wmd-input, #title, #tagnames, #edit-comment, #m-address, #display-name, .js-fake-stacks-editor").one("focus click keydown", function () {
            if (loadingStarted)
                return;
            loadingStarted = true;

            callback();
        });
    };

    /**
     * Prepares the wmd editor for initialization
     */
    var prepareWmdEditor = function (options) {
        var postfix = options.postfix || "";

        // create a row of disabled buttons; this will be removed before the real editor creates its own buttons
        var buttons = "bold-button italic-button spacer1 link-button quote-button code-button image-button spacer2 olist-button ulist-button heading-button hr-button spacer3 undo-button redo-button"
            .split(" ");
        var row = $("<ul id=\"wmd-button-row" + postfix + "\" class=\"wmd-button-row\" />").appendTo(".wmd-button-bar");
        var spriteX = 0;
        for (var i = 0; i < buttons.length; i++) {
            var b = buttons[i];
            var isSpacer = /spacer/.test(b);
            var button = $("<li id='wmd-" + b + postfix + "' />").prop("className", "wmd-" + (isSpacer ? "spacer" : "button")).css("left", i * 25).appendTo(row);
            $("<span />").css("background-position", (spriteX) + "px -20px").appendTo(button);
            if (!isSpacer)
                spriteX -= 20;
        }

        // Max Spacer: not a 1980s crime-drama antihero
        // in the real button bar, this forces the help button right while keeping the rest of the buttons left.
        // here, it just ensures that the buttons don't start out right-aligned and jump left when loading
        var maxSpacer = document.createElement("li");
        maxSpacer.className = "wmd-spacer wmd-spacer-max";
        row.append(maxSpacer);

        setupInitEditorOnDemand(function () {
            row.addSpinner({ "float": "right" });
            StackExchange.using("editor", function () {
                row.remove(); // also removes spinner

                if (options.autoShowMarkdownHelp)
                    options.immediatelyShowMarkdownHelp = true;

                initEditorImmediately(options);
            });
        });
    };

    // wrapper function to init either the stacks-editor or the wmd editor based on the passed options
    return function (options) {
        // if we're not init'ing "onDemand" (e.g. on input focus), just init the editor immediately
        if (!options.onDemand) {
            if (options.useStacksEditor) {
                $.when(StackExchange.using("highlightjs", $.noop), StackExchange.using("stacksEditor", $.noop))
                    .then(function () { initEditorImmediately(options); });
            }
            else {
                StackExchange.using("editor", function () { initEditorImmediately(options); });
            }

            return;
        }

        if (options.useStacksEditor) {
            setupInitEditorOnDemand(function () {
                $.when(StackExchange.using("highlightjs", $.noop), StackExchange.using("stacksEditor", $.noop))
                    .then(function () { initEditorImmediately(options); });
            });
        }
        else {
            prepareWmdEditor(options);
        }
    };
}());



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/39_Auth.js":
/*!**************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/39_Auth.js ***!
  \**************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


/* 39_Auth.js

This partial contains all the shared JavaScript methods and helpers used in authentication on the client side.
Authentication in this context includes login, signup, password changing, and provider management across anonymous
and logged in users. Many of the methods contained here are shared between mostly `auth.js` and `full-anon-only/00_InlineAuth.js`.

auth.js is the original client-side code where all the authentication methods live. Methods that are shared between
other files and auth.js have been moved here to de-duplicate code and make maintenance easier.

*/

StackExchange.Auth = (function () {

    var addOrUpdateError = function (errorArray, validationError) {
        var found = false;
        for (var i = 0; i < errorArray.length; i++) {
            if (errorArray[i].id == validationError.id) {
                validationError.changed = errorArray[i].message == validationError.message;
                errorArray[i].message = validationError.message;
                found = true;
                break;
            }
        }

        if (!found) {
            validationError.changed = true;
            if (validationError.index >= errorArray.length) {
                errorArray.push(validationError);
            } else {
                errorArray.splice(validationError.index, 0, validationError);
            }
        }
    };

    var passwordStrengthValidation = function ($password, errorArray, removeError) {
        var estimatedMinimumLengthForGoodEntropy = 15,
            minPasswordLength = 8;

        var pw = $password.val(),
            hasLower = /[a-z]/.test(pw),
            hasUpper = /[A-Z]/.test(pw),
            hasDigit = /\d/.test(pw),
            hasNonWord = /(_|[^\w\d])/.test(pw),
            charClassCount = 0;

        if (hasLower) charClassCount++;
        if (hasUpper) charClassCount++;
        if (hasDigit) charClassCount++;
        if (hasNonWord) charClassCount++;

        if (charClassCount === 2 && pw.length >= estimatedMinimumLengthForGoodEntropy) {
            removeError(errorArray, 'pw-weak', $password);
            removeError(errorArray, 'pw-short', $password);
            return;
        }

        var charClassErrors = $('<span><p>' + __tr(["Please add one of the following things to make your password stronger:$pEnd$ $listStart$ $char$ letters $itemEnd$ $num$ numbers $itemEnd$ $listEnd$"], {pEnd: '</p>',listStart: '<ul>',listEnd: '</ul>',itemEnd: '</li>',char: '<li id="ch">',num: '<li id="num">'}, "en", []) + '</span>');

        if ((hasLower || hasUpper) && hasDigit) {
            removeError(errorArray, 'pw-weak', $password);
        }
        else if (charClassCount < 3) {
            if (hasLower || hasUpper) {
                charClassErrors.find('#ch').remove();
            }
            if (hasDigit) {
                charClassErrors.find('#num').remove();
            }
            addOrUpdateError(errorArray, { id: 'pw-weak', index: 1, attachTo: $password, message: charClassErrors });
        } else {
            removeError(errorArray, 'pw-weak', $password);
        }

        var uniqueChars = $password.val().length;

        if (uniqueChars < minPasswordLength) {
            var remaining = minPasswordLength - uniqueChars;

            addOrUpdateError(errorArray, { id: 'pw-short', index: 2, attachTo: $password, message: __tr(["Must contain at least $remaining$ more character.","Must contain at least $remaining$ more characters."], {remaining: remaining}, "en", ["remaining"]) });
        } else {
            removeError(errorArray, 'pw-short', $password);
        }
    };

    return {
        addOrUpdateError: addOrUpdateError,
        passwordStrengthValidation: passwordStrengthValidation
    };
})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/40_Hero.js":
/*!**************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/40_Hero.js ***!
  \**************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.Hero = (function () {

    var hero = {
        name: null,
        version: null
    };

    var dismiss = function () {
        var heroKey = "hero-dismissed";

        // Matches AnonymousCookieModel
        var model = {
            ld: "",
            d: []
        };

        var cookie = $.cookie(heroKey);
        if (cookie) {
            var dismissed = cookie.split("!");
            dismissed.shift();
            model.d = dismissed;
        }
        model.ld = (new Date).getTime();

        var heroId = hero.name + "_" + hero.version;
        var newHero = true;

        // Check for previous version of the same hero, replace with new version if found
        for (var key in model.d) {
            if (model.d.hasOwnProperty(key)) {
                var id = model.d[key];
                var campaign = id.split("_");
                if (campaign === hero.name) {
                    model.d[key] = heroId;
                    newHero = false;
                    break;
                }
            }
        }

        // If no previous version of hero, add to array
        if (newHero) {
            model.d.push(heroId);
        } 

        $.cookie(heroKey, encodeModel(model), { path: '/', expires: 365 });
    }

    var encodeModel = function (model) {
        return [model.ld].concat(model.d).join("!");
    }

    var init = function(name, version) {
        hero.name = name;
        hero.version = version;
    }

    return {
        init: init,
        dismiss: dismiss,
    };
})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/41_Checklist.js":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/41_Checklist.js ***!
  \*******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


/*
Used to toggle completed requirements in checklists as well as dismiss checklists
Toggle states are stored in User.Preferences
Currently used in Channels (StackOverflow\Views\Channels\Onboarding\ChecklistSidebar.cshtml:102)

Requires:
    .js-checklist container class
    .js-requirement and .is-finished class on each requirement
    .js-toggle-completed-requirements link that has: 
        data-preference for the User.Preference enum to toggle
        data-url for post route 
        .is-visible or .is-hidden class to track the state
        ex: <a class="js-toggle-completed-requirements @(hideCompleted ? "is-hidden" : "is-visible")" data-preference="@pref" data-url="@url"> 
                @(hideCompleted ? @_s("Show all items") : @_s("Hide completed items"))</a>
*/

StackExchange.checklist = (function () {

    function toggleContent(url, preference, hideCompletedOrDismiss) {
        return $.post(url,
            {
                fkey: StackExchange.options.user.fkey,
                preference: preference,
                hideCompletedOrDismiss: hideCompletedOrDismiss
            });
    }

    $(document).on("click", ".js-toggle-completed-requirements", function (e) {
        var $this = $(e.target);
        var $container = $this.closest(".js-checklist");
        var hideCompleted = $this.hasClass('is-visible');
        var preference = $this.data("preference");
        var url = $this.data("url");

        toggleContent(url, preference, hideCompleted)
            .always(function() {
                $container.find('.js-requirement.is-finished').closest('li').toggleClass('dno');
                $this.toggleClass('is-visible is-hidden')
                    .text(hideCompleted ? __tr(["Show all items"], undefined, "en", []) : __tr(["Hide completed items"], undefined, "en", []));
            });
    });
})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/44_StacksValidation.js":
/*!**************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/44_StacksValidation.js ***!
  \**************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



// Call StackExchange.stacksValidation.handlerFor($input) to get a handler. Will return null if not available.
//
// Expects the following:
// - The input element is the only child of a positioned container (this is a Stacks requirement in order to correctly position the icon)
// - The input element has an ancestor of class js-stacks-validation
// - This ancestor has a descendant of class js-stacks-validation-message (which should be a Stacks .s-input-message, and also .d-none)
// - The js-stacks-validation-message element has an id attribute with a unique value (used to connect the validation message with the input field for accessibility purposes)
// Call handler.add("warning", "This password is <b>very insecure</b>."). Note that this EXPECTS HTML, BE SURE TO ENCODE THINGS. The first argument is the
// type, one of "success", "warning", or "error".
//
// Call handler.clear() to remove all validation messages or e.g. handler.clear("success") to only remove messages of a certain type.

StackExchange.stacksValidation = (function () {

    function handlerFor($input) {
        var result = $input.data("stacks-validation-handler");
        if (!result) {
            result = new Handler($input);
            $input.data("stacks-validation-handler", result);
        }
        return result.invalid ? null : result;
    }

    function Handler($input) {
        this.hideIcons = false;
        this.$input = $input;
        this.$container = $input.closest(".js-stacks-validation");
        if (!this.$container.length) {
            this.invalid = true;
            return;
        }
        this.$message = this.$container.find(".js-stacks-validation-message");
        this.messages = [];
    }

    function getHtml(msg) {
        return msg.html;
    }
    function getType(msg) {
        return msg.type;
    }

    Handler.prototype = {
        _updateMessages: function () {
            this.$message.empty().toggleClass("d-none", !this.messages.length);
            if (!this.messages.length) {
                return;
            }
            var html;
            if (this.messages.length === 1) {
                html = this.messages[0].html;
            } else {
                html = "<ul><li>" + this.messages.map(getHtml).join("</li><li class='mt8'>") + "</li></ul>";
            }
            this.$message.html(html).find('a').attr('target', '_blank');
        },
        _updateIcon: function () {
            this.$container.find(".js-stacks-validation-icon").remove();
            if (!this.messages.length || this.hideIcons)
                return;
            var type = this.highestType();
            Svg[ICONS[type]].With("s-input-icon js-stacks-validation-icon").insertAfter(this.$input);

        },
        _updateClass: function () {
            this.$container.removeClass("has-error has-warning has-success");
            if (!this.messages.length)
                return;
            this.$container.addClass("has-" + this.highestType());
        },
        _updateAriaAttributes: function () {
            // this.$input isn't necessarily a form field (e.g. when dealing with tagEditor or stacks-editor)
            // so let's make sure we find the right elements to slap aria attributes onto.
            // this approach is trying to be as defensive as possible and doesn't try to find inputs like selects, radio buttons,
            // or password fields. Ideally, we pass the correct <input> element to the stacks handler (as this.$input)
            // and don't have to search for other form-like elements. input[type='text'], textarea, and contenteditable
            // solve the exception for both, tag-editor and stacks-editor, explicitly.
            const additionalFormElements = this.$container.find("input[type='text'], textarea, [contenteditable='true']")
            const formFields = this.$input.add(additionalFormElements);

            formFields.removeAttr("aria-invalid");
            formFields.removeAttr("aria-describedby");
            if (!this.messages.length) {
                return;
            }

            formFields.attr("aria-invalid", true);
            
            const messageId = this.$message.attr("id");
            if (messageId) {
                formFields.attr("aria-describedby", messageId);
            }
        },
        _update: function () {
            this._updateMessages();
            this._updateIcon();
            this._updateClass();
            this._updateAriaAttributes();
        },
        highestType: function() {
            return this.messages.map(getType).reduce(function (a, b) {
                if (a === "error" || b === "error") {
                    return "error";
                }
                if (a === "warning" || b === "warning") {
                    return "warning";
                }
                return "success";
            });
        },
        hasType: function(type) {
            return this.messages.some(function (msg) { return msg.type === type });
        },
        add: function(type, html) {
            if (this.messages.some(function (msg) { return msg.type === type && msg.html === html})) {
                return;
            }
            this.messages.push({type: type, html: html});
            this._update();
        },
        addText: function (type, text) {
            this.add(type, $('<span>').text(text).html());
        },
        clear: function(type) {
            if (type) {
                this.messages = this.messages.filter(function (m) { return m.type !== type });
            } else {
                this.messages = [];
            }
            this._update();
        }
    };

    // FIXME: We need some way to get the @Svg icons into JS without breaking single-source-of-truth like this
    var ICONS = {
        error: 'AlertCircle',
        warning: 'Alert',
        success: 'Checkmark'
    };

    return {
        handlerFor: handlerFor
    };
})();



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/controllers/se-char-counter.js":
/*!**********************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/controllers/se-char-counter.js ***!
  \**********************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


(function () {
    Stacks.addController('se-char-counter', {
        targets: ['field', 'output'],

        connect: function () {
            $(this.fieldTarget).charCounter({
                min: +(this.data.get('min') || '0'),
                max: +(this.data.get('max') || '0'),
                target: $(this.outputTarget),
                setIsValid: this.setIsValid.bind(this)
            });
        },

        setIsValid: function (value) {
            var attr = 'data-is-valid-length';
            var $field = $(this.fieldTarget);

            if (this.data.get('allow-empty') === 'true' && !$field.val()) {
                value = true;
            }

            var strValue = value.toString();
            if ($field.attr(attr) !== strValue) {
                $field.attr(attr, strValue);
                this.triggerEvent('validated');
            }
        }
    });
})();



/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/controllers/se-draggable.js":
/*!*******************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/controllers/se-draggable.js ***!
  \*******************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


(function () {

    var draggingPopup;
    var draggingOffset;
    var draggingDocumentHooked;
    var stopDragging = function () {
        draggingPopup = draggingOffset = null;
        $('body').removeClass('c-move');
    };

    Stacks.addController("se-draggable", {

        targets: ["handle"],

        connect: function () {
            if (!this.hasHandleTarget) {
                return;
            }

            var $e = $(this.element);
            var handle = $(this.handleTarget);

            // TODO: eventually, fingers crossed, we'll only have Stacks-style modals
            // that will have .c-move specified on the handles in the markup
            if(!handle.hasClass('c-move'))
                handle.addClass('c-move');

            handle
                .unbind('mousedown')
                .bind(
                    'mousedown',
                    function (evt) {
                        $e.css({ minWidth: $e.outerWidth() });

                        var eOffset = $e.offset();

                        draggingOffset = {
                            x: eOffset.left - evt.pageX,
                            y: eOffset.top - evt.pageY
                        };

                        draggingPopup = $e;

                        var def = draggingPopup.offset();

                        // for some reason, we get a jitter if we just do this once; so double down dog
                        draggingPopup.offset(def).offset(def);

                        $('body').addClass('c-move');

                        evt.preventDefault(); // prevent selection
                    }
                );

            if (!draggingDocumentHooked) {
                draggingDocumentHooked = true;

                $(document).on(
                    'mousemove',
                    function (e) {
                        if (draggingPopup) {
                            draggingPopup.removeClass("responsively-horizontally-centered-legacy-popup"); // if you can drag, you can handle it
                            var top = e.pageY + draggingOffset.y;
                            var left = e.pageX + draggingOffset.x;

                            draggingPopup.offset({
                                top: top,
                                left: left
                            });
                        }
                    }
                ).on(
                    'keypress',
                    stopDragging
                ).on(
                    'mouseup',
                    stopDragging
                );
            }

        }

    });

})();


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/controllers/se-share-sheet.js":
/*!*********************************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/controllers/se-share-sheet.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _13_Share_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../13_Share.mod */ "./_Scripts/LegacyJS/full-common/13_Share.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});




// USAGE: <a href="..." data-controller="se-share-sheet">Share</a>
// Optional attributes:
//     data-se-share-sheet-title:      A title to use for the dialog (e.g., "Share this question")
//     data-se-share-sheet-subtitle:   Unbolded text next to the title, used on question pages to indicate a user ID is in the URL.
//     data-se-share-sheet-post-type:  The type of post, or omitted, must be question, answer, or article for social links to appear.
//     data-se-share-sheet-social:     A list of social providers to show.  Accepts twitter and facebook.
//     data-se-share-sheet-location:   Number corresponding to a `share.show` location.
//     data-se-share-sheet-message:    The Message that the socials use for the link, must be provided for non question or answer post types
//
// Additionally, any properties from s-popover for customization, e.g. data-s-popover-placement="bottom-start".
// See https://stackoverflow.design/product/components/popovers#attributes
//
// Events:
//     se-share-sheet:update:  Before showing, the dialog will emit a `se-share-sheet:update` event and then update the contents
//                             of the popover. This provides an opportunity to update any of the properties used by the popover.
//
(function () {

    var _sheetIndex = 0;
    var _copying = false;

    function generateSheetId() {
        return 'se-share-sheet-' + (_sheetIndex++);
    }

    Stacks.addController('se-share-sheet', {

        get $el() { return $(this.element); },

        get controlId() {
            var id = this.$el.attr('aria-controls');
            if (!id) {
                id = generateSheetId();
                this.$el.attr('aria-controls', id);
            }
            return id;
        },

        get $sheet() {
            var id = this.controlId;
            var $sheet = $('#' + id);
            if ($sheet.length === 0) {
                $sheet = this.generateSheet(id);
                this.$el.after($sheet);
                if (StackExchange.gps && StackExchange.gps.bindTrackClicks) {
                    StackExchange.gps.bindTrackClicks($sheet);
                }
            }
            return $sheet;
        },

        get location() {
            return +this.data.get('location') || 0;
        },

        get copyLinkGpsTrackAction() {
            return this.data.get('gps-track-action') || '';
        },

        initialize: function () {

            var $el = this.$el;
            function addIfNeeded(attribute, text) {
                var value = $el.attr(attribute) || '';
                if (value.indexOf(text) === -1) {
                    $el.attr(attribute, value + ' ' + text);
                }
            }

            this.updateSheet(false);
            addIfNeeded('data-action', 's-popover#toggle');
            addIfNeeded('data-action', this.identifier + '#preventNavigation');
            addIfNeeded('data-action', 's-popover:show->' + this.identifier + '#willShow');
            addIfNeeded('data-action', 's-popover:shown->' + this.identifier + '#didShow');
            addIfNeeded('data-controller', 's-popover');
        },

        generateSheet: function (id) {
            var $sheet = $('<div class="s-popover z-dropdown s-anchors s-anchors__default" style="width: unset; max-width: 28em;"><div class="s-popover--arrow"></div></div>')
                .attr('id', id)
                .append('<div><label for="share-sheet-input-' + this.controlId + '"><span class="js-title fw-bold"></span> <span class="js-subtitle"></span></label></div>')
                .append('<div class="my8"><input type="text" id="share-sheet-input-' + this.controlId + '" class="js-input s-input wmn3 sm:wmn-initial bc-black-300 bg-white fc-black-600" readonly /></div>')
                .append('<div class="d-flex jc-space-between ai-center mbn4"><button class="js-copy-link-btn s-btn s-btn__link js-gps-track" data-gps-track="' + this.copyLinkGpsTrackAction + '"></button><a href="#" rel="license" class="js-license s-block-link w-auto d-none" target="_blank"></a><div class="js-social-container d-none"></div></div>')
                .insertAfter($(this.element));
            $sheet.find('.js-copy-link-btn').text(__tr(["Copy link"], undefined, "en", [])).click(this.copy.bind(this));
            $sheet.find('.js-input').on('copy', this.didCopy.bind(this));
            return $sheet;
        },

        willShow: function () {
            this.updateSheet(true);
        },

        didShow: function () {
            var $input = this.$sheet.find('.js-input');
            setTimeout(function () {
               $input.focus().select();
            });

            var location = this.location;
            if (location) {
                StackExchange.gps.track('share.show', {
                    location: location
                });
            }
        },

        copy: function () {
            var that = this;
            this.tryCopy().then(function () {
                StackExchange.helpers.showToast(__tr(["Link copied to clipboard."], undefined, "en", []), { transientTimeout: 3000, type: 'success' });
                that.didCopy();
            }, function () {
                StackExchange.helpers.showToast(__tr(["Could not copy link to clipboard."], undefined, "en", []), { transientTimeout: 5000, type: 'danger' });
            });
        },

        didCopy: function () {
            // Ignore copy events triggered by document.execCommand('copy').
            if (_copying) { return; }

            var location = this.location;
            if (location) {
                StackExchange.gps.track('share.click', {
                    location: location,
                    service: 6
                });
            }
        },

        // https://stackoverflow.com/a/30810322/860000
        tryCopy: function () {
            var $input = this.$sheet.find('.js-input');
            if (navigator.clipboard) {
                return navigator.clipboard.writeText($input.val());
            } else {
                $input.focus().select();

                var copied;

                _copying = true;
                try {
                    copied = document.execCommand('copy');
                } catch (_) {
                    copied = false;
                }
                _copying = false;

                var deferred = $.Deferred();

                if (copied) {
                    deferred.resolve();
                } else {
                    deferred.reject();
                }

                return deferred.promise();
            }
        },

        // TODO: This could go upstream to Stacks to also prevent toggling on meta navigation.
        preventNavigation: function (evt) {
            if (!evt.ctrlKey && !evt.metaKey) {
                evt.preventDefault();
            }
        },

        updateSheet: function (includeSocial) {
            this.triggerEvent('update');
            var $sheet = this.$sheet;
            $sheet.find('.js-title').text(this.data.get('title') || __tr(["Copy and share this link:"], undefined, "en", []));
            $sheet.find('.js-subtitle').text(this.data.get('subtitle') || '');
            $sheet.find('.js-input').val(this.element.href);

            var licenseUrl = this.data.get('license-url');
            var license = $sheet.find('.js-license').toggleClass('d-none', !licenseUrl);
            if (licenseUrl) {
                license.attr("href", decodeURIComponent(this.data.get('license-url')));
                var licenseName = this.data.get('license-name');
                license.text(licenseName);
                license.attr("title",
                    __tr(["The current license for this post: $licenseName$"], {licenseName: licenseName}, "en", []));
            }

            $sheet.find('.js-social-container').addClass('d-none').empty();

            var postType = this.data.get('post-type');

            var messageOverride = this.data.get('message');
            if (includeSocial && (postType === 'question' || postType === 'answer' || postType ===  'announcement' || postType === 'article' || postType === 'discussion')) {

                var socialComponents = (this.data.get('social') || '').split(/\s+/);

                if (socialComponents.indexOf('facebook') !== -1) {
                    this.addSocialComponent(postType, 'Facebook', Svg.Facebook.With('native'), __tr(["Share on Facebook"], undefined, "en", []), 2, _13_Share_mod__WEBPACK_IMPORTED_MODULE_0__.share.facebook, messageOverride);
                }

                if (socialComponents.indexOf('twitter') !== -1) {
                    this.addSocialComponent(postType, 'Twitter', Svg.Twitter.With('native'), __tr(["Share on Twitter"], undefined, "en", []), 3, _13_Share_mod__WEBPACK_IMPORTED_MODULE_0__.share.twitter, messageOverride);
                }

                if (socialComponents.indexOf('devto') !== -1) {
                    this.addSocialComponent(postType, 'DEV', Svg.DevTo.With('native'), __tr(["Share on DEV"], undefined, "en", []), 5, _13_Share_mod__WEBPACK_IMPORTED_MODULE_0__.share.devTo, messageOverride);
                }
            }
        },

        // This method assumes social components will only be shown on questions and answers or bulletins.
        addSocialComponent: function (postType, socialNetworkName, $image, ariaLabel, service, configure, messageOverride) {

            var title = __tr(["Share link to this $postType$ on $socialNetwork$"], {socialNetwork: socialNetworkName,postType: postType}, "en", [])

            var $button = $('<button>', {
                'class': 's-btn p4',
                'role': 'button',
                title: title,
                'aria-label': ariaLabel
            }).append($image);

            var message = '';
            switch (postType) {
                case 'question':
                    message = messageOverride ? messageOverride : $("#question-header a.question-hyperlink").text();
                    break;
                case 'answer':
                    message = messageOverride ? messageOverride : __tr(["Answer: $title$"], {title: $("#question-header a.question-hyperlink").text()}, "en", []);
                    break;
                case 'announcement':
                    message = messageOverride ? messageOverride : '';
                    break;
                case 'discussion':
                    message = messageOverride ? messageOverride : '';
                    break;
            }

            configure($button, this.element.href, message, '2');

            var location = this.location;
            $button
                .click(function () {
                    if (location) {
                        StackExchange.gps.track('share.click', {
                            location: location,
                            service: service
                        });
                    }
                })
                .appendTo(this.$sheet.find('.js-social-container').removeClass('d-none'));
        }
    });
})();



/***/ }),

/***/ "./_Scripts/LegacyJS/full/00_Header.js":
/*!*********************************************!*\
  !*** ./_Scripts/LegacyJS/full/00_Header.js ***!
  \*********************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


StackExchange.loggedIn = {};




/***/ }),

/***/ "./_Scripts/LegacyJS/full/03_QuestionFullInit.js":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full/03_QuestionFullInit.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _post_PostMenu_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../post/PostMenu.mod */ "./_Scripts/post/PostMenu.mod.ts");
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});





// If available, this is called from question.init(); it activates the question functionality that anons don't need
StackExchange.question.fullInit = function (options) {
    StackExchange.vote.init(options.votesCast);
    StackExchange.question.bindSuggestedEditPopupLinks();
    StackExchange.vote_bounty.init(options); //TODO: This has a TS module at _Scripts/Votes/bounty.mod.ts

    // displays error reasons when users can't edit a post
    (0,_post_PostMenu_mod__WEBPACK_IMPORTED_MODULE_0__.initPostMenu)();

    StackExchange.rollback.bindButtons();

    // handles the "we converted your answer to a comment" jump on page load
    if (/^#autocomment/.test(window.location.hash)) {
        var link = $('.comments-link:first');
        var commentId = "#comment-" + window.location.hash.substring(12);

        var showNotice =
            function () {
                let targetComment = $(commentId);
                StackExchange.helpers.showToast(__tr(["Your answer has been automatically converted to a comment."], undefined, "en", []), {
                    useRawHtml: true,
                    actions: [{
                        labelContents: $('<span>').text(__tr(["Learn more"], undefined, "en", [])).html(),
                        click: function () {
                            window.location.href="/help/deleted-answers";
                        }
                }]});
                StackExchange.comments.flashHighlight(targetComment);
                targetComment[0].scrollIntoView(true);
            };

        if (!!options.totalCommentCount && !!options.shownCommentCount && options.totalCommentCount != options.shownCommentCount) {
            StackExchange.comments.loadAll(link).done(showNotice);
        } else {
            showNotice();
        }
    }

    StackExchange.question.initInlineNewFeaturePopovers();
    StackExchange.question.initQuestionPinFeaturePopover();
};

StackExchange.question.initInlineNewFeaturePopovers = function() {
    // can never be both at the same time
    if (!StackExchange.question.initAndShowCloseReopenNotificationPopover()) {
        StackExchange.question.initQuestionFollowFeaturePopover();
    }
}

StackExchange.question.initQuestionFollowFeaturePopover = function() {
    var $btnFollowQuestion = $('.js-follow-question');
    var $introPopover = $('.js-question-follow-feature-popover');

    function popoverExists() { return $introPopover.parent().length > 0; }

    if ($btnFollowQuestion.length == 0 || !popoverExists()) {
        return false;
    }

    StackExchange.helpers.queueStacksPopover($btnFollowQuestion, 60);

    // Destroy the popover if the user clicks the button itself or the dismiss button.
    $introPopover.find('.js-dismiss').add($btnFollowQuestion)
        .click(function () {
            if (popoverExists()) {
                $btnFollowQuestion.removeAttr("aria-controls");
                $btnFollowQuestion.attr("data-controller", "s-tooltip");
                $introPopover.remove();
                StackExchange.helpers.toggleUserFlags(StackOverflow.Models.UserFlags.DismissFollowQuestionIntroPopover, true);
            }
        });

    // Never hide this popover, let the dismiss clicks above completely destroy it.
    $btnFollowQuestion.on('s-popover:hide', function (e) {
        if (popoverExists()) { e.preventDefault(); }
    });
    return true;
}

StackExchange.question.initQuestionPinFeaturePopover = function () {
    var $pinLink = $('.js-pin-question-link');
    var singleCollectiveSlug = $pinLink.data('single-collective-slug');
    var collectiveSlug = '';

    if (singleCollectiveSlug) {
        collectiveSlug = singleCollectiveSlug;
    }

    var pinQuestionToCollective_click = function (evt) {
        var $clicked = $(this);

        if ($clicked.is(':working')) return;

        $clicked.working(true);

        var postId = $clicked.data('post-id');
        var pinModalUrl = $clicked.data('action-pin-modal-url');
        var updatePinUrl = $clicked.data('action-update-pin-url');

        StackExchange.helpers.loadModal(pinModalUrl)
            .done(function () {
                var $chooseSection = $('.js-choose-collective');
                var $collectiveSelection = $('.js-collective-selection');
                var $selectedCollectiveRadio = $('.js-collective-selection:checked');
                var $continueButton = $('.js-choose-collective-continue');
                var $backToCollectivesButton = $('.js-back-to-collective-selection');
                var $pinnedPostCount = $('.js-pinned-post-count');
                const $pinUnpinDescription = $('.js-pin-unpin-description');

                var $pinUnpinTitle = $('.js-pin-unpin-title');
                var $pinConfirmationSection = $('.js-pin-confirmation');
                var $form = $('.js-change-pin-form');

                singleCollectiveSlug = $form.data('single-collective');
                var isPinned = !!$form.data('is-pinned');
                var undoActionUrl = $form.data('undo-action-url');
                var questionIdsToReplace;

                var $postButton = $('.js-submit-pin');

                function submitUpdate(collectiveSlug, postId, pinAction, questionIdsToReplace) {
                    var postData = {
                        fkey: StackExchange.options.user.fkey,
                        slug: collectiveSlug,
                        postId: postId,
                        pin: pinAction,
                    }

                    if (questionIdsToReplace)
                        postData.replacePostIds = questionIdsToReplace;

                    $.post(updatePinUrl, postData)
                        .success(function (data, _, ___) {
                            if (data.success) {
                                // Flip the current selection
                                if (singleCollectiveSlug) {
                                    isPinned = !isPinned;
                                } else {
                                    $selectedCollectiveRadio.data('is-pinned', isPinned ? 0 : 1);

                                    // Are any still pinned?
                                    isPinned = $collectiveSelection.toArray().some(function (el) {
                                        return $(el).data('is-pinned');
                                    });
                                }

                                var $dlg = $('.js-stacks-managed-popup');
                                $dlg.remove();

                                if (isPinned) {
                                    $pinLink.text(__tr(["Pinned"], undefined, "en", []));
                                } else {
                                    $pinLink.text(__tr(["Pin"], undefined, "en", []));
                                }

                                StackExchange.helpers.showToast(data.message, {
                                    type: 'success',
                                    transient: true,
                                    transientTimeout: 15000000,
                                    actions: [{
                                        labelContents: $('<span>Undo</span>'),
                                        click: function () {
                                            $.ajax({
                                                type: "POST",
                                                url: undoActionUrl,
                                                data: {
                                                    fkey: StackExchange.options.user.fkey,
                                                    undoToken: data.undoToken
                                                },
                                                success: function () {
                                                    window.location.reload();
                                                },
                                                error: function () {
                                                    StackExchange.helpers.showToast("Error undoing pin change", { type: 'danger', dismissable: true });
                                                }
                                            });
                                        }
                                    }]
                                });
                            } else {
                                StackExchange.helpers.showToast(data.message, { type: 'danger' });
                            }
                        })
                        .error(function (data) {
                            StackExchange.helpers.showToast('Error updating pin', { type: 'danger' });
                        })
                        .always(function (data, _, ___) {
                            $clicked.working(false).trigger('update');
                        });
                }

                function updateQuestionToReplace() {
                    var $questions = $('.js-replace-existing-pin-' + collectiveSlug);

                    $questions.change(function () {
                        var $selectedQuestion = $questions.filter(':checked');

                        if ($selectedQuestion) {
                            questionIdsToReplace = $selectedQuestion.map(function () { return $(this).data("post-id"); }).get().join();
                        } else {
                            questionIdsToReplace = 0;
                        }

                        if (questionIdsToReplace) {
                            $postButton.prop('disabled', false);
                        } else {
                            $postButton.prop('disabled', true);
                        }
                    });

                    $questions.change();
                }

                if (singleCollectiveSlug) {
                    collectiveSlug = singleCollectiveSlug;

                    if (!isPinned)
                        updateQuestionToReplace();

                    $pinUnpinTitle.text(!isPinned ? __tr(["Pin this post?"], undefined, "en", []) : __tr(["Unpin this post?"], undefined, "en", []));
                    $postButton.text(!isPinned ? __tr(["Pin post"], undefined, "en", []) : __tr(["Unpin post"], undefined, "en", []));
                    $pinUnpinDescription.text(!isPinned
                        ? __tr(["This will appear at the top of the question list for the collective."], undefined, "en", [])
                        : __tr(["This post will no longer appear at the top of the question list for your collective."], undefined, "en", []));
                } else {
                    $collectiveSelection.change(function () {
                        var selectionCount = 1;
                        $selectedCollectiveRadio = $('input[name=collectiveSelection]:checked', '.js-change-pin-form');

                        if (selectionCount > 0) {
                            $continueButton.removeAttr('disabled');
                            collectiveSlug = $selectedCollectiveRadio.data('slug');
                            isPinned = !!$selectedCollectiveRadio.data('is-pinned');
                            $pinnedPostCount.text($selectedCollectiveRadio.data('pinned-count'));
                        } else {
                            $continueButton.setAttr('disabled', 'disabled');
                        }
                    });

                    $continueButton.click(function () {
                        // Update text for the applicable action
                        $pinUnpinTitle.text(!isPinned ? __tr(["Pin this post?"], undefined, "en", []) : __tr(["Unpin this post?"], undefined, "en", []));
                        $postButton.text(!isPinned ? __tr(["Pin post"], undefined, "en", []) : __tr(["Unpin post"], undefined, "en", []));
                        $pinUnpinDescription.text(!isPinned
                            ? __tr(["This will appear at the top of the question list for the collective."], undefined, "en", [])
                            : __tr(["This post will no longer appear at the top of the question list for your collective."], undefined, "en", []));

                        // Show the next section, confirming or choosing which pin to replace
                        $pinConfirmationSection.removeClass('d-none');
                        $chooseSection.addClass('d-none');

                        // Show replacement section if needed
                        $('.js-replace-question-section-' + collectiveSlug).removeClass('d-none');
                        $('.js-pin-breadcrumbs').removeClass('d-none');

                        // Wire up handler for selecting which pin to replace
                        updateQuestionToReplace();
                    });

                    $backToCollectivesButton.click(function () {
                        $pinConfirmationSection.addClass('d-none');
                        $chooseSection.removeClass('d-none');
                        $('.js-replace-question-section-' + collectiveSlug).addClass('d-none');
                        $('.js-pin-breadcrumbs').addClass('d-none');
                    });
                }

                $postButton.on('click', function () {
                    submitUpdate(collectiveSlug, postId, !isPinned, questionIdsToReplace);
                });

                $clicked.working(false).trigger('update');
            }).always(function () {
                $clicked.working(false).trigger('update');
        });

        $clicked.working(false).trigger('update');

        evt.preventDefault();
        return false;
    }

    $pinLink.click(pinQuestionToCollective_click);
}

StackExchange.question.initAndShowCloseReopenNotificationPopover = function () {
    var $closeLink = $('.js-close-question-link');
    var $popover = $('.js-close-reopen-popover');
    if ($closeLink.length && $popover.length) {
        // wire stimulus controller
        $closeLink.attr({
            'aria-controls': 'close-reopen-popover',
            'data-controller': 's-popover',
            'data-s-popover-placement': 'bottom'
        });
        $closeLink.after($popover);

        $popover.find('.js-learn-more').on('click', function () {
            StackExchange.helpers.loadModal('/questions/close-reopen-explanation-modal')
                .done(function () {
                    $closeLink.data('show-interstitial', false);
                })
                .fail(function (error) {
                    StackExchange.helpers.showToast(error, { type: 'danger' });
                });
        });
        $popover.find('.js-dismiss').on('click', function () {
            StackExchange.helpers.toggleStacksPopover($closeLink, false);
        });
        $closeLink.on('s-popover:hidden', function () {
            StackExchange.helpers.toggleUserFlags(StackOverflow.Models.UserFlags.DismissCloseReopenPrivilegePopover, true);
            $popover.remove();
        });

        StackExchange.helpers.queueStacksPopover($closeLink, 150);

        StackExchange.using("gps", function () {
            StackExchange.gps.track("close_popover.view");
        });
        return true;
    }
    return false;
};

StackExchange.question.bindSuggestedEditPopupLinks = function () {
    $('.js-post-menu .js-edit-pending').each(function () {
        $(this).unbind('click').click(function () {
            loadSuggestedEditPopup($(this));
            return false;
        });
    });

    function loadSuggestedEditPopup($editLink) {
        var $menu = $editLink.closest('.js-post-menu');
        var postId = $menu.attr('data-post-id');
        var $container = $menu.find('.js-menu-popup-container');

        if ($editLink.data('working')) {
            return;
        }

        $editLink
            .data('working', true)
            .loadPopup({
                url: '/review/suggested-edit-popup/' + postId,
                lightbox: true,
                dontShow: true,
                target: $container,
                defaultErrorMessage: __tr(["Unable to load suggested edit - please try again"], undefined, "en", []),
            })
            .done(function ($popup, $lightbox) {
                $lightbox.fadeIn('fast');

                $popup
                    .css('height', '600px') // since the contents of the popup are ajax loaded, give it a fake height while
                    .center()
                    .css('height', '') // now that we've centered it, remove the fake height we just gave it
                    .fadeIn('fast');
            })
            .always(function () {
                $editLink.removeData('working');
            });
    }
}



/***/ }),

/***/ "./_Scripts/LegacyJS/full/04_Vote.js":
/*!*******************************************!*\
  !*** ./_Scripts/LegacyJS/full/04_Vote.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./04_Vote.mod */ "./_Scripts/LegacyJS/full/04_Vote.mod.ts");
/* harmony import */ var _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_Declarations/TypeIdEnums */ "./_Scripts/_Declarations/TypeIdEnums.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});





StackExchange.vote = {
    init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.init,
    election_init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.election_init,
    vote_up: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.vote_up,
    vote_down: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.vote_down,
    follow_init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.follow_init,
    bookmark_init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.bookmark_init,
    vote_init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.vote_init,
    delete_init: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.delete_init,
    bindFetchVoteCounts: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.bindFetchVoteCounts,
    highlightExistingVotes: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.highlightExistingVotes,
    normalizePostScore: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.normalizePostScore,
    submit: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.submit,
    voteTypeIds: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_1__.VoteTypeId,
    getPostId: _04_Vote_mod__WEBPACK_IMPORTED_MODULE_0__.getPostId,
};



/***/ }),

/***/ "./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.js":
/*!*********************************************************!*\
  !*** ./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./05_VoteToCloseAndFlag.mod */ "./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});





// TODO once all references to `vote_closingAndFlagging` have been converted to modules
/** @type {import("../../_Declarations/StackExchange").StackExchangeVoteClosingAndFlagging} */
StackExchange.vote_closingAndFlagging = {
    close_afterLoadListOriginals: _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__.closeAfterLoadListOriginals,
    close_initDuplicateSubPane: _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__.closeInitDuplicateSubPane,
    updateCloseLinkCount: _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__.close_updateCloseLinkCount,
    showReopenConfirmation: _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__.showFancyReopenConfirmation,
    init: _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_0__.initVoteToCloseAndFlag
}



/***/ }),

/***/ "./_Scripts/LegacyJS/full/06_CommentsActive.js":
/*!*****************************************************!*\
  !*** ./_Scripts/LegacyJS/full/06_CommentsActive.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _comments_comments_active_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../comments/comments-active.mod */ "./_Scripts/comments/comments-active.mod.ts");
/* harmony import */ var _comments_comments_tab_completer_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../comments/comments-tab-completer.mod */ "./_Scripts/comments/comments-tab-completer.mod.ts");
/* harmony import */ var _constants_mod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});






// add active functionality to StackExchange.comments
(function () {

    var autoShowCommentHelp,
        stackExchangeComments = StackExchange.comments,
        uiForPost = stackExchangeComments.uiForPost;

    stackExchangeComments.extendPostUi({

        ensureInput: function () {
            var jForm = this.jDiv.find('form[id^="add-comment-"]'),
                that = this;

            if (jForm.children().length && (jForm.data('template-included') !== true || jForm.data('initialized') != null)) {
                jForm.add(jForm.prev()).removeClass("d-none");// prev() is the "discussion" stuff
                return jForm.find('.js-comment-text-input');
            } else {
                var params = {
                    postUi: that,
                    jForm: jForm,
                    buttonText: __tr(["Add comment"], undefined, "en", []),
                    showCancel: false,
                    extraMessageHtml: this.jDiv.find('.js-add-comment-message').html(),
                    onSubmit: function () { that.submitNewComment(); }
                };
                return renderCommentForm(params);
            }
        },

        /**
         * @param $jForm {JQuery} the form the result text input will be appended to
         * @returns jQuery with textarea
         */
        renderTextInput: function ($jForm) {
            var $jText = $('<textarea name="comment" class="s-textarea js-comment-text-input"></textarea>');
            $jText.attr('rows', 3).attr('cols', 68);
            return $jText;
        },

        saveEditingComments: function (skipId) {
            var editing = this.editingComments = [];
            this.jDiv.find(".js-edit-comment-form:visible").each(function () {
                var ui = uiForComment(this);
                if (ui.commentId === skipId)
                    return;
                var input = $(this).find("textarea");
                editing.push([ui.commentId, input.val()]);
            });
        },

        restoreEditingComments: function () {
            if (!this.editingComments) {
                return;
            }

            var $div = this.jDiv;
            $.each(this.editingComments, function (ind, val) {
                var commentId = val[0];
                var text = val[1];
                var jComment = $div.find("#comment-" + commentId);
                if (jComment.length) {
                    uiForComment(jComment).edit(text, true);
                }
            });
            delete this.editingComments;
        },

        commentsShown: function () {
            try {
                var input = this.jDiv.find("form[id^='add-comment-'] .js-comment-text-input:focus");
                if (input.length)
                    StackExchange.comments.tabCompleter.init(input);
                this.remainingCommentsCount(0);
            } catch (ex) {
                // stop using IE7, for heaven's sake!
                // (no :focus)
            }
        },

        submitNewComment: function () {
            var jForm = this.jDiv.find('form[id^="add-comment-"]'),
                jTxt = jForm.find('.js-comment-text-input'),
                that = this;

            if (jForm.is(':working')) return;
            jForm.working(true);

            var shouldPersistForm = jForm.data("persist-form");

            var data = {
                'comment': getOrSetInputValue(jTxt),
                'fkey': StackExchange.options.user.fkey,
            };
            this.alterAddEditDataBeforeSubmit(data);

            var templateInput = jForm.find('#js-selected-template-id');
            if (templateInput.length) {
                data['hasUserEditedTemplate'] = $(".comment-form-expanded").data("has-user-edited-template");
                data['commentTemplateId'] = templateInput.val();
            }

            this.ajax({
                type: 'POST',
                url: '/posts/' + this.postId + '/comments',
                dataType: 'html',
                data: data
            }, __tr(["An error occurred while adding this comment"], undefined, "en", []), jForm)
                .done(function (html) {
                    getOrSetInputValue(jTxt, '');
                    jTxt.keyup().blur(); // resets the counter
                    StackExchange.helpers.enableSubmitButton(jForm);
                    if (!shouldPersistForm) {
                        jForm.add(jForm.prev()).addClass("d-none");
                    }
                    jForm.find('.message-dismissable').fadeOutAndRemove();
                    that.showComments(html, null, false, true);
                    that.jCommentsLinkContainer.show();
                    $(document).trigger('comment', that.postId);
                }).fail(function () {
                    StackExchange.helpers.enableSubmitButton(jForm);
                }).always(function () {
                    jForm.working(false);
                });
        },

        checkDiscussion: function () {
            var jTrigger = this.jDiv.find(".is-comment-discussion"),
                that = this;

            if (!jTrigger.length)
                return;

            jTrigger.remove();

            var jFormContainer = this.jDiv.find(".comment-form");
            if (jFormContainer.find(".discussion-info").length)
                return;

            var discussioninfo = $("<div style='margin:12px 0 3px; font-weight:bold' class='discussion-info'>" +
                __tr(["Please avoid extended discussions in comments. Would you like to $aStart$automatically move this discussion to chat?"], {aStart: "<a href='#'>"}, "en", []) + "</a></div>")
                .find("a").click(function (evt) {
                    $(this).unbind("click");
                    evt.preventDefault();

                    that.ajax({
                        url: "/posts/" + that.postId + "/move-discussion-to-chat",
                        data: { fkey: StackExchange.options.user.fkey },
                        type: "POST"
                    }, __tr(["An error occurred when trying to move the discussion to chat"], undefined, "en", []), jFormContainer)
                        .done(function (data) {
                            if (data.success)
                                window.location.href = data.message;
                            else
                                StackExchange.helpers.showErrorMessage(jFormContainer, data.message);
                        });
                }).end().prependTo(jFormContainer);
            jTrigger.remove();
        }
    });

    function CommentUi(commentId, jComment) {
        this.commentId = commentId;
        this.jComment = jComment;
        this.postUi = uiForPost(jComment);
    }

    var noop = function () { };

    // HACK: these will all get immediately extended (and the extensions saved), so that review/mod tools can add custom functionality
    CommentUi.prototype = {
        undoVoteUp: noop,
        voteUp: noop,
        "delete": noop,
        undelete: noop,
        flag: noop,
        submitFlag: noop,
        edit: noop,
        cancelEdit: noop,
        submitEdit: noop,
        submitVote: noop,
        renderScore: noop,
        showEdits: noop
    };

    var extendCommentUiObj;
    function extendCommentUi(obj, isTemp) {
        if (!isTemp) {
            extendCommentUiObj = obj;
        }
        obj = obj || extendCommentUiObj || {};
        for (var k in obj) {
            if (obj.hasOwnProperty(k))
                CommentUi.prototype[k] = obj[k];
        }
    }

    extendCommentUi({

        undoVoteUp: function () {

            if (StackExchange.options.inReadOnly) {
                return;
            }

            if (!confirm(__tr(["Are you sure you want to undo your upvote on this comment? You will not be able to upvote it again."], undefined, "en", []))) {
                return;
            }

            var arrow = this.jComment.find(".comment-up-on")
                .addClass("js-comment-up comment-up-off")
                .removeClass("comment-up-on js-comment-up-undo"),
                that = this;

            /* zero is undomod*/
            this.submitVote(0).done(function (json) {
                if (!json.Success) {
                    arrow.removeClass("js-comment-up comment-up-off").addClass("comment-up-on");
                    return;
                }
                that.renderScore(json.NewScore);
                arrow.prop('title', __tr(["This comment adds something useful to the post"], undefined, "en", [])).attr('aria-label', __tr(["Upvote comment"], undefined, "en", []));
                $(document).trigger('undoUpVoteComment', that.postUi.postId);
            }).fail(function (jqXHR) {
                if (jqXHR.status === 409) // the user was throttled because they un-voted too fast; allow retry
                    arrow.addClass("js-comment-up-undo");

                arrow.removeClass("js-comment-up").addClass("comment-up-on");
            });

        },

        voteUp: function () {
            if (StackExchange.options.inReadOnly) {
                return;
            }

            var arrow = this.jComment.find(".js-comment-up").addClass("comment-up-on").removeClass("js-comment-up"),
                that = this;

            this.submitVote(2).done(function (json) {
                if (!json.Success) {
                    arrow.removeClass("comment-up-on").addClass("js-comment-up");
                    return;
                }
                arrow.removeClass("comment-up-off");
                arrow.addClass("js-comment-up-undo");
                that.renderScore(json.NewScore);
                var title = __tr(["Youâve voted for this as a useful comment (click again to undo)"], undefined, "en", []);
                arrow.prop('title', title).attr('aria-label', title);
                $(document).trigger('upVoteComment', that.postUi.postId);
            }).fail(function () {
                arrow.removeClass("comment-up-on").addClass("js-comment-up");
            });
        },

        "delete": function () {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            var $comment = this.jComment;
            var $commentContainer = this.postUi.jDiv;
            var commentId = this.commentId;
            if (confirm(__tr(["Really delete this comment?"], undefined, "en", []))) {
                this.submitVote(10).done(function (json) {
                    if (json.Success) {
                        $comment.remove();

                        if ($commentContainer.find('.js-comment, textarea:visible').length === 0) {
                            $commentContainer.addClass("dno");
                        }

                        $commentContainer.trigger('comment:deleted', [+commentId]);
                    }
                });
            }
        },

        undelete: function () {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            var $comment = this.jComment;
            var commentId = this.commentId;
            var postId = this.postUi.postId;

            if (confirm(__tr(["Really undelete this comment?"], undefined, "en", []))) {
                (0,_comments_comments_active_mod__WEBPACK_IMPORTED_MODULE_0__.postUndeleteComment)(postId, commentId)
                    .done((singleCommentHtml) => $comment.replaceWith(singleCommentHtml))
                    .fail(() => StackExchange.helpers.showToast(__tr(["An error occurred while trying to undelete"], undefined, "en", []), { type: 'danger' }));
            }
        },

        flag: function (e) {
            return (0,_comments_comments_active_mod__WEBPACK_IMPORTED_MODULE_0__.CommentUiFlag)(this.jComment, this.commentId, this.postUi);
        },

        edit: function (textOverride, noFocus) {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            var $comment = this.jComment;
            var $form = $comment.findExclude('.js-edit-comment-form', '.js-child-comments-container')
            var $text = $form.find('.js-comment-text-input');
            var commentUi = this;
            var postUi = commentUi.postUi;

            // If edit was called with an event, ignore the first argument.
            if (typeof textOverride !== 'string') {
                textOverride = null;
            }

            // this may happen if edit is called from restoreEditingComments
            // if the comment editing time is over
            if (!$form.length)
                return;

            $comment.findExclude('.js-comment-edit-hide', '.js-child-comments-container').addClass('d-none');
            $comment.findExclude('.js-comment-text-and-form', '.js-child-comments-container').addClass('comment-form');
            $form.removeClass('d-none');

            // Only configure the editor if it's not present (in case `edit` is called multiple times)
            if (!$text.length) {
                var params = {
                    postUi: postUi,
                    jForm: $form,
                    buttonText: __tr(["Save edits"], undefined, "en", []),
                    showCancel: true,
                    onSubmit: function () { commentUi.submitEdit(); }
                };
                $text = renderCommentForm(params);
                getOrSetInputValue($text, textOverride || $form.data('markdown') || '');
            }

            $text.trigger('charCounterUpdate').trigger('editReady');

            if (!noFocus) {
                $text.focus();
                if (StackExchange.helpers.hasContentEditable($text)) {
                    StackExchange.helpers.placeCaretAtEnd($text[0]);
                }
            }
        },

        cancelEdit: function () {
            var $comment = this.jComment;
            // handle both comments and replies
            var $form = $comment.findExclude('.js-edit-comment-form,.js-reply-comment-form', '.js-child-comments-container')
            
            $comment.findExclude('.js-comment-edit-hide', '.js-child-comments-container').removeClass('d-none');
            $comment.findExclude('.js-comment-text-and-form', '.js-child-comments-container').removeClass('comment-form');
            $comment.find('.js-comment-reply').removeClass('d-none');
            $form.addClass('d-none');
            $form.children().remove();
            $form.unbind('submit');
            $comment.findExclude('.js-comment-edit.js-return-focus', '.js-child-comments-container').removeClass('js-return-focus').focus();
        },

        submitEdit: function () {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            var $comment = this.jComment;
            var $form = $comment.findExclude('.js-edit-comment-form', '.js-child-comments-container');
            var $text = $form.find('.js-comment-text-input');
            var text = getOrSetInputValue($text);
            var commentId = this.commentId;
            var postUi = this.postUi;
            var returnFocus = $comment.findExclude('.js-comment-edit.js-return-focus', '.js-child-comments-container').length > 0;
            var data = { 'comment': text, 'fkey': StackExchange.options.user.fkey };

            postUi.alterAddEditDataBeforeSubmit(data);

            postUi.ajax({
                type: 'POST',
                url: '/posts/comments/' + commentId + '/edit',
                dataType: 'html',
                data: data
            }, __tr(["An error occurred while editing this comment"], undefined, "en", []), $form)
                .done(function (html) {
                    $text.val('').keyup().blur(); // resets the counter
                    StackExchange.helpers.enableSubmitButton($form);
                    postUi.showComments(html, commentId, false, true); // note that this also removes the edit form

                    // inform the moderator bar, if present
                    postUi.jDiv.trigger('comment:edited', [+commentId, html]);

                    var $editedComment = postUi.jDiv.find('.js-comment[data-comment-id=' + commentId + ']');
                    if (returnFocus) {
                        $editedComment.find('.js-comment-edit').focus();
                    }
                }).fail(function () {
                    StackExchange.helpers.enableSubmitButton($form);
                });
        },
        
        // loads the reply form
        loadReply: function (textOverride, noFocus) {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            // determine where we were called from
            var $btn = $(this.jComment.context)
            // true if reply will be made to the parent of current comment and be created as a sibling, to be used when at bottom comment depth
            var replyToParent = $btn.data("reply-to-parent")
            var replyToThread = $btn.data("reply-to-thread")
            var replyToUser = String($btn.data("reply-to-user"))
            var insertCommentOnTop = $btn.data("insert-comment-on-top")

            if (replyToParent) {
                this.jComment = this.jComment.parent().closest(".js-comment")
            }
            if (replyToThread) {
                this.jComment = $btn.closest(".js-comment")
            }

            var $comment = this.jComment;
            var $form = $comment.findExclude('.js-reply-comment-form', '.js-child-comments-container')
            var $children = $comment.findExclude(".js-child-comments-container",".js-child-comments-container")
            var $text = $form.find('.js-comment-text-input');
            var commentUi = this;
            var postUi = commentUi.postUi;

            if (replyToUser) {
                textOverride = `@${(0,_comments_comments_tab_completer_mod__WEBPACK_IMPORTED_MODULE_1__.normalizeName)(replyToUser)} `
            }

            // this may happen if reply is called from restoreEditingComments
            // if the comment editing time is over
            if (!$form.length)
                return;
            
            // hide all child reply buttons so they don't get clicked multiple times
            $comment.find('.js-comment-reply').addClass('d-none');

            if (insertCommentOnTop) {
                $form.insertBefore($children)
            } else {
                $form.insertAfter($children)
            }

            $form.removeClass('d-none');

            // Only configure the editor if it's not present (in case `reply` is called multiple times)
            if (!$text.length) {
                var params = {
                    postUi: postUi,
                    jForm: $form,
                    buttonText: __tr(["Reply"], undefined, "en", []),
                    showCancel: true,
                    onSubmit: function () { commentUi.submitReply(); }
                };
                $text = renderCommentForm(params);
                getOrSetInputValue($text, textOverride || $form.data('markdown') || '');
            }

            $text.trigger('charCounterUpdate').trigger('editReady');

            if (!noFocus) {
                $text.focus();
                if (StackExchange.helpers.hasContentEditable($text)) {
                    StackExchange.helpers.placeCaretAtEnd($text[0]);
                }
            }
        },

        submitReply: function () {
            if (StackExchange.options.inReadOnly) {
                return;
            }
            var $comment = this.jComment;
            var $form = $comment.findExclude('.js-reply-comment-form', '.js-child-comments-container');
            var $text = $form.find('.js-comment-text-input');
            var text = getOrSetInputValue($text);
            var parentCommentId = $form.data("parent-comment-id")
            var postUi = this.postUi;
            var postId = postUi.postId

            var data = {
                'comment': text,
                'fkey': StackExchange.options.user.fkey,
                parentCommentId: parentCommentId
            };

            postUi.alterAddEditDataBeforeSubmit(data);

            
            postUi.ajax({
                type: 'POST',
                url: `/posts/${postId}/comments`,
                dataType: 'html',
                data: data
            }, __tr(["An error occurred while adding this comment"], undefined, "en", []), $form)
                .done(function (html) {
                    $text.val('').keyup().blur(); // resets the counter
                    StackExchange.helpers.enableSubmitButton($form);
                    $form.addClass("d-none")
                    postUi.showComments(html, null, false, true);
                }).fail(function () {
                    StackExchange.helpers.enableSubmitButton($form);
                }).always(function () {
                    $form.working(false);
                });
        },

        submitVote: function (voteTypeId, additionalFormParams) {
            const actions = this.jComment.find(".js-comment-actions");

            return (0,_comments_comments_active_mod__WEBPACK_IMPORTED_MODULE_0__.submitCommentVote)(
                this.commentId,
                voteTypeId,
                additionalFormParams,
                (options) => {
                    options = {
                        ...options,
                        success(resp) {
                            if (!resp.Success && resp.Message)
                                StackExchange.helpers.showErrorMessage(actions, resp.Message);
                        }
                    };
                    return this.postUi.ajax(options, __tr(["An error occurred during voting"], undefined, "en", []), actions, /*noLoaderAnimation=*/ true);
                }
            );
        },

        renderScore: function (score) {
            var result = "";
            if (score && score > 0) {
                var css = score < 5 ? '' : score <= 15 ? 'warm' : score <= 30 ? 'hot' : 'supernova';
                result += '<span title="' + __tr(["number of 'useful comment' votes received"], undefined, "en", []) + '" class="' + css + '">' + score + '</span>';
            }
            this.jComment.find(".js-comment-score").html(result);
        },

        showEdits: function () {
            var $comment = this.jComment,
                $pencil = $('#comment-' + this.commentId + ' .js-show-edits'),
                ajaxOptions = {
                    type: 'GET',
                    url: '/posts/comments/{commentId}/edit-history'.formatUnicorn({ commentId: this.commentId }),
                    dataType: 'html'
                };

            this.postUi.ajax(ajaxOptions, null, /* spinner target */ $pencil.parent()).done(function (html) {
                // show the diff table centered right below the comment
                StackExchange.helpers.showMessage($comment.findExclude(".js-comment-text-and-form", '.js-child-comments-container'), null, {
                    messageElement: html,
                    type: 'config',
                    relativeToBody: true,
                    position: { my: 'top center', at: 'bottom center', offsetTop: -10, offsetLeft: 60 },
                    fixedTo$elem: true
                });
            });
        }
    });

    // TODO: move this to stub.js/somewhere shared, once we start using contenteditable more
    /**
     * When supplied with one argument, returns the current value of $txt; when supplied with two, sets
     * $txt's value to the second arg.
     *
     * @param {jQuery|Element|string} $txt jquery wrapping input[type="text"], a textarea, or a div[contenteditable="true"]
     * @param {any} optionalSetValue when supplied, string value to set $txt to
     */
    function getOrSetInputValue($txt, optionalSetValue) {
        if (!$txt)
            throw new Error('$txt is required');

        if (!($txt instanceof $))
            $txt = $($txt);

        var hasContentEditable = StackExchange.helpers.hasContentEditable($txt);

        // get
        if (arguments.length === 1) {
            // for <div>, send back html, so we can parse mentions
            return hasContentEditable ? $txt.html() : $txt.val();
        }

        // set
        if (hasContentEditable) {
            // html encode
            $txt.html($('<div/>').text(optionalSetValue).html());
        } else {
            $txt.val(optionalSetValue);
        }
    }

    /**
     * @typedef {{ buttonText: string?, jForm: jQuery, postUi: any, extraMessageHtml: string?, showCancel: boolean?, onSubmit: (jForm: jQuery?) => {} }} renderCommentFormParams
     * @param {renderCommentFormParams} params
     */
    function renderCommentForm(params) {

        const $jForm = params.jForm;
        // if data-template-included is not true, we'll use default template
        const useDefaultTemplate = $jForm.data("template-included") !== true;

        if (useDefaultTemplate) {

            var publicCommentTemplate = /*html*/ 
                `<div class="js-comment-form-layout d-flex fw-wrap jc-end mt8">
                    <div class="w75 fl-grow1">
                        <div class="js-comment-text-input-container"/>
                        <span class="text-counter"></span>
                        <span class="form-error"></span>
                    </div>
                    <div class="d-flex fd-column jc-space-between pb4 mb16 ml8">
                    <div class="d-flex fd-column">
                        <button type="submit" class="s-btn s-btn__filled"></button>
                        <button type="button" class="js-edit-comment-cancel s-btn s-btn__link ta-left px2 mt6 d-none"></button>
                    </div>
                    <button type="button" class="js-comment-help-link s-btn s-btn__link ta-left px2"></button>
                    </div>
                </div>`;

            var stagingGroundCommentTemplate = /*html*/ 
                `<div class="ba bc-black-225">
                    <div class="js-comment-form-layout d-flex fw-wrap jc-end pl1">
                        <div class="w100 js-comment-text-input-container"></div>
                    </div>
                    <div class="bt bg-black-100 bc-black-225 p8 g8 ai-center d-flex ml1">
                        <button type="submit" class="s-btn s-btn__filled"></button>
                        <button type="button" class="js-edit-comment-cancel s-btn"></button>
                        <span class="ml-auto text-counter"></span>
                    </div>
                </div>`;

            // sg uses different comment template than main site
            const isStagingGround = location.href.includes('/staging-ground/');
            $jForm.append(isStagingGround ? stagingGroundCommentTemplate : publicCommentTemplate);
        } else {
            // in the case where we are not adding the template (ie: template is included) the form will be used
            // as it is there but the logic will still proceed here to bind up
            $jForm.removeClass('d-none');
        }
        $jForm.data('initialized', 'true');
        $jForm.find('[type=submit]').text(params.buttonText);

        var $jText = params.postUi.renderTextInput($jForm);

        const textAreaId = $jForm.data('textarea-id');
        if (textAreaId) {
            $jText.attr('id', textAreaId);
        }

        const textAreaClass = $jForm.data('textarea-class');
        if (textAreaClass) {
            $jText.toggleClass(textAreaClass, true);
        }

        var $jInputContainer = $jForm.find('.js-comment-text-input-container');
        if (useDefaultTemplate && params.extraMessageHtml) {
            $jInputContainer.append('<div class="new-contributor-indicator fc-black py12 btr-sm ta-center">' + params.extraMessageHtml + '</div>');
            $jText.addClass('btr0');
        }
        $jInputContainer.append($jText);

        if (params.showCancel) {
            // bind comment cancelling
            $jForm.find('.js-edit-comment-cancel')
                .text(__tr(["Cancel"], undefined, "en", []))
                .removeClass('d-none')
                .click(function () { uiForComment($jForm).cancelEdit(); });

            // bind escape key to cancel commenting
            $jForm.keyup(function (event) {
                if (event.which === _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.ESC
                    && $jForm.find("#tabcomplete > li:visible").length === 0
                    && !$jForm.hasClass('js-prevent-submit-form-on-enter-press')) {
                    uiForComment($jForm).cancelEdit();
                }
            });
        }

        var isValid = false;
        var setIsValid = function (bool) { isValid = bool; };
        var minLength = $(".js-comments-container").data("min-length");

        // set up text input bindings
        $jText
            .attr('placeholder', $jForm.data("placeholdertext")) // IE 10 issue - https://stackoverflow.com/q/13764607
            .charCounter({ min: minLength, max: 600, setIsValid: setIsValid })
            .focus(function () { StackExchange.comments.tabCompleter.init($(this)); });

        var showAbridgedCommentsHelp = $jForm.hasClass('js-abridged-help');

        if (autoShowCommentHelp) {
            $jText.one("focus", { abridged: showAbridgedCommentsHelp }, toggleCommentHelp);
        }

        // bind help link
        const $helpLink = $jForm.find('.js-comment-help-link');
        if ($helpLink) {
            var showText = $helpLink.data("text-show") || __tr(["Help"], undefined, "en", []);
            $helpLink.text(showText);
            $helpLink.click({ abridged: showAbridgedCommentsHelp }, toggleCommentHelp);
            $helpLink.attr('aria-expanded', !!autoShowCommentHelp);

            // if a help icon exists, clicking it should trigger a click on the help link
            var $helpIcon = $jForm.find('.js-help-icon');
            if ($helpIcon) {
                $helpIcon.click(function () { $helpLink.click(); });
            }
        }

        $jForm.submit(function () {
            if (isValid) {
                StackExchange.helpers.disableSubmitButton($jForm);
                params.onSubmit($jForm);
            }
            else {
                $jForm.find('span.text-counter').animate({ opacity: 0 }, 100, function () { $(this).animate({ opacity: 1 }, 100); });
            }
            return false;
        });

        if (!StackExchange.settings.comments.doNotSubmitOnEnter) {
            StackExchange.helpers.submitFormOnEnterPress($jForm);
        }

        return $jText;
    };

    // Event handler for click on the "help" link as well as (possibly) focus on the comment text box
    var toggleCommentHelp = function (evt) {

        var $btn = $(this);
        var containerClass = $btn.data("help-container");
        var containerSelector = containerClass ? "." + containerClass : ".js-comment-form-layout"
        var $container = $btn.closest(containerSelector);
        var $helpLink = $container.find(".comment-help-link");
        var $oldHelp = $(".comment-help", $container);

        var doShow;
        if (evt.type == "click") {
            doShow = $oldHelp.length == 0 || !$oldHelp.is(":visible");
            if (!doShow) {
                // the user has explicitly hidden the comment help -- don't show it automatically again on this page
                toggleCommentHelp.manualOnly = true;
            }
        }
        else if (toggleCommentHelp.manualOnly)
            return;
        else
            doShow = true; // focus event

        $('.js-comment-help-link').attr('aria-expanded', doShow);

        var showText = $btn.data("text-show") || __tr(["Help"], undefined, "en", []);
        var hideText = $btn.data("text-hide") || __tr(["Hide help"], undefined, "en", []);

        var setHelpLinkText = function () {
            $helpLink.text(doShow ? hideText : showText);
        };

        if ($oldHelp.length > 0) {
            if (doShow)
                $oldHelp.slideDown(setHelpLinkText);
            else
                $oldHelp.slideUp(setHelpLinkText);
            return;
        }

        if (!doShow)
            return;

        var $helpContainer = $("<div class='w100' />").appendTo($container);

        if (toggleCommentHelp.helpText) {
            $helpContainer.html(toggleCommentHelp.helpText);
            $(".comment-help", $helpContainer).slideDown(setHelpLinkText);
        }
        else {
            if (toggleCommentHelp.inProgress) {
                return;
            }
            toggleCommentHelp.inProgress = true;
            StackExchange.helpers.addSpinner($helpLink);
            var abridged = evt.data.abridged;
            $helpContainer.load("/posts/comment-help?abridged=" + abridged, function (responseText) {
                toggleCommentHelp.helpText = responseText;
                StackExchange.helpers.removeSpinner();
                $(".comment-help", this).slideDown(setHelpLinkText);
                toggleCommentHelp.inProgress = false;
            });
        }
    };

    function uiForComment(elOrJQueryOrSelector) {
        var $comment = $(elOrJQueryOrSelector).closest('.js-comment');
        var commentId = ($comment.data('comment-id') || '').toString();
        return new CommentUi(commentId, $comment);
    }

    // Several of the comment controls are very close to each other and to other links. When the
    // Android browser thinks element A is clickable (because it's a link or has an onclick handler),
    // and it thinks element B is not, and A is close to B, and you tap on B, the browser thinks you have
    // fat fingers and pretends you tapped on A. Since event delegation doesn't create click handlers
    // on the particular element, the Android browser doesn't know it should consider it a hit area.
    //
    // To work around this, we do the following: If the element is *touched* (the touchstart event sends the
    // *correct* target element), we add a dummy click handler to it and add a dummy attribute. The latter
    // DOM change is necessary for Android to reconsider its hit areas. This adds a few unnecessary click handlers
    // on touch-enabled devices, but is otherwise free of side-effects. And at most one handler will be
    // added per element.
    function heyAndroidThisIsClickable(context, ancestor, targetSelector) {
        if (!/Android/.test(navigator.userAgent))
            return;

        $(ancestor, context).bind("touchstart", function (evt) {
            var jTarget = $(evt.target);

            if (!jTarget.is(targetSelector))
                return true;
            var events = jTarget.length ? $._data(jTarget[0], "events") : null;
            if (events && events.click && events.click.length)
                return true; // there's already a (jQuery-bound; we may not see others, but that's not a big ussue) click handler here; no need to do anything
            jTarget.click(function () { }).attr("data-nothing-to-see-here", "X"); // this dom-change is necessary for the android browser to pick up the change
            return true;
        });
    }

    function commentUiDelegate(context, selector, methodName) {
        var onClick = function (e) {
            e.preventDefault();
            var ui = uiForComment(this);
            var mtd = ui[methodName];
            mtd.apply(ui);
        };

        $(".js-comments-container", context).delegate(selector, "click", onClick);
        heyAndroidThisIsClickable(context, ".js-comments-container", selector);
    }

    var passiveInit = stackExchangeComments.init;

    stackExchangeComments.init = function (options) {
        passiveInit(options);
        autoShowCommentHelp = options && options.autoShowCommentHelp;
        var context = (options && options.post) || document;
        commentUiDelegate(context, ".js-comment-up", "voteUp");
        commentUiDelegate(context, ".js-comment-delete", "delete");
        commentUiDelegate(context, ".js-comment-undelete", "undelete");
        
        // for Collectives Discussions, the comment flag icon doesn't hook into the moderation system,
        // rather we just send the user to the contact us page so the CMs will moderate.
        // if this ever need to hook back into the moderation system, take a look at commit 22de59962c76602d5a5d636bb764492405479bca
        // that was part of PR#15971
        if (options && options.isCollectivesDiscussion === true) {
            var commentsContainer = $(".js-comments-container", context);
            var postId = commentsContainer.data("post-id");
            commentsContainer.delegate(".js-comment-flag", "click", function (e) { window.open("/contact?topic=15&postId=" + postId, '_blank') });
        } else {
            commentUiDelegate(context, ".js-comment-flag", "flag");
        }

        commentUiDelegate(context, ".js-comment-edit", "edit");
        commentUiDelegate(context, ".js-comment-reply", "loadReply");
        commentUiDelegate(context, ".js-comment-up-undo", "undoVoteUp");
        commentUiDelegate(context, ".js-show-edits", "showEdits");

        $(".js-comments-container", context).on("keypress", ".js-comment-edit", function (e) {
            if (e.keyCode === _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.SPACE || e.keyCode === _constants_mod__WEBPACK_IMPORTED_MODULE_2__.KEY_CODE.ENTER) {
                $(this).addClass('js-return-focus');
            }
        });

        // any answer forms with class "comment-form-expanded" should be expanded
        $('form.comment-form-expanded', context).each(function () {
            uiForPost(this).addShow(true, true);
        });

        extendCommentUi(null, true); // we need to re-apply the default behavior on init because of review audits
    };

    // allow overriding of comment actions; e.g. see moderator.js -> fastCommentDeletion()
    stackExchangeComments.extendCommentUi = extendCommentUi;

})(); // end of extending StackExchange.comments with active functionality



/***/ }),

/***/ "./_Scripts/LegacyJS/full/07_CommentTabCompleter.js":
/*!**********************************************************!*\
  !*** ./_Scripts/LegacyJS/full/07_CommentTabCompleter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/* harmony import */ var _comments_comments_tab_completer_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../comments/comments-tab-completer.mod */ "./_Scripts/comments/comments-tab-completer.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});





StackExchange.comments.tabCompleter = (function () {
    
    var _candidates, // an array of users that can be replied to, in reverse chronological order
        _currentTextarea;
    
    var _lastRead = null; // contains the @username that was last read
                          // when the user pressed any key except TAB. In other words:
                          // This contains the @username that the cursor is currently on in the
                          // input box, *unless* a tab completion was made -- in that case, it still
                          // contains the original @username

    /**
     * matches user url on both public and channels
     */
    var _matchUserId = /^(?:\/c\/[^\/]+)?\/users\/(\d+)/i;
    
    function showRecipients(recipients) {
        var tc = $("#tabcomplete");
        tc.empty();
        if (recipients.length > 5 || !recipients.length) // too many or not enough
            return;
        $.each(recipients, function (i, name) {
            var li = $("<li/>").text(name).appendTo(tc);
            if (name.toLowerCase() == _lastRead.toLowerCase())
                li.addClass("chosen");
        });
    }

    function currentAtName() {
        var pos = _currentTextarea.caret().start;
        var val = _currentTextarea.val();
        var moreThanOneAt = false;
        if (/@[^\s!?();:+"].*@/.test(val)) {
            if (!/`/.test(val)) // if the text contains more than one @, but does not contain a backtick, the server will reject
                return null;
            moreThanOneAt = true;
        }
        
        var toWordEnd = val.substring(pos).search(/[\s!?();:+"\[\]\\]/);
        if (toWordEnd == -1)
            toWordEnd = val.length - pos;

        // if are inserting an extra space at the end of the name, we should ignore it before checking for a current name match
        if (StackExchange.options.site.insertSpaceAfterNameTabCompletion && toWordEnd === 0 && val.substring(pos - 1, pos) === " ")
            toWordEnd = -1;

        var match = val.substring(0, pos + toWordEnd).match(/@[^\s!?();:+"\[\]\\]*$/);
        if (!match)
            return null;
        
        var atname = match[0].substr(1);
        var end = pos + toWordEnd;
        var start = end - atname.length;
        // if there's more than one at, only be helpful if this is the first one
        if (moreThanOneAt && /@[^\s!?();:+"]/.test(val.substr(0, start - 1)))
            return null;
        
        return { start: start, // the start of the username part of "@username"
                 pos: pos,                   // the cursor position
                 end: end,                   // the end of the username part
                 name: atname };             // the "username" part itself
    }

    function doReplace(replacement) {
        var current = currentAtName();
        if (current.name === replacement) {// we're not changing anything, so in particular, there's no need to move the cursor
            if (!_currentTextarea.is(":focus"))
                _currentTextarea.focus(); // but still make sure the cursor is in the input box (in case a click has pulled the focus from it)
            return;
        }

        if (StackExchange.options.site.insertSpaceAfterNameTabCompletion) {
            replacement += " ";
        }

        var oldval = _currentTextarea.val();
        _currentTextarea.val(oldval.substring(0, current.start) + replacement + oldval.substring(current.end));
        var newpos = current.start + replacement.length;
        _currentTextarea.caret(newpos, newpos);
    }

    // We're using mousedown (not click) and cancel the event for the following reason:
    // A click will pull the focus away from the input box in IE, causing actual
    // problems (because of the whole "cursor position in unfocused textbox" issue).
    // In all browsers, it will make us lose the single (clicked) auto-complete choice, so the
    // behavior would be incosistent with the TAB key behavior.
    $("body").on("mousedown", "#tabcomplete > li", function (evt) {
        var jThis = $(this);
        jThis.parent().find("li.chosen").removeClass("chosen");
        doReplace(jThis.addClass("chosen").text());
        return false;
    });

    function downHandler (evt) {
        var replacement, choices;
        if (evt.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.TAB) {
            choices = $("#tabcomplete li");
            if (!choices.length)
                return;
            var oldchoice = choices.filter(".chosen").removeClass("chosen");
            var newchoice = evt.shiftKey ? oldchoice.prev() : oldchoice.next();
            if (!newchoice.length) // this covers both cases where a) nothing was chosen yet or b) the *last* one was chosen
                newchoice = evt.shiftKey ? choices.last() : choices.first();
            replacement = newchoice.addClass("chosen").text();
            
        } else if (evt.which == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ESC) { // when username choices are displayed go back to displaying what the user originally typed
            choices = $("#tabcomplete li");
            if (!choices.length)
                return;
            replacement = _lastRead;
            _lastRead = null; // to force re-evaluation in the keyup/click handler
        } else {// neither tab nor esc
            return;
        }
        
        evt.preventDefault();
        doReplace(replacement);
    }

    function upHandler (evt) {
        if (evt.which) {
            switch (evt.which) {
                case 9: // tabs get handled above
                case 16: // shift
                case 17: // ctrl
                case 18: // alt
                case 220: // caps
                    return;
            }
        }
        var current = currentAtName();
        if (!current) {
            _lastRead = null;
            showRecipients([]);
            return;
        }
        if (_lastRead == current.name) // the entered name (part) is the same as the last time we checked
            return;

        var recipients = [];
        _lastRead = current.name;
        var re;
        if (!current.name)
            re = /^\W/; // if there's only the "@" character without anything else, show all candidates with crazy moon characters at the start
        else
            re = new RegExp("^" + (0,_comments_comments_tab_completer_mod__WEBPACK_IMPORTED_MODULE_1__.normalizeName)(current.name).replace(/\./g, "\\."), "i");
        var len = _candidates.length;
        for (var i = 0; i < len; i++) {
            var user = _candidates[i];
            var realName = user.name;
            // if there's only the "@", match against the actual name; if they actually typed something, match against the normalized name
            var normalized = current.name ? (0,_comments_comments_tab_completer_mod__WEBPACK_IMPORTED_MODULE_1__.normalizeName)(realName) : realName;
            if (normalized.match(re)) {
                recipients.push(realName.replace(/ /g, ""));
            }
        }
        showRecipients(recipients);
    }
    
    function userIdFromLink(href) {
        if (!href)
            return null;

        var match = href.match(_matchUserId);
        if (!match)
            return null;

        return parseInt(match[1], 10) || null;
    }

    function findOwnerLink($commentsDiv) {
        return $commentsDiv
            .closest(".question, .answer")
            .find(".post-signature:last .user-details a[href^='/']")
            .filter(function () {
                // access href through jquery, as this.href return full url, not the relative
                return _matchUserId.test($(this).attr('href'));
            });
    }

    /**
     * If there are existing comments above parameter textarea '$txt', adds a small popup with candidates for "@ replying" that may
     * be auto-completed via tabbing.
     * @param {jQuery} $txt - textarea below a bunch of comments - either for adding or editing comments
     * @param {jQuery} $commentsOptional - allows comments to be specified (re: docs); when null, assumed to be used on a Post
     * @param {jQuery} $ownerLinkOptional - allows content owner (e.g. post owner) to be specified; when null, 
     *                                      assumed to be used on a Post
     * @param {jQuery} $whereToInsertTabCompleteOptional - #tabcomplete will be inserted here; when null, it's inserted before $txt
     */
    function init($txt, $commentsOptional, $ownerLinkOptional, $whereToInsertTabCompleteOptional) {
        
        if (StackExchange.helpers.hasContentEditable($txt))
            return;
        
        var commentsDiv = $commentsOptional || $txt.closest("div.comments");
        var ownerLink = $ownerLinkOptional || findOwnerLink(commentsDiv);
        var ownerId = userIdFromLink(ownerLink.attr("href"));
        var commentersChronological = [];
            
        commentsDiv.find("a.comment-user").each(function (index, elem) { // note that this excludes deleted users; they are span.comment-user
            var node = elem.firstChild;
            if (node.nodeType !== 3) {
                StackExchange.debug.log("unexpected structure in comment owner link");
                return;
            }
            var username = node.nodeValue; // we're doing it this way to exclude diamonds (which are in a span.mod-flair)
            var userid = userIdFromLink($(elem).attr("href"));
            if (userid === StackExchange.options.user.userId)
                return;
            commentersChronological.push({ id: userid, name: username});
        });
        
        _candidates = [];
        var found = {};
        for (var i = commentersChronological.length - 1; i >= 0; i--) {
            var candidate = commentersChronological[i];
            if (!found[candidate.id]) {
                _candidates.push(candidate);
                found[candidate.id] = true;
            }
        }

        $("#tabcomplete").remove();
        if (_currentTextarea) {
            _currentTextarea
                .unbind($.browser.opera ? "keypress" : "keydown", downHandler)
                .unbind("keyup click", upHandler);
        }
        
        // except for maybe the current user or the owner, nobody has commented here yet;
        // do not offer tab completion.
        if (_candidates.length === 0 || (_candidates.length === 1 && _candidates[0].id === ownerId)) {
            _currentTextarea = null;
            return;
        }
        
        _currentTextarea = $txt;
        _lastRead = null;
        
        var $tabcomplete = $("<ul id='tabcomplete' />");
        if ($whereToInsertTabCompleteOptional) {
            $whereToInsertTabCompleteOptional.append($tabcomplete);
        }
        else {
            $tabcomplete.insertBefore($txt);
        }
        
        $txt.bind("keydown", downHandler)
            .bind("keyup click", upHandler);
    }
    
    
    return { init: init };
    
})();




/***/ }),

/***/ "./_Scripts/LegacyJS/full/08_InlineEditing.js":
/*!****************************************************!*\
  !*** ./_Scripts/LegacyJS/full/08_InlineEditing.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});




StackExchange.inlineEditing = {
    init: function () {
        function crossFade(outElem, inElem, duration, callback) {
            inElem.fadeIn(duration, callback);
            outElem.hide();
            return;
        }
        function smartyPantsMini(s) {
            if (typeof s === 'string' && StackExchange.settings.questions.applyFancyEncodingToQuestionTitles)
            {
                s = s.replace(/\.{3,}/g, "\u2026"); // ... (or more) becomes &hellip;
                s = s.replace(/---?(\s)/g, "\u2014$1"); // --- or -- becomes &mdash;
                s = s.replace(/"(.*?)"/g, "\u201c$1\u201d"); // "foo" becomes &ldquo;foo&rdquo;
                // s.replace(/(?<![A-Za-z])'(.*?)'(?![A-Za-z])/g, "\u2018$1\u2019"); // 'foo' becomes &lsquo;foo&rsquo;
                // s.replace(/(?<=[A-Za-z0-9])'([A-Za-z]+)/g, "\u2019$1"); // A's and O'Malley becomes &rsquo;s
            }
            return s;
        }

        if (document.referrer) {
            $("#post-form input[name='referrer']").val(document.referrer);
        }

        $(document).on("click", ".js-post-menu .js-edit-post", function (evt) {
            if (evt.ctrlKey || evt.altKey || evt.metaKey || evt.shiftKey) return; // allow open new window etc
            var e = $(this), root = e.closest(".question, .answer");

            if (e.data('handling-event') == 1) return false;
            e.data('handling-event', 1);

            if (StackExchange.inlineTagEditing) {
                StackExchange.inlineTagEditing.cancelForFullEditor(root);
            }

            var showEditorButton = $("#show-editor-button");
            var showEditorButtonWasHidden = showEditorButton.is(':visible');
            if (showEditorButtonWasHidden) {
                showEditorButton.hide();
            }
            e.addSpinner();

            var answer = "";
            var isAnswer = root.hasClass("answer");
            if (isAnswer) {
                answer = " class='answer'";
            }

            var existing = root.find('.postcell,.answercell');
            var toBeHidden = existing.find('> *');
            
            var div = $('<div class="inline-editor"/>').hide().appendTo(existing);

            // PostsController.InlineEdit: posts/{id:INT}/edit-inline
            div.load(e.attr('href') + '-inline', function (r, status, xhr) {

                var originalTitle;

                div.find("[tabindex]").each(function () {
                    var tabindex = parseInt($(this).attr("tabindex"), 10);

                    // skip any unset tabindex or tabindex set to -1
                    if (isNaN(tabindex) || tabindex <= 0) {
                        return true;
                    }

                    $(this).attr("tabindex", tabindex - 20);
                });
                StackExchange.helpers.removeSpinner();

                if (root.offset().top < $(window).scrollTop()) // don't scroll if the top of the post is visible
                    $('html, body').animate({ scrollTop: $(root).offset().top - 55 }, 200);

                if (status == 'error') {
                    div.remove();
                    e.data('handling-event', 0);

                    if (xhr.status == 403) {
                        StackExchange.helpers.showErrorMessage(existing, __tr(["Editing is currently forbidden."], undefined, "en", []))
                    }
                    // if this failed because there's a pending suggested edit, rewrite the link and bind for async review
                    else if (/\/review\/suggested-edits\/\d+/.test(r)) {
                        e
                            .removeClass('js-edit-post')
                            .addClass('js-edit-pending')
                            .attr({ href: r, title: __tr(["1 edit to this post is pending, please review it"], undefined, "en", []) })
                            .text(e.text() + " (1)");
                        StackExchange.question.bindSuggestedEditPopupLinks();
                        e.click();
                    }
                    else {
                        StackExchange.helpers.showErrorMessage(existing, __tr(["The post could not be loaded"], undefined, "en", []));
                    }
                }
                else {

                    crossFade(toBeHidden, div, 300);

                    var cancelEdit = function (elem) {
                        if (StackExchange.navPrevention) {
                            if (!StackExchange.navPrevention.confirm(__tr(["You have started editing this post. Abandon this edit?"], undefined, "en", [])))
                                return false;
                            StackExchange.navPrevention.stop();
                        }

                        StackExchange.using("beginEditEvent", function () {
                            StackExchange.beginEditEvent.cancel();
                        });

                        if (showEditorButtonWasHidden) {
                            showEditorButton.show();
                        }
                        e.data('handling-event', 0);
                        crossFade(div, elem, 300, function () { div.remove(); });
                        if (elem.offset().top < $(window).scrollTop()) // don't scroll if the top of the post is visible
                            $('html, body').animate({ scrollTop: $(root).offset().top - 55 }, 200);
                        return false;
                    };

                    var updateTitleEvent = "input keyup";
                    var resetTitle = function () {
                        title.unbind(updateTitleEvent, updateTitle);
                        setTitleDelayed.trigger(originalTitle);
                    };

                    var updateTitle = function (evt) {
                        setTitleDelayed.trigger(title[0].value);
                        return true;
                    };

                    div.find('.cancel-edit').click(function () { resetTitle(); cancelEdit(toBeHidden); });

                    var saveNewDefaultDelayed = StackExchange.helpers.DelayedReaction(function (hide) {
                        $.ajax({
                            type: "POST",
                            data: { fkey: StackExchange.options.user.fkey, hide: hide },
                            url: "/user/save-pref/hide-preview-for-inline-editing"
                        });
                    }, 1000, { sliding: true });

                    var hidePreview = div.find('.hide-preview');
                    hidePreview.click(function () {
                        var preview = div.find(".js-wmd-preview");
                        var visible = preview.is(":visible");
                        if (visible) {
                            preview.slideUp();
                            hidePreview.text(__tr(["show preview"], undefined, "en", []));
                        } else {
                            preview.slideDown();
                            hidePreview.text(__tr(["hide preview"], undefined, "en", []));
                        }

                        saveNewDefaultDelayed.trigger(visible);

                        return false;
                    });

                    var form = div.find('form');

                    var title = div.find('#title');
                    var header = $("#question-header a.question-hyperlink");
                    var originalTitleSuffix = title.data('question-state-suffix');
                    originalTitleSuffix = originalTitleSuffix ? ' ' + originalTitleSuffix : '';
                    originalTitle = title.val();

                    var setTitleDelayed = StackExchange.helpers.DelayedReaction(function (text) {
                        if (typeof text != 'undefined') {
                            header.text(smartyPantsMini(text) + originalTitleSuffix);
                            if (typeof MathJax != 'undefined')
                                MathJax.Hub.Queue(["Typeset", MathJax.Hub, header[0]]);
                        }
                    }, { sliding: true });

                    title.bind(updateTitleEvent, updateTitle);

                    div.find('#title,.wmd-input,#tagnames,.edit-comment').keydown(function (evt) {
                        if (evt.ctrlKey === true && evt.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ENTER) {
                            form.submit();
                            return false;
                        }
                        if (evt.keyCode == _constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.ESC) {
                            resetTitle();
                            cancelEdit(toBeHidden);
                            return false;
                        }
                    });

                    StackExchange.using("postValidation", function () {
                        StackExchange.postValidation.initOnBlurAndSubmit(form, isAnswer ? 2 : 1, 'edit', false, function (json) {
                            var html = json.html;
                            var elem = $(html).hide();
                            existing.replaceWith(elem);

                            if (!isAnswer) {
                                $("#question-header a.question-hyperlink").text(smartyPantsMini(json.title));
                            }

                            $('html').trigger('inline-edit-complete', [elem, json.title]);

                            styleCode();

                            cancelEdit(elem); // reverts the UI
                        });
                    });

                    StackExchange.using("beginEditEvent", function () {
                        StackExchange.beginEditEvent.init();
                    });
                }
            });
            return false;
        });
    }
};



/***/ }),

/***/ "./_Scripts/LegacyJS/full/saves.js":
/*!*****************************************!*\
  !*** ./_Scripts/LegacyJS/full/saves.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _saves_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../saves.mod */ "./_Scripts/LegacyJS/saves.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});




StackExchange.saves = {
    initSaves: _saves_mod__WEBPACK_IMPORTED_MODULE_0__.initSaves,
    initUserSaves: _saves_mod__WEBPACK_IMPORTED_MODULE_0__.initUserSaves,
};



/***/ }),

/***/ "./_Scripts/LegacyJS/realtime-se.js":
/*!******************************************!*\
  !*** ./_Scripts/LegacyJS/realtime-se.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


var EventEmitter = __webpack_require__(/*! ./../../Content/Js/third-party/event-emitter.js */ "./Content/Js/third-party/event-emitter.js");

var StackExchange = StackExchange || {};

StackExchange.realtime = (function () {
    var socket = null;
    var activeToShow = {};
    var answersToShow = [];
    var connectRetries = 0;
    var channelBuffer = [];
    var connectRetryMax = 10;    
    var connected = false;
    var formatShortDates = false;
    var suppressedTagHighlights;
    var killed = false;

    var pauseNotifications = false;

    var ee = new EventEmitter();

    function WebSocketEvents() {
        return {
            creationfailed: null,
            onopen: null,
            onmessage: null,
            onclose: null,
            onerror: null
        };
    }

    function WebSocketDirectWrapper(endpointUrl) {
        var webSocket;

        return {
            on: WebSocketEvents(),

            isOpen: function () {
                return webSocket && webSocket.readyState === 1;
            },

            readyState: function() {
                return webSocket ? webSocket.readyState : null;
            },

            start: function () {
                if (webSocket) {
                    return;
                }
                var on = this.on;
                try {
                    webSocket = new WebSocket(endpointUrl);
                } catch (ex) {
                    if (on.creationfailed) {
                        on.creationfailed(ex.message);
                    }
                    return;
                }
                webSocket.onopen = function () { if (on.open) on.open(); }
                webSocket.onclose = function () { if (on.close) { on.close(); } webSocket = null; }
                webSocket.onmessage = function (msg) { if (on.message) on.message(msg); }
                webSocket.onerror = function () { if (on.error) { on.error(); } webSocket = null; }
            },

            close: function() {
                if (webSocket) {
                    webSocket.close();
                    webSocket = null;
                }
            },

            dispose: function () {
                this.close();
            },

            send: function (data) {
                if (webSocket) webSocket.send(data);
            },
            
            open: function () {
                //A web socket is open as soon as it is instantiated
            }
        }
    }

    function socketDispose() {
        if (socket) {
            socket.dispose();
            socket = null;
        }
    }

    function init(endpoint) {
        var endpointSplit = endpoint.split(",");
        var endpointCount = endpointSplit.length;
        var endpointIndex = connectRetries % (endpointCount);
        var endpointUrl = endpointSplit[endpointIndex];
        var staleDisconnectIntervalInHours = StackExchange.options.realtime.staleDisconnectIntervalInHours;

        if ("WebSocket" in window) {
            if (socket)
                return;

            socket = WebSocketDirectWrapper(endpointUrl);
            if (socket === null)
                return;

            socket.on.open = function () {
                if (!connected) {
                    connected = true;
                }
                connectRetries = 0;
                log('WebSocket opened');
                if (socket && (socket.readyState() === 1)) {
                    var msg = '';
                    var opt = StackExchange.options;
                    if (opt) {
                        // any additions here should also be reflected in ListActiveSockets (column headers)
                        var msg = '|';
                        if(opt.routeName) msg = msg + opt.routeName.toString();
                        msg = msg + '|';
                        if (opt.user && opt.user.userId) msg = msg + opt.user.userId.toString();
                        msg = msg + '|';
                        if (opt.user && opt.user.accountId) msg = msg + opt.user.accountId.toString();
                        msg = msg + '|';
                        if (opt.user && opt.user.rep) msg = msg + opt.user.rep.toString();
                        msg = msg + '|' + window.location.host + '|';
                        if (opt.serverTime) msg = msg + opt.serverTime.toString();
                        msg = msg + '|';
                        log('analytic: ' + msg); // note: these values are **never** to be used for identification (trusted)
                                                                // purposes; they are for analytic only
                        socket.send(msg);
                    }
                }
                sendChannelBuffer();
                processHeartbeats();
                setInterval(updateRelativeDates, 60000);

                if (staleDisconnectIntervalInHours > 0) {
                    setTimeout(disconnectStaleConnection, staleDisconnectIntervalInHours * 1000 * 60 * 60 /* hours */);
                }
            };

            socket.on.message = function (msg) {
                var message = $.parseJSON(msg.data || msg);
                if (message.action === "realtime-broadcast") {
                    log("broadcast message - " + message.data);
                    var broadcastAction = $.parseJSON(message.data).a;
                    if (broadcastAction === "killWebSocket" || broadcastAction === "restartWebSocket") {
                        log("Applying action: " + broadcastAction);
                        killed = (broadcastAction === "killWebSocket");
                        if (killed) {
                            socketDispose();
                        } else {
                            socket.close();
                        }
                    }
                } else if (message.action == "debug-info") {
                    log(message.data);
                }
                else {
                    ee.emitEvent(message.action, [message.data]);
                }
            };

            socket.on.close = function () {
                socket = null;
                log('WebSocket closed');
                if (!killed && connectRetries < 5 && connectRetryMax > 0) {
                    connectRetries++;
                    connectRetryMax--;
                    log('reconnect attempt:' + connectRetries + ' max retries:' + connectRetryMax);
                    setTimeout(function () { StackExchange.realtime.init(endpoint) }, Math.random() * 5 * 60 * 1000); // Space reconnects across 5 minutes
                }
            };

            socket.on.error = function () {
                log('WebSocket failed');
                socketDispose();
            };

            socket.on.creationfailed = function(errorMessage) {
                log('Sockets disabled - ' + errorMessage);
                socketDispose();
            };

            socket.start();

            if(channelBuffer.length > 0 && socket) {
                socket.open();
            }
        }
    }

    function sendChannelBuffer() {
        if (socket == null || !socket.isOpen()) return;

        for (var i = 0, l = channelBuffer.length; i < l; i++) {
            log("sending " + channelBuffer[i]);
            socket.send(channelBuffer[i]);
        }
    }

    function simulate(message) {
        ee.emitEvent(message.action, [message.data]);
        console.dir(ee);
    }

    function log(message) {
        if (!((StackExchange && StackExchange.options && StackExchange.options.enableLogging) || ($ && $.cookie && $.cookie('devlog')))) return;
        console.log('realtime: ' + message);
    }

    function processHeartbeats() {
        ee.addListener('hb', function (data) {
            log('heartbeat received; responding');
            socket.send(data);
        });
    }

    function subscribe(data, flush) {
        channelBuffer.push(data);
        flush = flush === false ? false : true;
        if (flush) sendChannelBuffer();
    }

    function genericUnsubscribe(subscriptionName, callback) {
        ee.removeListener(subscriptionName, callback);
        unsubscribe(subscriptionName);
    }
    function genericSubscribe(subscriptionName, callback) {
        ee.addListener(subscriptionName, callback);
        subscribe(subscriptionName);
    }

    function unsubscribe(data) {
        log("unsubscribing " + data);

        var index = $.inArray(data, channelBuffer);
        if (index == -1) return;

        channelBuffer.splice(index, 1);

        // unsubscribe happens immediately and is sent directly
        if (socket == null || !socket.isOpen()) return;
        socket.send("-" + data);
    }

    function debug(section) {
        if (socket) socket.send('debug-' + section);
        else log('not connected');
    }

    function unsubscribeToQuestion(sid, qid) {
        var subscriptionName = sid + '-question-' + qid;
        unsubscribe(subscriptionName);
    }

    function subscribeToStagingGroundQuestion(sid, qid, commentAddCallback, reviewActionCallback, postEditCallback, postDeletedCallback) {
        var subscriptionName = sid + '-question-' + qid;
        subscribe(subscriptionName);

        ee.addListener(subscriptionName, function (data) {
            // TODO: does this actually work or is it getting captured?
            if (pauseNotifications) return;

            var payload = $.parseJSON(data);

            // NOTE: some events don't pass the account id, e.g. post-deleted, as this can leak privileged info to all listeners
            if (payload.acctid == StackExchange.options.user.accountId) return;

            log(subscriptionName + ' ' + data);

            switch (payload.a) {              
                case "comment-add":
                    commentAddCallback(payload);
                    break;
                case "review-action":
                    reviewActionCallback(payload);
                    break;
                case "post-edit":
                    postEditCallback(payload);
                    break;
                case "post-deleted":
                    postDeletedCallback(payload);
                    break;
            }
        });
    }

    function subscribeToQuestion(sid, qid) {
        var subscriptionName = sid + '-question-' + qid;
        subscribe(subscriptionName);

        ee.addListener(subscriptionName, function (data) {

            // TODO: does this actually work or is it getting captured?
            if (pauseNotifications) return;

            var payload = $.parseJSON(data);

            // NOTE: some events don't pass the account id, e.g. post-deleted, as this can leak privileged info to all listeners
            if (payload.acctid == StackExchange.options.user.accountId) return;

            log(subscriptionName + ' ' + data);

            switch (payload.a) {
                case "score":
                    postScoreUpdate(payload);
                    break;
                case "comment-add":
                    postCommentAdd(payload);
                    break;
                case "answer-add":
                    postAnswerAdd(payload);
                    break;
                case "accept":
                    postAnswerAccept(payload);
                    break;
                case "unaccept":
                    postAnswerAccept(payload, true);
                    break;
                case "post-edit":
                    postEdit(payload);
                    break;
                case "post-deleted":
                    postDeleted(payload);
                    break;
            }
        });
    }

    function pauseQuestionNotifications(val) {
        pauseNotifications = val;
    }

    /**
     * Informs viewer that a post has been deleted.
     * @param {object} payload - e.g. {"a":"post-deleted","qId":237835,"aId":248567,"acctid":3}
     */
    function postDeleted(payload) {

        var postId = payload.aId || payload.qId,
            isAnswer = !!payload.aId,
            $post = isAnswer ? $('#answer-' + payload.aId) : $('#question');

        // fade out the post and put a notification of deletion on top of it
        $post.css('opacity', 0.1);
        
        var $covering = $('<div class="realtime-post-deleted-notification" />');

        $covering.insertBefore($post);

        var msg = !!StackExchange.options.user['canSeeDeletedPosts']
                ? __tr(["This post has been deleted - click to refresh the page"], undefined, "en", [])
                : __tr(["This post has been deleted and is no longer viewable"], undefined, "en", []);

        var $msg = $('<p>')
                    .text(msg)
                    .appendTo($covering);

        $msg.click(function () {
            window.location.reload(true);
        });

        // clear out any flagging/closure popups, too
        $('.popup[data-postid=' + postId + ']').fadeOutAndRemove();
    }

    function postAnswerAccept(data, unaccept) {
        $('.js-accepted-answer-indicator').each(function () {
            var isAccepted = !unaccept && $(this).closest('.js-voting-container').data('post-id') === data.answerid;
            $(this).toggleClass('d-none', !isAccepted);
        });
    }

    function postCommentAdd(data) {
        // this one will issue a get since comments are rendered based on user

        if ($('#comment-' + data.commentid).length != 0) return;

        StackExchange.comments.realtimeMessage(data.id);
    }

    function subscribeDirectlyToQuestions(sid, channel, test, callback) {
        var subscriptionName = sid + '-' + channel;

        subscribe(subscriptionName);

        ee.addListener(subscriptionName, function (data) {
            log('received (active) on ' + subscriptionName);
            var post = $.parseJSON(data);

            if (test && !test(post)) { return; }
            activeQuestionsUpdate(post, channel);
            if (callback) { callback(post); }
        });
    }

    function subscribeToActiveQuestions(sid, channel, noHighlightTags, requiredTags, formatDateShort, callback) {
        suppressedTagHighlights = noHighlightTags;
        formatShortDates = formatDateShort;

        subscribeDirectlyToQuestions(sid, channel, function (post) {

            // must contain the required tags
            if (requiredTags) {
                for (var i = 0; i < requiredTags.length; i++) {
                    if ($.inArray(requiredTags[i], post.tags) == -1)
                        return false;
                }
            }
            return true;

        }, callback);
    }

    // Splits a query into a group of queries based on "or" tags.
    // e.g. ['a', 'and', 'b', 'or', 'c', 'd'] -> [['a', 'b'], ['c', 'd']]
    function parseTagQuery(tagQuery) {
        var queries = [];
        var currentQuery = [];

        tagQuery.forEach(function (tag) {
            if (tag === 'or') {
                if (currentQuery.length > 0) {
                    queries.push(currentQuery);
                    currentQuery = [];
                }
            } else if (tag.length > 0 && tag !== 'and') {
                currentQuery.push(tag);
            }
        });

        if (currentQuery.length > 0) {
            queries.push(currentQuery);
        }
        return queries;
    }

    function subscribeToUQL(sid, sort, tagQuery, filters, suppressedTags) {

        var matchesFilters = function (post) {
            if (filters.noAnswers && !post.noAnswers) {
                log("ignoring because has answers");
                return false;
            }

            if (filters.hasBounty && !post.hasBounty) {
                log("ignoring because no bounty");
                return false;
            }
            return true;
        };
        var lastNonNegativeTag = function (subquery) {
            for (var i = subquery.length - 1; i >= 0; i--) {
                if (subquery[i][0] !== '-') {
                    return subquery[i];
                }
            }
            return null;
        };

        suppressedTagHighlights = suppressedTags;

        if (tagQuery.length === 0) {
            subscribeDirectlyToQuestions(sid, 'questions-' + sort, false, matchesFilters);
        } else {
            parseTagQuery(tagQuery).forEach(function (subquery) {
                var tag = lastNonNegativeTag(subquery);
                if (tag === null) { return; }

                var channel = 'questions-' + sort + '-tag-' + tag;

                subscribeDirectlyToQuestions(sid, channel, false, function (post) {
                    if (!matchesFilters(post)) { return false; }

                    // Check each tag in the subquery
                    for (var i = 0; i < subquery.length; i++) {
                        var tag = subquery[i];

                        if (tag[0] !== '-') {
                            // If positive, bail if it isn't in the tag.
                            if ($.inArray(tag, post.tags) === -1) {
                                log('ignoring because post does not contain ' + tag + ' in ' + channel);
                                return false;
                            }
                        } else {
                            var negativeTag = tag.substr(1);
                            // If negative, bail if it is in the tag.
                            if ($.inArray(negativeTag, post.tags) !== -1) {
                                log('ignoring because post contains ' + negativeTag + ' in ' + channel);
                                return false;
                            }
                        }
                    }

                    return true;
                });
            });
        }
    }

    function subscribeToCounts(sid) {
        subscribe(sid + '-qcnt-feed');
        ee.addListener(sid + '-qcnt-feed', function (data) {
            $('div#q-cnt').html(data);
        });

        subscribe(sid + '-evc-feed');
        ee.addListener(sid + '-evc-feed', function (data) {
            $('div#evc-cnt').html(data);
        });

        subscribe(sid + '-acnt-feed');
        ee.addListener(sid + '-acnt-feed', function (data) {
            $('div#a-cnt').html(data);
        });
    }

    function subscribeToReviewDashboard(sid) {
        var subscriptionName = sid + '-review-dashboard-update';
        subscribe(subscriptionName);

        ee.addListener(subscriptionName, function (data) {
            var reviewData = $.parseJSON(data);
            var dashboardRow = $('.dashboard-activity[data-review-task="' + reviewData.i + '"]');
            if (dashboardRow.find('.dashboard-user[data-user="' + reviewData.u + '"]').length == 0) {
                dashboardRow.find('.dashboard-user:nth-child(6)').remove();
                dashboardRow.css("overflow", "hidden")
                dashboardRow.children().css({ left: '-44px' });
                dashboardRow.prepend(reviewData.html).children().animate({ left: 0 }, function () { dashboardRow.css("overflow", "visible"); });
            }
        });
    }

    function subscribeToTopBarNotifications(sid) {
        if (StackExchange.options.user.accountId != null) {
            var subscriptionName = StackExchange.options.user.accountId + '-topbar';
            subscribe(subscriptionName);

            ee.addListener(subscriptionName, function (data) {
                StackExchange.topbar.handleRealtimeMessage(data);
            });
        }
    }

    function subscribeToReputationNotifications(sid) {
        if (StackExchange.options.user.accountId != null) {
            var subscriptionName = sid + '-' + StackExchange.options.user.userId + '-reputation';
            subscribe(subscriptionName);

            ee.addListener(subscriptionName, function (data) {
                updateReputation(data);
            });
        }
    }

    function postScoreUpdate(data) {
        var scoreToUpdate = $('.js-voting-container').filter(function () { return $(this).data('post-id') === data.id }).find('.js-vote-count');

        if (scoreToUpdate.data('value') === data.score) return;

        var normalized = StackExchange.vote.normalizePostScore(data.score);

        scoreToUpdate.data('value', data.score).text(normalized);

        if ($(':animated').length === 0) {
            scoreToUpdate.fadeTo('fast', 0.7)
                .fadeTo('fast', 1);
        }

        if (StackExchange.question.canViewVoteCounts()) {
            StackExchange.vote.bindFetchVoteCounts();
        }
    }

    function updateReputation(data) {

        var reputation = $('#hlinks .reputation-score, .links-container .reputation, .js-header-rep');

        if (reputation.text() == data.score) return;

        if ($(':animated').length == 0) {
            reputation.fadeTo('fast', 0.8)
                .fadeTo('fast', 1);
        }

        reputation.text(data).attr('title', __tr(["your reputation: $reputation$"], {reputation: data}, "en", []));
        reputation.trigger("reputationchange");
    }

    var newAnswerTab = function () {
        var acount = Object.keys(answersToShow).length;

        if (acount == 0) {
            $('.js-new-answer-activity').remove();
        }

        var div = $('<div class="new-answer-activity ta-center bar-sm mb16 js-new-answer-activity">').append($('<a class="d-block py8" href="#">').text(__tr(["$count$ new answer to this question","$count$ new answers to this question"], {count: acount}, "en", ["count"])));
        div.click(function () { StackExchange.realtime.expandAnswers(); });
        div.find('a').click(function (e) { e.stopPropagation(); StackExchange.realtime.expandAnswers(); return false;});
        return div;
    };

    function postAnswerAdd(post) {
        if ($('#answer-' + post.answerid).length != 0) return;

        answersToShow.push(post.answerid);

        if (StackExchange.cardiologist) {
            if (StackExchange.cardiologist.isHeartBeating()) {
                var newAnswers = StackExchange.helpers.DelayedReaction(showNewAnswerNotification, 5000);
                newAnswers.trigger();
            } else {
                showNewAnswerNotification();
            }
            StackExchange.cardiologist.notifiedOfNewAnswer();
        }
    }

    function showNewAnswerNotification() {
        $('.js-new-answer-activity').remove();
        $('#answers-header').prepend(newAnswerTab);
    }

    var reloadPosts = function (postIds, includeComments) {

        var foundPostIds = [];
        var existingPosts = {};

        $(postIds).each(function (_, postId) {

            var $element = $('.question[data-questionid=' + postId + '], .answer[data-answerid=' + postId + ']');

            if ($element.length > 0) {
                foundPostIds.push(+postId);
                existingPosts[+postId] = $element;
            }
        });

        if (foundPostIds.length === 0) {
            return $.Deferred().resolve(existingPosts);
        }

        var url = '/posts/ajax-load-realtime/{postIdsSemiColonDelimited}?title=true&includeComments={includeComments}'.formatUnicorn({
            postIdsSemiColonDelimited: foundPostIds.join(';'),
            includeComments: !!includeComments
        });
        return $.ajax({ type: 'GET', url: url, dataType: 'json' })
            .then(function (json) {
                var $html = $(json.Html);
                var tasks = $html.filter('.question, .answer').map(function () {
                    var $post = $(this);
                    var postId = +($post.data('questionid') || $post.data('answerid') || 0);
                    var $oldPost = existingPosts[postId];
                    return replaceIndividualPostContents($oldPost, $post, postId, includeComments);
                }).get();

                return $.when.apply($, tasks);
            })
            .then(function () {
                return existingPosts;
            });
    };

    var replaceIndividualPostContents = function ($oldPost, $newPost, postId, includeComments) {

        // html sent down is rendering of either ~/Views/Shared/ShowQuestion.cshtml or ~/Views/Shared/ShowAnswer.cshtml
        // note this means several top-level elements, e.g. <div class="question"> ... </div> <div class="question-status"> ... </div>

        var $oldBodyCell = $oldPost.find('.postcell, .answercell'),
            $newBodyCell = $newPost.find('.postcell, .answercell').css({ opacity: 0 }),
            isQuestion = $oldPost.hasClass('question'),
            isOnQuestionPage = $('body').hasClass('question-page'),
            $title = $('h1 a.question-hyperlink'),
            newTitle = $newPost.data('title'),
            hasTitleChanges = isQuestion && isOnQuestionPage && $.trim($title.text()) !== newTitle,
            $commentsList = $oldPost.find('.js-comments-list'),
            animationSpeed = 150;

        // we want to fade out all changing parts at the same time
        var fadeOut = function ($el) {
            return $el.animate({ opacity: 0 }, animationSpeed);
        };

        var fadeIn = function ($el) {
            return $el.animate({ opacity: 1 }, animationSpeed);
        };

        if (window.history && isOnQuestionPage) {
            var documentTitle = hasTitleChanges
                ? __tr(["$pageTitle$ - $siteName$"], {pageTitle: newTitle,siteName: StackExchange.options.site.name}, "en", [])
                : document.title;
            window.history.replaceState(window.history.state, documentTitle, '#' + postId);
        }

        // Fade out elements that will change
        return $.when(
            hasTitleChanges ? fadeOut($title) : true,
            includeComments ? fadeOut($commentsList) : true,
            fadeOut($oldBodyCell)
        ).then(function () {

            // Swap out elements that are changing

            $oldPost.prop('classList', $newPost.prop('classList'));

            if (hasTitleChanges) {
                $title.text(newTitle);
            }

            if (includeComments) {
                StackExchange.comments.replaceAll($oldPost, $newPost.find('.js-comment'));
            }

            $oldBodyCell.replaceWith($newBodyCell);

            styleCode();

            // Fade in elements that changed

            return $.when(
                hasTitleChanges ? fadeIn($title) : true,
                includeComments ? fadeIn($commentsList) : true,
                fadeIn($newBodyCell)
            );
        });
    };

    function postEdit(post) {
        // If there's already a "click to load edits" bar, don't show another one
        var div = $('.question[data-questionid=' + post.id + '], .answer[data-answerid=' + post.id + ']');
        if (div.find('.js-new-post-activity[data-postid=' + post.id + ']').length > 0) return;

        var notificationDiv = $('<div class="new-post-activity bar-sm ta-center mb16 js-new-post-activity" data-postid="' + post.id + '">').append($('<a class="d-block py8" href="#">').text(__tr(["An edit has been made to this post"], undefined, "en", [])));

        // If the Inline Editor is open, don't make the whole div clickable (only the "an edit has been made" part)
        var clickDivShouldReload = div.find('.inline-editor').length === 0;
        var func = function () {
            $('.js-new-post-activity[data-postid=' + post.id + ']').remove();
            if (clickDivShouldReload) {
                div.off('click', func);
            }
            if ($('#review-content').length === 0) {
                reloadPosts([post.id]);
            }
            $(document).trigger('refreshEdit', post.id);
        };
        if (clickDivShouldReload) { div.click(func); }
        notificationDiv.prependTo(div).find('a').click(function (e) {
            e.stopPropagation();
            func();
            return false;
        });
    }

    function expandAnswers() {

        $('#tabs').show();
        $('.js-new-answer-activity').remove();

        var $answersHeader = $('#answers #answers-header'),
            $answersText = $answersHeader.find('.answers-subheader h2'),
            answerCount = parseInt($answersText.text()) + answersToShow.length;

        if (isNaN(answerCount)) {
            answerCount = answersToShow.length;
        }

        $answersText.text(__tr(["$answerCount$ Answer","$answerCount$ Answers"], {answerCount: answerCount}, "en", ["answerCount"]));

        // fetch all posts at once
        $.ajax({
            url: '/posts/ajax-load-realtime/{postIdsSemiColonDelimited}'.formatUnicorn({ postIdsSemiColonDelimited: answersToShow.join(';') })
        }).done(function (data) {
            // we get lots of top-level elements down from the server - wrap so we can better operate on them
            var $answers = $('<div class="dno" />').append(data.Html);

            $answers.insertAfter($answersHeader).fadeIn(400, function () {
                $answers.removeClass("dno"); // now that it is visible, remove the contradictory "dno"
                styleCode();
                StackExchange.vote.init(data.VotesCastJson);

                $answers.find('.answer').each(function () {
                    StackExchange.comments.init({ post: $(this) });
                });
            });
        });

        StackExchange.question.bindSuggestedEditPopupLinks();
        updateRelativeDates();
        answersToShow = [];
    }

    var activeTab = function () {
        var qcount = Object.keys(activeToShow).length;
        updateTitle(qcount);
        var div = $('<div class="js-new-post-activity bg-black-150 bar-sm ta-center my8">').append($('<a class="s-btn d-block" href="#">').text(__tr(["$count$ question with new activity","$count$ questions with new activity"], {count: qcount}, "en", ["count"])));
        div.click(function () { StackExchange.realtime.expandActiveQuestions(); });
        div.find('a').click(function (e) { e.stopPropagation(); StackExchange.realtime.expandActiveQuestions(); return false; });
        return div;
    };

    function activeQuestionsUpdate(post, channel) {
        // don't update if there are matching ignored tags
        if (StackExchange.options.user.accountId != null && StackExchange.tagPreferences.isIgnored(post.tags))
            return;

        // The body will be fetched when we click to actually show them
        activeToShow[post.id] = { id: post.id, fetch: true, index: new Date().getTime(), siteid: post.siteid, channel: channel };

        $('.js-new-post-activity').remove();

        $('#question-mini-list, #questions')
            .prepend(activeTab);

        // tag-sponsorship fix
        if ($('.tag-sponsorship').length > 0) {
            $('#question-mini-list, #questions').css('margin-top', '0px');
        }
    }

    function sortedActiveQuestions(a, b) {
        if (a.index < b.index)
            return -1;
        if (a.index > b.index)
            return 1;
        return 0;
    }

    function expandActiveQuestions() {
        // copy the { id : question } object to an array for sorting
        var toSort = [];
        for (var active in activeToShow)
            if (activeToShow.hasOwnProperty(active))
                toSort.push(activeToShow[active]);

        if (toSort.length === 0) {
            return;
        }

        // Get only the last 50
        var sortedActiveToShow = toSort.sort(sortedActiveQuestions).slice(0, 50);

        // A single page will only have 1 of the active channels, so use the one from the first entry
        $.post('/posts/ajax-load-realtime-list/', { postIdsSemiColonDelimited: sortedActiveToShow.map(function (i) { return i.id; }).join(';'), channel: sortedActiveToShow[0].channel })
            .done(function (postDictionary) {
                // JavaScript is { "id" = "html", "id2": "html" }
                for (var q = 0; q < sortedActiveToShow.length; q++) {
                    var activeq = sortedActiveToShow[q];
                    activeq.body = postDictionary[activeq.id];
                    if (activeq.body) {
                        $('#question-summary-' + activeq.id).remove();
                        $(activeq.body).prependTo('#question-mini-list, #questions').hide().fadeIn();
                    }
                }

                updateTitle(0);

                // don't update if there are matching ignored tags
                if (StackExchange.options.user.accountId != null) {
                    StackExchange.tagPreferences.applyPrefs(true, suppressedTagHighlights);
                }

                updateRelativeDates();

                $('.js-new-post-activity').remove();
            });

        activeToShow = {};
    }

    function updateTitle(newcount) {
        var newtitle = document.title.replace(/^\(\d*\*?\) /, "");
        if (newcount > 0) {
            newtitle = "(" + newcount + ") " + newtitle;
        }
        // There is a bug in Chrome that causes the tab title not to be updated if it
        // changes at the same time the tab gains focus.
        // That's my interpretation of the behavior, anyway. And since 0.2 seconds
        // later it works, we'll just wait for a moment. Who cares, right?
        window.setTimeout(function () { $(document).attr("title", newtitle); }, 200);
    }

    function disconnectStaleConnection() {
        killed = true;
        StackExchange.notify.show(__tr(["Instant updates have been disabled due to inactivity "], undefined, "en", []) + '<a href=".">' + __tr(["refresh"], undefined, "en", []) + '</a>' + __tr([" to reconnect"], undefined, "en", []), 312);
        socket.dispose();
    }

    function updateRelativeDates() {
        var spans = $('span.relativetime, span.relativetime-clean');

        for (var i = 0; i < spans.length; i++) {
            if (spans[i].title) {
                var date = prettyDate(spans[i].title);
                if (date)
                    spans[i].innerHTML = date;
            }
        }
    }

    function prettyDate(rawTitle) {
        if (!rawTitle) return;

        // Extract the date and time from the front of the string.
        var match = rawTitle.match(/^(\d{4}-\d\d-\d\d) (\d\d:\d\d:\d\dZ)/);
        if (!match) return;

        // firefox requires ISO 8601 formatted dates
        var time = match[1] + "T" + match[2];

        var date = new Date(time),
            diff = (((new Date()).getTime() - date.getTime()) / 1000) + StackExchange.options.serverTimeOffsetSec,
            day_diff = Math.floor(diff / 86400);

        if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31)
            return;

        return day_diff == 0 && (
            diff < 2 && __tr(["just now"], undefined, "en", []) ||
            diff < 60 && (formatShortDates ?
                __tr(["$seconds$s ago","$seconds$s ago"], {seconds: Math.floor(diff)}, "en", ["seconds"]) :
                __tr(["$seconds$ sec ago","$seconds$ secs ago"], {seconds: Math.floor(diff)}, "en", ["seconds"])) ||
            diff < 120 && (formatShortDates ? __tr(["1m ago"], undefined, "en", []) : __tr(["1 min ago"], undefined, "en", [])) ||
            diff < 3600 && (formatShortDates ?
                __tr(["$minutes$m ago","$minutes$m ago"], {minutes: Math.floor(diff / 60)}, "en", ["minutes"]) :
                __tr(["$minutes$ min ago","$minutes$ mins ago"], {minutes: Math.floor(diff / 60)}, "en", ["minutes"])) ||
            diff < 7200 && (formatShortDates ? __tr(["1h ago"], undefined, "en", []) : __tr(["1 hour ago"], undefined, "en", [])) ||
            diff < 86400 && (formatShortDates ?
                __tr(["$hours$h ago","$hours$h ago"], {hours: Math.floor(diff / 3600)}, "en", ["hours"]) :
                __tr(["$hours$ hour ago","$hours$ hours ago"], {hours: Math.floor(diff / 3600)}, "en", ["hours"])));
    }

    return {
        init: init,
        log: log,
        simulate: simulate,
        expandActiveQuestions: expandActiveQuestions,
        expandAnswers: expandAnswers,
        subscribeToActiveQuestions: subscribeToActiveQuestions,
        subscribeToUQL: subscribeToUQL,

        subscribeToQuestion: subscribeToQuestion,
        unsubscribeToQuestion: unsubscribeToQuestion,
        pauseQuestionNotifications: pauseQuestionNotifications,

        subscribeToStagingGroundQuestion: subscribeToStagingGroundQuestion,

        subscribeToReputationNotifications: subscribeToReputationNotifications,
        updateRelativeDates: updateRelativeDates,
        subscribeToReviewDashboard: subscribeToReviewDashboard,
        subscribeToTopBarNotifications: subscribeToTopBarNotifications,
        subscribeToCounts: subscribeToCounts,
        genericSubscribe: genericSubscribe,
        genericUnsubscribe: genericUnsubscribe,

        reloadPosts: reloadPosts,
        debug: debug
        // NOTE helper for repeating realtime frames when testing realtime locally:
        //    Chrome Console> StackExchange.realtime.simulate(/*copy of body from chrome f12 tools > network > WS frame*/);
        // Example for questions/active view:
        // StackExchange.realtime.simulate({action:"4-questions-active",data:'{"id":"3435","siteid":4}'});
    };
})();



/***/ }),

/***/ "./_Scripts/PartialJS/full-common/00_import-js.ts":
/*!********************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/00_import-js.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./_Scripts/PartialJS/util.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



// this file is imported first by index.ts,
// so the JS files run before all the typescript files
// require.context is webpack magic. It means "please include this whole folder in the bundle"
(0,_util__WEBPACK_IMPORTED_MODULE_0__.importAll)(__webpack_require__("./_Scripts/LegacyJS/full-common sync (?<%21\\.mod)\\.js$"));
(0,_util__WEBPACK_IMPORTED_MODULE_0__.importAll)(__webpack_require__("./_Scripts/LegacyJS/full-common/controllers sync (?<%21\\.mod)\\.js$"));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/06_MagicPopup.ts":
/*!*********************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/06_MagicPopup.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



// http://www.youtube.com/watch?v=0p_1QSUsbsM
//
// options
//   .selector:     hovering elements matching this selector will trigger the popup
//   .getUrl:       a function that receives a single argument; a dom element. It's the element
//                  that was hovered. Should return the URL from where the popup content is AJAXed in.
//                  If it returns null, no popup will be shown
//   .id:           optional; the HTML element ID of the div in which the HTML will be wrapped
//   .className:    optional; the class names to add to the div in which the HTML will be wrapped
//   .cache:        optional; if true, contents from the same URL will only be loaded once; additional
//                  hovers will display this cached content.
//   .fade:         optional; if true, the popup fades in rather than expanding
//   .unclipped:    optional; if true, the popup will be allowed to overflow its container
//   .dismissDelay: optional; the number of milliseconds to wait before hiding the popup on mouse leave;
//                  defaults to 5ms
//   .renderInline: optional; if true, the popup will be added as a sibling to the triggering element in the DOM instead of adding it to the document body.
//                  This is useful for allowing keyboard navigation into the popup from the triggering element.
//                  defaults to true
//
// The following three functions (showing, shown, removed) get two arguments passed in:
// The original element, and a jQuery object containing the the menu element.
// In showing(), the menu will be in the top left of the page (IOW, calling .offset() on any child returns the child's
// position relative to the popup), so you can measure before returning the actual to-be-used position. In
// shown(), the menu is in its final position. In removed(), it's not attached to the DOM anymore.
///
//   .showing:   a function that will be called before the popup will be animated in. Should return
//               an object { left: pageX, top: pageY, additional: elements } saying where the popup should be shown,
//               and what additional dom elements (if any) should be considered part of the popup with regard to hovering.
//               Instead of `top`, you can pass `bottom` (with the obvious consequences)
//   .shown:     optional; a function that will be called when the popup is fully visible
//   .removed:   optional; a function that will be called when the popup has been removed. Guaranteed to be called between
//               two calls to showing()
StackExchange.helpers.MagicPopup = function MagicPopup(options) {
    var cancel, current, canceller, cancelled, cache = {};
    function appearMagically(element, html) {
        // don't show the popup if the target element has been removed from the DOM
        // https://stackoverflow.com/questions/3086068/how-do-i-check-whether-a-jquery-element-is-in-the-dom
        if (!$.contains(document.documentElement, element))
            return;
        if (options.predicate && !options.predicate(element))
            return;
        var jMenu = $("<div />").attr('id', options.id).addClass(options.className).html(html);
        var $lightbox = $('.lightbox, .lightbox-panel');
        var baselineZ = $lightbox.length > 0 ? +$lightbox.css('z-index') : 1000; // See https://meta.stackexchange.com/q/129465 and https://meta.stackoverflow.com/q/371275
        var jWrapper = $("<div />").css({
            position: "absolute",
            'z-index': baselineZ + 2,
            width: 1, height: 1,
            top: 0, left: 0
        });
        if (!options.unclipped) {
            jWrapper.css({ overflow: "hidden" });
        }
        if (options.renderInline || !options.hasOwnProperty('renderInline')) {
            //Ideally, all callers should switch to inline rendering for accessibility support (i.e. keyboard navigation)
            jWrapper.append(jMenu).insertAfter(element);
        }
        else {
            jWrapper.append(jMenu).appendTo("body");
        }
        // Unable to import MathJax. See:https://stackoverflow.com/a/71090542
        if (window.MathJax) {
            window.MathJax.Hub.Typeset(jMenu[0]);
        }
        var data = options.showing(element, jMenu);
        if (data) {
            var position = { left: data.left };
            if (data.hasOwnProperty("bottom")) {
                position.bottom = data.bottom;
                position.top = "auto";
            }
            else {
                position.top = data.top || 0;
            }
            var callback;
            if (options.shown) {
                callback = function () { options.shown(element, jMenu); };
            }
            jWrapper.css(position);
            var size = { height: jMenu.outerHeight() + 8, width: jMenu.outerWidth() + 8 };
            if (options.fade) {
                jWrapper.css(size).css('display', 'none').fadeIn(300, callback);
            }
            else {
                jWrapper.animate(size, 300, callback);
            }
            //make dismissable via 'esc'
            jWrapper.addClass("esc-remove magic-popup").on("popupClosing", e => {
                // preventDefault() tells the ESC handling code in bind_hidePopupsOnEscPressOrBgClick
                // that we'll remove it ourselves
                e.preventDefault();
                closePopup();
            });
        }
        cancel = function () {
            jWrapper.stop().remove();
            if (options.removed) {
                options.removed(element, jMenu);
            }
            canceller = null;
            cancel = null;
        };
        canceller = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.DelayedReaction)(cancel, options.dismissDelay || 5);
        var hoverElements = jWrapper;
        if (data && data.additional)
            hoverElements = hoverElements.add(...data.additional);
        //make sure we don't close the popup if the user moves their mouse over it
        //and make sure we close the popup if they hover out of the popup.
        hoverElements.hover(canceller.cancel, canceller.trigger);
        //do the same for keyboard navigation
        hoverElements.focusin(canceller.cancel);
        hoverElements.focusout(canceller.trigger);
    }
    var showDelayed = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.DelayedReaction)(function (url, element) {
        if (cancelled || !url)
            return;
        var def;
        if (options.cache && ("c_" + url in cache)) {
            def = $.Deferred().resolve(cache["c_" + url]);
        }
        else {
            def = $.ajax({
                type: 'GET',
                url: url,
                dataType: 'html'
            });
            if (options.cache)
                def.done(function (result) { cache["c_" + url] = result; });
        }
        def.done(function (result) {
            if (cancel)
                cancel();
            if (result == "")
                return;
            appearMagically(element, result);
        });
    }, 500);
    var openPopup = function () {
        if (canceller && this === current) {
            canceller.cancel();
            return;
        }
        current = this;
        showDelayed.trigger(options.getUrl(this), this);
        cancelled = false;
        return false;
    };
    var closePopup = function () {
        cancelled = true;
        showDelayed.cancel();
        if (canceller) {
            canceller.trigger();
        }
    };
    $(document).delegate(options.selector, {
        //handle mouse hover
        mouseenter: openPopup,
        mouseleave: closePopup,
        //handle keyboard navigation
        focusin: openPopup,
        focusout: closePopup
    });
};


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/38_MoreHotNetworkQuestions.ts":
/*!**********************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/38_MoreHotNetworkQuestions.ts ***!
  \**********************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
StackExchange.bindShowMoreHotNetworkQuestions = function () {
    let $hnq = $('#hot-network-questions');
    let $more = $hnq.find('.js-show-more');
    let $hidden = $hnq.find('.js-hidden');
    // nothing to do
    if (!$hnq.length || !$more.length || !$hidden.length) {
        return;
    }
    let mHeight = $('#mainbar').height();
    let sHeight = $('#sidebar').height() + 550; // allowance for optional ads in the sidebar
    // figure out how tall these links are
    $hidden.attr('style', 'visibility:hidden').removeClass('dno');
    let totalHeightHidden = 0;
    let hiddenHeights = [];
    $hidden.each((_, e) => {
        let h = $(e).height();
        hiddenHeights.push(h);
        totalHeightHidden += h;
    });
    let sHeightIfAllVisible = sHeight + totalHeightHidden;
    // everything fits!
    if (mHeight >= sHeightIfAllVisible) {
        // remove the more link
        $more.remove();
        // make everything actually visible
        $hidden.attr('style', '').show();
        return;
    }
    // determine what needs to be left hidden
    let makeVisible = [];
    let newSidebarHeight = sHeight;
    $hidden.each((i, e) => {
        let $e = $(e);
        let h = hiddenHeights[i];
        if (newSidebarHeight + h <= mHeight) {
            makeVisible.push($e);
            newSidebarHeight += h;
        }
    });
    // do all the updates at once, so we only thrash a little bit
    // re-hide everything
    $hidden.attr('style', '').addClass('dno');
    // show the ones we want to make visible now
    makeVisible.forEach(e => e.show());
    // bind the show more link
    $more.click(() => {
        $hidden.show();
        $more.remove();
        return false;
    });
};


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/46_ExternalEditor.ts":
/*!*************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/46_ExternalEditor.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _LegacyJS_constants_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../LegacyJS/constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



StackExchange.mockups = (function () {
    return { init: init };
    function init() {
        StackExchange.externalEditor.init({
            thingName: "mockup",
            getIframeUrl: function (oldImage) {
                let result = "/plugins/mockups/editor";
                if (oldImage)
                    result += "?edit=" + encodeURIComponent(oldImage);
                return result;
            },
            buttonTooltip: "UI wireframe",
            onShow: function (editorClosed) {
                window.addMockupToEditor = editorClosed;
            },
            onRemove: function () {
                window.addMockupToEditor = null;
            }
        });
    }
})();
StackExchange.schematics = (function () {
    ;
    return { init: init };
    function supportConfidence() {
        if (!window.postMessage)
            return 0 /* ConfidenceResult.NO */;
        // SVG check from Modernizer, https://github.com/Modernizr/Modernizr/blob/master/feature-detects/svg/inline.js
        const div = document.createElement('div');
        div.innerHTML = '<svg/>';
        const svgSupport = (div.firstChild && div.firstChild.namespaceURI) === 'http://www.w3.org/2000/svg';
        if (!svgSupport)
            return 0 /* ConfidenceResult.NO */;
        const UA = navigator.userAgent;
        if (/Firefox|Chrome/.test(UA))
            return 3 /* ConfidenceResult.YES */;
        if (/Apple/.test(navigator.vendor) || /Opera/.test(UA))
            return 2 /* ConfidenceResult.PROBABLY */;
        return 1 /* ConfidenceResult.MAYBE */;
    }
    function init() {
        let messageHandler;
        StackExchange.externalEditor.init({
            thingName: "schematic",
            getIframeUrl: function (oldImage) {
                let result = "/plugins/schematics/editor";
                if (oldImage)
                    result += "?edit=" + encodeURIComponent(oldImage);
                return result;
            },
            buttonTooltip: "Schematic",
            checkSupport: function () {
                const confidenceLevel = supportConfidence();
                switch (confidenceLevel) {
                    case 3 /* ConfidenceResult.YES */: return true;
                    case 2 /* ConfidenceResult.PROBABLY */: return confirm("Your browser is not officially supported by the schematics editor; however it has been reported to work. Launch the editor?");
                    case 1 /* ConfidenceResult.MAYBE */: return confirm("Your browser is not officially supported by the schematics editor; it may or may not work. Launch the editor anyway?");
                    default:
                    case 0 /* ConfidenceResult.NO */:
                        alert("Sorry, your browser does not support all the necessary features for the schematics editor.");
                        return false;
                }
            },
            onShow: function (editorClosed) {
                const loadingPopup = $("<div class='popup'>").css("z-index", 1111).text("Loading editor").appendTo("body").show().addSpinner({ marginLeft: 5 }).center({ dy: -200 });
                $("<div style='text-align:right;margin-top: 10px'>").append($("<button>cancel</button>").click(function () { loadingPopup.remove(); editorClosed(); })).appendTo(loadingPopup);
                messageHandler = function (evt) {
                    evt = evt.originalEvent;
                    if (evt.origin !== "https://www.circuitlab.com")
                        return;
                    if (!evt.data)
                        editorClosed(); // editor sends an empty message when the user cancels
                    const data = $.parseJSON(evt.data);
                    if (data && data.load === "success") {
                        loadingPopup.remove();
                        return;
                    }
                    if (!data || !(data.edit_url && data.image_url)) {
                        return; // whatever this message was, it was not for use
                    }
                    else {
                        data.fkey = StackExchange.options.user.fkey;
                        const popup = $("<div class='popup'>").css("z-index", 1111).appendTo("body").show();
                        const save = function () {
                            popup.text("Storing image").addSpinner({ marginLeft: 5 }).center();
                            $.post("/plugins/schematics/save", data).done(function (response) {
                                popup.remove();
                                editorClosed(response.img);
                            }).fail(function (response) {
                                if (response.status === 409) {
                                    let msg = "Storing aborted";
                                    if (response.responseText.length < 200)
                                        msg = response.responseText;
                                    popup.text(msg + ", will retry shortly").addSpinner({ marginLeft: 5 }).center();
                                    setTimeout(save, 10000);
                                }
                                else {
                                    popup.remove();
                                    alert("Failed to upload the schematic image.");
                                }
                            });
                        };
                        save();
                    }
                };
                $(window).on("message", messageHandler);
            },
            onRemove: function () {
                $(window).off("message", messageHandler);
            }
        });
    }
})();
StackExchange.externalEditor = (function () {
    return {
        init: init
    };
    // there's a lot of commonality between "things", so this will helpfully just look for the common HTML comment
    //   if just a string is passed - otherwise it'll just return the provide function
    function makeThingFinder(nameOrFunc) {
        if (typeof nameOrFunc === "function") {
            return nameOrFunc;
        }
        // from: https://stackoverflow.com/a/6969486/80572
        const cleanName = nameOrFunc.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regex = "<!-- Begin " + cleanName + "[^>]*? -->\\s*!\\[[^\\]]*\\]\\((https?://[^ )]+)[^)]*\\)\\s*<!-- End " + cleanName + " -->";
        return function thingFinder(markdown, textareaContent, sentinel, thingName, things) {
            return markdown.replace(new RegExp(regex, "g"), function (wholematch, thingPayload, offset) {
                const thing = {
                    payload: thingPayload.replace(/[^-A-Za-z0-9+&@#\/%?=~_|!:,.;\(\)]/g, ""),
                    pos: findThing(wholematch, textareaContent, offset),
                    len: wholematch.length
                };
                if (thing.pos === -1) { // this would be very weird -- probably a preConversion plugin that changed the relevant content
                    return wholematch;
                }
                things.push(thing);
                return wholematch + "\n\n" + sentinel + thingName + "-" + (things.length - 1) + "%";
            });
            function findThing(needle, haystack, posHint) {
                let found = -1, index = -1;
                while (true) {
                    index = haystack.indexOf(needle, index + 1);
                    if (index === -1)
                        break;
                    // It is entirely possible (though unlikely) that the same thing appears twice. Pick the
                    // one whose position is closer to the position that was passed to the preConversion hook,
                    // that should be a good enough guess except for pathological cases.
                    if (found < 0 || Math.abs(index - posHint) < Math.abs(index - found))
                        found = index;
                }
                return found;
            }
        };
    }
    function init(options) {
        // thingName is used in a regex, in a CSS class, in helptext, etc. In particular it has to be a single word.
        let thingName = options.thingName, thingFinder = makeThingFinder(options.thingFinder || options.thingName), // a function used to find and store the thing in markdown (for editing)
        getIframeUrl = options.getIframeUrl, getDivContent = options.getDivContent, buttonTooltip = options.buttonTooltip, onShow = options.onShow, // called with a editorClosed callback, which should be called with the URL of the new image, or nothing if the editor was cancelled
        onRemove = options.onRemove || function () { }, editLabel = options.editLabel || ("edit the above " + thingName), checkSupport = options.checkSupport; // a function; optional
        StackExchange.MarkdownEditor.creationCallbacks.add(prepareWmd);
        function prepareWmd(editor, postfix) {
            $('<style type="text/css"> .wmd-' + thingName + '-button span { background-position: 0 0; } .wmd-' + thingName + '-button:hover span { background-position: 0 -40px; }</style>)')
                .appendTo("head");
            let sentinel, things, ieSelection, hooks = editor.getConverter().hooks, jTextArea = $("#wmd-input" + postfix);
            // Update cursor so start and end are same when selected text is deleted.
            // This prevents cursor `removeCount` miscalculation in `showEditor()`.
            // see https://meta.stackoverflow.com/questions/350210/snippet-insertion-corrupts-content
            jTextArea.on('keyup', function (e) {
                const key = e.keyCode || e.charCode;
                if (key === 8 || key === 46) {
                    const start = jTextArea.caret().start;
                    jTextArea.caret(start, start);
                }
            });
            hooks.chain("preConversion", function (markdown) {
                const percentCount = (markdown.match(/%/g) || []).length;
                // this may be different from markdown if we're not the first plugin in the preConversion chain
                // see https://electronics.meta.stackexchange.com/q/2988
                const textareaContent = jTextArea.length ? jTextArea[0].value || "" : "";
                // One percent character more than the whole markdown source contains,
                // so we don't have collisions.
                sentinel = new Array(percentCount + 2).join("%");
                things = [];
                return thingFinder(markdown, textareaContent, sentinel, thingName, things);
            });
            hooks.chain("postConversion", function (html) {
                return html.replace(new RegExp(sentinel + thingName + "-(\\d+)%", "g"), function (_, id) {
                    return "<sup><a href='#' class='edit-" + thingName + "' data-id='" + id + "'>" + editLabel + "</a></sup>";
                });
            });
            function showEditor(oldThing) {
                let cursor = ieSelection || jTextArea.caret(), markdown = jTextArea[0].value || "", // note we're not using jQuery's .val() here -- it removes the \r (from IE's \r\n), which causes the selection to point to the wrong part of the string
                lightbox, insertAt = oldThing ? oldThing.pos : cursor.start, removeCount = oldThing ? oldThing.len : cursor.end - cursor.start, preMarkdown = markdown.substring(0, insertAt), postMarkdown = markdown.substring(insertAt + removeCount);
                ieSelection = null;
                let iframeOrDiv = null;
                // This will be called in a zero-timeout, since it's called from within the IFRAME,
                // thus calling it immediately (and hence removing the IFRAME) causes an ugly
                // "request cancelled" in the console.
                function removeEditor() {
                    StackExchange.helpers.closePopups(iframeOrDiv.add(lightbox));
                    onRemove();
                }
                const editorClosed = function (newImageUrl, customRenderCode) {
                    if (!newImageUrl) {
                        setTimeout(removeEditor, 0);
                        jTextArea.focus();
                        return;
                    }
                    StackExchange.navPrevention.start();
                    let thing = customRenderCode === undefined ? makeThingMarkdown(newImageUrl) : customRenderCode, preTrimmed = preMarkdown.replace(/(?:\r\n|\r|\n){1,2}$/, ""), newMarkdown = preTrimmed + thing + postMarkdown.replace(/^(?:\r\n|\r|\n){1,2}/, ""), newCursorPos = cursor.start + thing.length - preMarkdown.length + preTrimmed.length;
                    setTimeout(function () {
                        editor.textOperation(function () {
                            jTextArea.val(newMarkdown).focus().caret(newCursorPos, newCursorPos);
                        });
                        removeEditor();
                    }, 0);
                };
                // URL or Content
                if (getIframeUrl) {
                    const iframeUrl = getIframeUrl(oldThing ? oldThing.payload : null);
                    iframeOrDiv = $('<iframe>', { src: iframeUrl });
                }
                else if (getDivContent) {
                    const divContent = getDivContent(oldThing ? oldThing.payload : null);
                    iframeOrDiv = $(divContent);
                }
                iframeOrDiv.addClass("esc-remove").css({ position: 'fixed', top: '2.5%', left: '2.5%', width: '95%', height: '95%', background: 'white', 'z-index': 1001 });
                $('body').loadPopup({
                    html: iframeOrDiv,
                    target: $('body'),
                    lightbox: true
                }).done(function () {
                    // Allows the resize event for various integrations to fire
                    $(window).resize();
                    onShow(editorClosed);
                });
            }
            const NOTOUCH = "The " + thingName + " editor does not support touch devices.";
            let touched = false;
            $("#wmd-preview" + postfix).on("touchend", function () { touched = true; }).on("click", "a.edit-" + thingName, function (evt) {
                if (touched) {
                    alert(NOTOUCH);
                    touched = false;
                    return false;
                }
                touched = false;
                if (!checkSupport || checkSupport()) {
                    showEditor(things[$(evt.target).attr("data-id")]);
                }
                return false;
            });
            $("#wmd-input" + postfix).keyup(function (evt) {
                if (evt.shiftKey || evt.altKey || evt.metaKey || !evt.ctrlKey || evt.which !== _LegacyJS_constants_mod__WEBPACK_IMPORTED_MODULE_0__.KEY_CODE.M) // Ctrl-M
                    return;
                if (!checkSupport || checkSupport())
                    showEditor();
            });
            // this has to be in nextTick, since the buttons are only created in editor.run(), which is called *after* the creation callbacks
            setTimeout(function () {
                const imageButton = $("#wmd-image-button" + postfix);
                const li = $("<li class='wmd-button wmd-" + thingName + "-button' id='wmd-" + thingName + "-button" + postfix + "' title='" + buttonTooltip + " Ctrl-M'>")
                    .insertAfter(imageButton);
                let touched = false;
                $("<span>").appendTo(li).on("touchend", function () { touched = true; }).click(function () {
                    if (touched) {
                        alert(NOTOUCH);
                        touched = false;
                        return;
                    }
                    touched = false;
                    if (!checkSupport || checkSupport())
                        showEditor();
                });
            }, 0);
        } // end prepareWmd
        function makeThingMarkdown(imageUrl) {
            return ("\n\n<!-- Begin {THING}: In order to preserve an editable {THING}, please\n     don't edit this section directly.\n     Click the \"edit\" link below the image in the preview instead. -->\n\n" +
                "![{THING}](" + imageUrl + ")\n\n<!-- End {THING} -->\n\n").replace(/{THING}/g, thingName);
        }
    } // end init
})();


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/47_SnippetJavascript.ts":
/*!****************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/47_SnippetJavascript.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _stackoverflow_stacks_icons_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stackoverflow/stacks-icons/icons */ "./node_modules/@stackoverflow/stacks-icons/dist/icons.js");
/* harmony import */ var _Shared_svg_utils_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Shared/svg-utils.mod */ "./_Scripts/Shared/svg-utils.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});




(function ($, window) {
    if (!StackExchange.settings || !StackExchange.settings.snippets) {
        return;
    }
    let codeHasChanged = false;
    const _renderDomain = StackExchange.settings.snippets.renderDomain;
    let editorInnerHtml = null;
    const loadEditorInnerHtml = function () {
        if (!editorInnerHtml) {
            return $.ajax("/snippets/editor-ui", {
                success: function (data) {
                    editorInnerHtml = data;
                }
            });
        }
        else {
            return $.when();
        }
    };
    function makeDiv(clazz) {
        return $('<div>').addClass(clazz);
    }
    let lastId = 1;
    function nextId() {
        const name = "sif" + lastId;
        lastId++;
        return name;
    }
    function makeIFrame() {
        return $('<iframe>').attr({
            name: nextId(),
            sandbox: "allow-forms allow-modals allow-scripts",
            class: "snippet-box-edit snippet-box-result",
            frameBorder: 0
        });
    }
    function makeCodeblockOverridePre(l) {
        return $('<pre>').addClass("prettyprint-override lang-" + l + " snippet-code-" + l);
    }
    function makeAnchor(text) {
        return $('<a>').text(text);
    }
    function makeTextArea(name, val) {
        return $('<textarea>').attr("name", name).val(val);
    }
    function makeForm(action, method, target) {
        return $('<form>').css("display", "none").attr({
            action: action,
            method: method,
            target: target
        });
    }
    function makeTextInput(name, val) {
        return $('<input>').attr({
            type: "text",
            name: name,
            value: val
        });
    }
    function makeButton() {
        return $('<button type="button" class="s-btn">');
    }
    function makeCode(text) {
        return $('<code>').text(text);
    }
    function makeSnippet($container, options) {
        options = options || {};
        $container.each(function () {
            const elem = $(this);
            // Check if exists
            let snippet = elem.data('_snippet');
            if (!snippet) {
                const isEditor = options.markdownPluginMode;
                snippet = isEditor ? SnippetEditor() : Snippet();
                if (isEditor) {
                    const initEditor = function () {
                        if (!snippet)
                            return;
                        // known type now
                        snippet.setUIInnerHtml(editorInnerHtml);
                        // Generate and append to elem
                        snippet.generate(elem);
                        // Always initially resize
                        snippet.resize();
                        // Resize when the window resizes
                        $(window).resize(function () {
                            if (!snippet)
                                return;
                            snippet.resize();
                        });
                        // Store
                        elem.data('_snippet', snippet);
                        // state
                        if (options.state) {
                            snippet.load(options.state);
                        }
                    };
                    // Lazy load the code mirror stuff
                    StackExchange.using("snippetsJsCodeMirror", function () {
                        // this has to be called in the next tick (even if the code mirror stuff is already loaded)
                        // otherwise we screw up the order in which event handlers are attached and stuff from loadPopup overrides custom ones
                        setTimeout(function () {
                            loadEditorInnerHtml().then(initEditor);
                        }, 1);
                    });
                }
                else {
                    // Generate and append to elem
                    snippet.generate(elem);
                    // Store
                    elem.data('_snippet', snippet);
                    // state
                    if (options.state) {
                        snippet.load(options.state);
                    }
                }
            }
        });
    }
    function SnippetEditor() {
        const _state = {
            html: null,
            css: null,
            js: null,
            console: true,
            hide: false,
            babel: null
        };
        let _snip = null;
        let _jQuerySelect = null;
        let _d3Select = null;
        let _knockoutSelect = null;
        let _angularJSSelect = null;
        let _vueJSSelect = null;
        let _reactJSSelect = null;
        let _reactDomJSSelect = null;
        let _hide = false;
        let _console = true;
        let _babel = null;
        let _boxHtml = null;
        let _boxCss = null;
        let _boxJs = null;
        let _boxResultTemplate = null;
        let _boxResult = null;
        let _codeMirrorHtml = null;
        let _codeMirrorCss = null;
        let _codeMirrorJs = null;
        let _uiInnerHtml = null;
        function setUIInnerHtml(uiInnerHtml) {
            _uiInnerHtml = uiInnerHtml;
        }
        function registerExternalLibChange(select, inclusionCodeOrFn, codeMirrorTarget) {
            const replaceFn = typeof inclusionCodeOrFn === "function"
                ? inclusionCodeOrFn
                : function (version, file) { return inclusionCodeOrFn.replace(/\*version\*/g, version).replace(/\*file\*/g, file); };
            // good ol' bobince: https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711
            const libraryMatchPattern = replaceFn("##version##", "##file##")
                .replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
                .replace("cdnjs\\.cloudflare\\.com", "(?:cdnjs\\.cloudflare\\.com|ajax\\.googleapis\\.com)") // recognize google CDN paths
                .replace(/##version##/g, "(.*?)").replace(/##file##/g, "(.*?)");
            select.change(function () {
                let version = $(this).val().split(":"), file = version.length > 1 ? version[1] : "";
                version = version[0];
                let current = codeMirrorTarget.getValue();
                // First see if current line exists
                let found = false;
                const selectedVersion = version === "" ? "" : replaceFn(version, file);
                current = current.replace(new RegExp(libraryMatchPattern, "g"), function () {
                    found = true;
                    return selectedVersion;
                });
                current = current.trim();
                // Exists, replace
                if (found) {
                    codeMirrorTarget.setValue(current);
                    return;
                }
                if (version !== "") {
                    // New, add to top
                    codeMirrorTarget.setValue(selectedVersion + "\n" + current);
                    codeMirrorTarget.save();
                }
            });
            let updateTimer;
            codeMirrorTarget.on('change', function () {
                window.clearTimeout(updateTimer);
                updateTimer = window.setTimeout(UpdateSelectedLibrary, 1000);
            });
            function UpdateSelectedLibrary() {
                const current = codeMirrorTarget.getValue();
                const matches = current.match(libraryMatchPattern);
                if (matches && matches.length > 2) {
                    select.val(matches[1] + ":" + matches[2]);
                }
                else {
                    select.val("");
                }
            }
        }
        function generate(target) {
            if (_snip) {
                return _snip;
            }
            _snip = $(_uiInnerHtml);
            //Close button
            $(_snip).find("#snpte-close-button").click(function (e) {
                StackExchange.helpers.closePopups($(this).closest('.snippet-modal'), 'esc'); // same as Esc key handling, we want a confirmation
                e.preventDefault();
                return false;
            });
            //External library selectors
            _jQuerySelect = _snip.find("#snpte-jquery-select");
            _d3Select = _snip.find("#snpte-d3-select");
            _knockoutSelect = _snip.find("#snpte-knockout-select");
            _angularJSSelect = _snip.find("#snpte-angular-select");
            _vueJSSelect = _snip.find("#snpte-vue-select");
            _reactJSSelect = _snip.find("#snpte-react-select");
            _reactDomJSSelect = _snip.find("#snpte-react-dom-select");
            //Show console and hide by default checkboxes
            _hide = _snip.find("#snpte-hide-snippet");
            _console = _snip.find("#snpte-show-console");
            _babel = _snip.find("#snpte-use-babel");
            //Run, Tidy, Insert, Reset buttons
            _snip.find("#snpte-button-run").click(function () {
                run();
            });
            _snip.find("#snpte-button-tidy").click(function () {
                _codeMirrorHtml.beautify();
                _codeMirrorCss.beautify();
                _codeMirrorJs.beautify();
            });
            _snip.find("#snpte-button-insert").click(function () {
                StackExchange.helpers.closePopups($('.snippet-modal')); // triggers popupClose, which saves stuff
            });
            _snip.find("#snpte-button-reset").click(function () {
                clear();
            });
            // Add to target
            target.empty().append(_snip);
            // Code mirror the text areas
            _boxHtml = _snip.find("#snpte-box-edit-html");
            _boxCss = _snip.find("#snpte-box-edit-css");
            _boxJs = _snip.find("#snpte-box-edit-js");
            _boxResult = _snip.find("#snpte-box-edit-result");
            _boxResultTemplate = _boxResult.clone(); // keep a pristine result box around for reseting
            // Make sure indentation shortcuts work as expected
            CodeMirror.commands.insertTab = CodeMirror.commands.insertSoftTab; // we want spaces instead of tabs...
            CodeMirror.keyMap.default["Shift-Tab"] = "indentLess";
            CodeMirror.commands.indentAuto = function (cm) { cm.beautify(); }; // just in case any weird/custom keyboard shortcut ever calls this, make it behave like the tidy button
            function setupCodeMirror(element, mode, beautifier) {
                const cm = CodeMirror.fromTextArea(element, {
                    electricChars: false,
                    smartIndent: false,
                    lineNumbers: true,
                    lineWrapping: true,
                    mode: mode,
                    tabSize: 2,
                    indentWithTabs: false,
                    readOnly: false
                });
                // Wire up change-save to keep textarea in sync
                // this will fire on EVERY KEYSTROKE - that makes typing pretty jerky if there's a lot of text to sync
                // so delay sync until there's a short break in typing
                let codeSyncTimer;
                cm.on('change', function () {
                    codeHasChanged = true;
                    window.clearTimeout(codeSyncTimer);
                    codeSyncTimer = window.setTimeout(function () {
                        cm.save();
                    }, 500);
                });
                cm.beautify = function () {
                    // gotta trim to fix CSS spacing bug
                    cm.setValue(beautifier(cm.getValue().trim(), {
                        'indent_size': cm.options.tabSize,
                        'indent_char': ' ',
                        'unformatted': [
                            // js-beautify doesn't format select tags by default. https://github.com/beautify-web/js-beautify/issues/1097
                            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
                            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
                            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
                            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', 'small',
                            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
                            'video', 'wbr', 'text', 'acronym', 'address', 'big', 'dt', 'ins', 'strike', 'tt',
                        ],
                    }));
                };
                return cm;
            }
            function makeScriptTag(libName) {
                return '<script src="https://cdnjs.cloudflare.com/ajax/libs/' + libName + '/*version*/*file*"></script>';
            }
            _codeMirrorHtml = setupCodeMirror(_boxHtml[0], "htmlmixed", html_beautify);
            _codeMirrorCss = setupCodeMirror(_boxCss[0], "css", css_beautify);
            _codeMirrorJs = setupCodeMirror(_boxJs[0], "javascript", js_beautify);
            /*********************************
             * BEGIN EXTERNAL LIBRARY INSERTS
             *********************************/
            // jQuery
            registerExternalLibChange(_jQuerySelect, makeScriptTag('jquery'), _codeMirrorHtml);
            // d3
            registerExternalLibChange(_d3Select, makeScriptTag('d3'), _codeMirrorHtml);
            // Knockout
            registerExternalLibChange(_knockoutSelect, makeScriptTag('knockout'), _codeMirrorHtml);
            // AngularJS
            registerExternalLibChange(_angularJSSelect, makeScriptTag('angular.js'), _codeMirrorHtml);
            // VueJS
            registerExternalLibChange(_vueJSSelect, makeScriptTag('vue'), _codeMirrorHtml);
            // ReactJS
            registerExternalLibChange(_reactJSSelect, function (version, file) {
                const domVer = (_reactDomJSSelect.find("option[value^='" + version + "']").attr("value") || "").split(":");
                const domFile = domVer[1] || file;
                return '<script src="https://cdnjs.cloudflare.com/ajax/libs/react/' + version + '/' + file + '"></script>\n' +
                    '<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/' + version + '/' + domFile + '"></script>';
            }, _codeMirrorHtml);
            // External Library
            _snip.find("#snpte-button-extlib").click(function () {
                const url = prompt(__tr(["Please enter the URL of an external JS or CSS file"], undefined, "en", []));
                if (url == null || url == "" || url.trim() == "") {
                    return;
                }
                const current = _codeMirrorHtml.getValue();
                if (validate(url, ".css")) {
                    const link = '<link href="' + url + '" rel="stylesheet"/>';
                    _codeMirrorHtml.setValue(link + "\n" + current);
                }
                else if (validate(url, ".js")) {
                    const link = '<script src="' + url + '"></script>';
                    _codeMirrorHtml.setValue(link + "\n" + current);
                }
                else {
                    alert(__tr(["Sorry, but that resource is invalid. Resources must begin with http:// or https:// and allowed extensions are: .css, .js"], undefined, "en", []));
                }
                function validate(fileName, extension) {
                    if (fileName.length < extension.length) {
                        return false;
                    }
                    fileName = fileName.toLowerCase();
                    if (fileName.indexOf("https://") != 0 && fileName.indexOf("http://") != 0 && fileName.indexOf("//") != 0) {
                        return false;
                    }
                    if (fileName.substr(fileName.length - extension.length, extension.length).toLowerCase() == extension.toLowerCase()) {
                        return true;
                    }
                    return false;
                }
            });
            /*********************************
             * END EXTERNAL LIBRARY INSERTS
             *********************************/
            // Focus and blur effects
            $.each([_codeMirrorHtml, _codeMirrorCss, _codeMirrorJs], function (_, item) {
                item.on("focus", function () { $(item.getInputField()).parent().parent().parent().children(".js-name").hide(); });
                item.on("blur", function () { $(item.getInputField()).parent().parent().parent().children(".js-name").show(); });
            });
        }
        function run() {
            // Sync boxes
            save();
            // Using sandboxed iframe
            writeResult();
        }
        function load(state) {
            // Update displays
            const html = state.html;
            const css = state.css;
            const js = state.js;
            const console = state.console;
            const hide = state.hide;
            const babel = state.babel;
            if (html != null) {
                _state.html = html;
                _boxHtml.val(html);
            }
            if (css != null) {
                _state.css = css;
                _boxCss.val(css);
            }
            if (js != null) {
                _state.js = js;
                _boxJs.val(js);
            }
            if (console != null) {
                _state.console = console;
                if (console === false) {
                    _console.prop("checked", console);
                }
            }
            if (hide) {
                _state.hide = hide;
                _hide.prop("checked", true);
            }
            if (babel) {
                _state.babel = babel;
                _babel.prop("checked", true);
            }
            // Update code mirrors
            _codeMirrorHtml.setValue(html);
            _codeMirrorCss.setValue(css);
            _codeMirrorJs.setValue(js);
            codeHasChanged = false;
        }
        function clear() {
            _boxHtml.val('');
            _boxCss.val('');
            _boxJs.val('');
            _jQuerySelect.val('');
            _d3Select.val('');
            _knockoutSelect.val('');
            _angularJSSelect.val('');
            _vueJSSelect.val('');
            _reactJSSelect.val('');
            _console.prop("checked", true);
            _hide.prop("checked", false);
            _babel.prop("checked", false);
            // Clear the iframe
            let prepend = "";
            if (_renderDomain) {
                prepend = "//" + _renderDomain;
            }
            resetBoxResult();
            const action = prepend + "/js";
            const form = makeForm(action, "GET", _boxResult.attr("name"))
                .appendTo('body');
            form.submit();
            // Clear
            _codeMirrorHtml.setValue('');
            _codeMirrorCss.setValue('');
            _codeMirrorJs.setValue('');
        }
        function save() {
            _state.html = _boxHtml.val();
            _state.css = _boxCss.val();
            _state.js = _boxJs.val();
            _state.console = _console.prop("checked");
            _state.hide = _hide.prop("checked");
            _state.babel = _babel.prop("checked");
            return _state;
        }
        function writeResult() {
            const css = _state.css;
            const js = _state.js;
            const html = _state.html;
            const console = _state.console;
            const babel = _state.babel;
            if (css == '' && js == '' && html == '') {
                return;
            }
            let prepend = "";
            if (_renderDomain) {
                prepend = "//" + _renderDomain;
            }
            // we need a fresh iframe each time
            resetBoxResult();
            const action = prepend + "/js";
            const form = makeForm(action, "POST", _boxResult.attr("name"));
            makeTextArea("js", js).appendTo(form);
            makeTextArea("css", css).appendTo(form);
            makeTextArea("html", html).appendTo(form);
            makeTextInput("console", "" + (console === true)).appendTo(form);
            makeTextInput("babel", "" + (babel === true)).appendTo(form);
            form.appendTo('body');
            form.submit().remove();
        }
        function resetBoxResult() {
            if (!_boxResultTemplate) {
                throw "No template available for result destination";
            }
            if (!_boxResult) {
                throw "Cannot insert new result destination";
            }
            const $newBoxResult = _boxResultTemplate.clone();
            _boxResult.replaceWith($newBoxResult);
            _boxResult = $newBoxResult;
        }
        function resize() {
            const valueOfCodeHasChanged = codeHasChanged;
            _codeMirrorHtml.refresh();
            _codeMirrorCss.refresh();
            _codeMirrorJs.refresh();
            codeHasChanged = valueOfCodeHasChanged;
        }
        return {
            setUIInnerHtml: setUIInnerHtml,
            resize: resize,
            writeResult: writeResult,
            save: save,
            clear: clear,
            load: load,
            run: run,
            generate: generate,
            registerExternalLibChange: registerExternalLibChange
        };
    }
    function Snippet() {
        const _state = {
            html: null,
            css: null,
            js: null,
            console: false,
            hide: false,
            babel: null
        };
        let _snip = null;
        let _results = null;
        let _boxResult = null;
        let _expandedSnippet = null;
        function generate(target) {
            let buttonExpand = null;
            if (_snip) {
                return _snip;
            }
            _expandedSnippet = null;
            _boxResult = makeIFrame();
            _snip = true;
            // Add run, hidden, copy results to target
            const buttonRun = makeButton().addClass('s-btn__filled').append((0,_Shared_svg_utils_mod__WEBPACK_IMPORTED_MODULE_0__.createSvgElement)(_stackoverflow_stacks_icons_icons__WEBPACK_IMPORTED_MODULE_1__.IconPlay), $('<span>').text(" " + __tr(["Run code snippet"], undefined, "en", []))).click(function () {
                run();
                buttonExpand.hide();
            });
            const buttonHide = makeButton().addClass('hideResults').text(__tr(["Hide results"], undefined, "en", [])).click(function () {
                hide();
                buttonExpand.show();
            });
            buttonHide.hide();
            buttonExpand = makeDiv("popout-code").append(makeAnchor(__tr(["Expand snippet"], undefined, "en", [])).addClass("snippet-expand-link"))
                .click(function () {
                const expandedSnippet = _expandedSnippet;
                if (expandedSnippet) {
                    const snippetContainer = expandedSnippet.element;
                    snippetContainer.removeClass("expanded-snippet");
                    snippetContainer.find(".snippet-expand-link").text(__tr(["Expand snippet"], undefined, "en", []));
                    snippetContainer.find(".snippet-show-link, .snippet-show-link-chevron").show();
                    const expandedSnippetParent = expandedSnippet.parent;
                    const expandedSnippetParentChildren = expandedSnippetParent.children();
                    if (expandedSnippetParentChildren.length) {
                        $(expandedSnippetParentChildren[expandedSnippet.indexWithinParent])
                            .before(snippetContainer);
                    }
                    else {
                        $(expandedSnippetParent).append(snippetContainer);
                    }
                    _expandedSnippet = null;
                    $(".topbar, .container, .js-top-bar, #footer").show();
                    buttonCopy.show();
                    $(window).scrollTop(pageOffset);
                }
                else {
                    pageOffset = $(window).scrollTop();
                    const snippetContainer = $(this).closest(".snippet");
                    _expandedSnippet = {
                        element: snippetContainer,
                        indexWithinParent: snippetContainer.index(),
                        parent: snippetContainer.parent()
                    };
                    snippetContainer.addClass("expanded-snippet");
                    snippetContainer.find(".snippet-expand-link").text(__tr(["Return to post"], undefined, "en", []));
                    snippetContainer.find(".snippet-show-link, .snippet-show-link-chevron").hide();
                    $(".topbar, .container, .js-top-bar, #footer").hide();
                    $("body").append(snippetContainer);
                    buttonCopy.hide();
                }
            });
            const buttonCopy = $('<input class="copySnippet s-btn s-btn__outlined" type="button">').click(function () {
                // Click the "Add Another Answer" or "Answer Your Own Question" button
                const showEditorButton = $("#show-editor-button");
                const markdownTextarea = $("#post-editor").find("textarea.wmd-input");
                if (showEditorButton.is(":visible")) {
                    const showEditorButtonTop = showEditorButton.offset().top;
                    $("html").animate({ scrollTop: showEditorButtonTop - 60 });
                    $("body").animate({ scrollTop: showEditorButtonTop - 60 }, {
                        complete: function () {
                            showEditorButton.children("input").click();
                        }
                    });
                }
                else {
                    // Scroll to editor
                    const editorTop = markdownTextarea.offset().top;
                    $("html, body").animate({ scrollTop: editorTop - 60 });
                }
                const markdown = markdownGenerator(_state);
                markdownTextarea.val(markdownTextarea.val() + "\n\n" + markdown);
                // Refresh preview with new code
                StackExchange.MarkdownEditor.refreshAllPreviews();
            });
            buttonCopy.val(__tr(["Copy snippet to answer"], undefined, "en", []));
            const runDiv = makeDiv("snippet-ctas").append(buttonRun, buttonCopy, buttonHide);
            runDiv.append(buttonExpand);
            _results = makeDiv("snippet-result-code")
                .append(_boxResult)
                .hide();
            const resultsWrapperDiv = makeDiv("snippet-result").append(runDiv, _results);
            target.append(resultsWrapperDiv);
            return _snip;
        }
        function run() {
            // always start fresh
            if (_boxResult) {
                _boxResult.remove();
            }
            _boxResult = makeIFrame();
            _results.append(_boxResult);
            if (_boxResult.parent().is(":hidden")) {
                _boxResult.closest(".snippet-result").find(".hideResults").css("display", "");
                _boxResult.parent().slideDown(200, function () {
                    if (_expandedSnippet)
                        return;
                    const popout = makeDiv("popout").append(makeAnchor(__tr(["Full page"], undefined, "en", [])));
                    const popin = makeDiv("popin").append(makeAnchor(__tr(["Close"], undefined, "en", []))).hide();
                    popout.click(function () {
                        _boxResult.data("_style", _boxResult.attr("style"));
                        _boxResult.css({ position: "fixed", top: 0, left: 0, width: "100%", height: "100%", "background-color": "#FFFFFF", "z-index": 9000 });
                        _boxResult.parent().css("position", "");
                        $(this).hide();
                        popin.show();
                        $("body").css("overflow", "hidden");
                    });
                    popin.click(function () {
                        _boxResult.removeAttr("style");
                        _boxResult.attr("style", _boxResult.data("_style"));
                        _boxResult.parent().css("position", "relative");
                        $(this).hide();
                        popout.show();
                        $("body").css("overflow", "");
                    });
                    $(this).append(popout, popin);
                });
            }
            // Using sandboxed iframe
            writeResult();
        }
        function hide() {
            const boxResultParent = _boxResult.parent();
            if (boxResultParent.is(":visible")) {
                _boxResult.closest(".snippet-result").find(".hideResults").hide();
                boxResultParent.children(".popout, .popin").remove();
                boxResultParent.slideUp(200, function () {
                    $(this).hide();
                    // Delete it
                    _boxResult.remove();
                    _boxResult = null;
                });
            }
        }
        function load(state) {
            const css = state.css;
            const js = state.js;
            const html = state.html;
            const console = state.console;
            const hide = state.hide;
            const babel = state.babel;
            if (css != null) {
                _state.css = css;
            }
            if (js != null) {
                _state.js = js;
            }
            if (html != null) {
                _state.html = html;
            }
            if (console) {
                _state.console = console;
            }
            if (hide) {
                _state.hide = hide;
            }
            if (babel) {
                _state.babel = babel;
            }
        }
        function writeResult() {
            const css = _state.css;
            const js = _state.js;
            const html = _state.html;
            const console = _state.console;
            const babel = _state.babel;
            if (css == '' && js == '' && html == '') {
                return;
            }
            var prepend = "";
            if (_renderDomain) {
                prepend = "//" + _renderDomain;
            }
            const action = prepend + "/js";
            const form = makeForm(action, "POST", _boxResult.attr("name")).append(makeTextArea("js", js), makeTextArea("css", css), makeTextArea("html", html), makeTextInput("console", "" + (console === true)), makeTextInput("babel", "" + (babel === true)));
            form.appendTo('body').submit().remove();
        }
        function resize() {
        }
        return {
            resize: resize,
            writeResult: writeResult,
            load: load,
            hide: hide,
            run: run,
            generate: generate
        };
    }
    /**************************************
     ** BEGIN MARKDOWN CODE              **
     **************************************/
    function indent(str, numOfIndents, spacesPerIndent) {
        return str.replace(/^(?=.)/gm, new Array((numOfIndents * spacesPerIndent) + 1).join(' '));
    }
    function markdownGenerator(state) {
        let result = "\n\n<!-- begin snippet: js" +
            " hide: " + state.hide +
            " console: " + state.console +
            " babel: " + state.babel +
            " -->\n\n";
        const js = state.js;
        const css = state.css;
        const html = state.html;
        if (js != '') {
            result += "<!-- language: lang-js -->\n\n\
" + indent(js, 1, 4) + "\n\n";
        }
        if (css != '') {
            result += "<!-- language: lang-css -->\n\n\
" + indent(css, 1, 4) + "\n\n";
        }
        if (html != '') {
            result += "<!-- language: lang-html -->\n\n\
" + indent(html, 1, 4) + "\n\n";
        }
        result += "<!-- end snippet -->\n\n";
        return result;
    }
    function stateGenerator(snippetCode, hide, console, babel) {
        // Get the snippet code
        const jsRegex = /<!--\s+language:\s*lang-js\s+-->([\s\S]*?)(?:<!--\s+language:|$)/gi;
        const cssRegex = /<!--\s+language:\s*lang-css\s+-->([\s\S]*?)(?:<!--\s+language:|$)/gi;
        const htmlRegex = /<!--\s+language:\s*lang-html\s+-->([\s\S]*?)(?:<!--\s+language:|$)/gi;
        try {
            const jsResult = jsRegex.exec(snippetCode);
            const cssResult = cssRegex.exec(snippetCode);
            const htmlResult = htmlRegex.exec(snippetCode);
            let js = '', css = '', html = '';
            // Trim <pre> block markdown indentation and leading/trailing white space
            if (jsResult) {
                js = jsResult[1].trim().replace(/^    /gm, "");
            }
            if (cssResult) {
                css = cssResult[1].trim().replace(/^    /gm, "");
            }
            if (htmlResult) {
                html = htmlResult[1].trim().replace(/^    /gm, "");
            }
            // needs to be SOMETHING to render
            if (js == '' && css == '' && html == '') {
                return null;
            }
            const state = {
                js: js,
                css: css,
                html: html,
                console: console,
                hide: hide,
                babel: babel
            };
            return state;
        }
        catch (e) {
            // No state
            return null;
        }
    }
    const _snippetCache = {};
    let pageOffset;
    // This is called by the promise JS system
    StackExchange.snippets = (function () {
        let externalEditorInit = true;
        return {
            init: init,
            initSnippetRenderer: initSnippetRenderer,
            makeSnippets: makeSnippets
        };
        function thingFinder(markdown, textareaContent, sentinel, thingName, things) {
            return markdown.replace(/<!--\s+begin snippet:\s*[a-z]+\s*(?:hide:\s*([a-zA-Z]+))?\s*(?:console:\s*([a-zA-Z]+))?\s*(?:babel:\s*([a-zA-Z]+))?\s+-->([\s\S]*?)<!--\s+end snippet\s+-->/gi, function (wholematch, hide, console, babel, thingPayload, offset) {
                const thing = {
                    payload: {
                        code: thingPayload,
                        hide: (hide || "").toLowerCase() === "true",
                        console: (console || "").toLowerCase() === "true",
                        babel: (babel || "").toLowerCase() === "true"
                    },
                    pos: findThing(wholematch, textareaContent, offset),
                    len: wholematch.length
                };
                if (thing.pos === -1) { // this would be very weird -- probably a preConversion plugin that changed the relevant content
                    return wholematch;
                }
                things.push(thing);
                return wholematch + "\n\n" + sentinel + thingName + "-" + (things.length - 1) + "%";
            });
            function findThing(needle, haystack, posHint) {
                let found = -1, index = -1;
                while (true) {
                    index = haystack.indexOf(needle, index + 1);
                    if (index == -1)
                        break;
                    // It is entirely possible (though unlikely) that the same thing appears twice. Pick the
                    // one whose position is closer to the position that was passed to the preConversion hook,
                    // that should be a good enough guess except for pathological cases.
                    if (found < 0 || Math.abs(index - posHint) < Math.abs(index - found))
                        found = index;
                }
                return found;
            }
        }
        function init() {
            // init snippet renderer
            initSnippetRenderer();
            // init external editor only if it exists
            const externalEditorsAvailable = window.StackExchange.MarkdownEditor && window.StackExchange.externalEditor;
            if (externalEditorsAvailable && externalEditorInit) {
                externalEditorInit = false;
                StackExchange.externalEditor.init({
                    thingName: "snippet",
                    thingFinder: thingFinder,
                    editLabel: __tr(["edit the above snippet"], undefined, "en", []),
                    getDivContent: function (oldThing) {
                        const state = oldThing ? stateGenerator(oldThing.code, oldThing.hide, oldThing.console, oldThing.babel) : null;
                        var div = makeDiv("modal auto-center snippet-modal");
                        makeSnippet(div, {
                            markdownPluginMode: true,
                            state: state
                        });
                        return div;
                    },
                    buttonTooltip: __tr(["JavaScript/HTML/CSS snippet"], undefined, "en", []),
                    buttonImageUrl: "/Content/Shared/balsamiq/wmd-mockup-button.png",
                    onShow: function (editorClosed) {
                        const snippetPopup = $('.snippet-modal');
                        const save = function (isEscape) {
                            const state = snippetPopup.data('_snippet').save();
                            // Check if we have anything to do
                            if (isEscape || (state.html == '' && state.css == '' && state.js == '')) {
                                editorClosed(null);
                            }
                            else {
                                const result = markdownGenerator(state);
                                editorClosed(result, result);
                            }
                        };
                        snippetPopup.on('popupClosing', function (e) {
                            const isEscape = e.closeTrigger == 'esc';
                            if (isEscape && !codeHasChanged) {
                                return;
                            }
                            if (isEscape && !confirm(__tr(["Are you sure you want to abandon any changes?"], undefined, "en", []))) {
                                // cancel the closing of the suggested edit popup
                                e.preventDefault();
                                return;
                            }
                            save(isEscape);
                        });
                    }
                });
            }
            // Wire into editor creation only if it exists
            if (StackExchange.MarkdownEditor) {
                StackExchange.MarkdownEditor.creationCallbacks.add(function (editor, postfix) {
                    const hooks = editor.getConverter().hooks;
                    hooks.chain("preConversion", makeSnippets);
                    // Triggered by changes to live markdown preview
                    const jPreview = $("#wmd-preview" + postfix);
                    jPreview.on("wmdrefresh", function () {
                        jPreview.find("pre").each(function () {
                            const elem = $(this);
                            const guid = elem.text();
                            if (_snippetCache[guid]) {
                                const div = _snippetCache[guid];
                                // Clean up the cache
                                delete _snippetCache[guid];
                                drawSnippet(div);
                                elem.replaceWith($("<p>").append(div));
                            }
                        });
                    });
                });
            }
        }
    })();
    function makeSnippets(text) {
        let renderer = StackExchange.snippets.renderer;
        if (!renderer) {
            // we have nobody to do the rendering for us
            return text;
        }
        // type guard above changes this value... so a no-op, but it
        // helps TS realize this is safe
        let nonNullRenderer = renderer;
        // IMPORTANT: WE *ONLY* SUPPORT SANDBOXED IFRAMES FOR NOW
        // So, if sandboxing isn't available, don't render the snippet (graceful failover to code/pre display)
        // Most browsers will be just fine: http://caniuse.com/iframe-sandbox
        const sandboxSupported = "sandbox" in document.createElement("iframe");
        if (!sandboxSupported) {
            return text;
        }
        // Looking for snippets
        const snippetRegex = /<!--\s+begin snippet:\s*[a-z]+\s*(?:hide:\s*([a-zA-Z]+))?\s*(?:console:\s*([a-zA-Z]+))?\s*(?:babel:\s*([a-zA-Z]+))?\s+-->([\s\S]*?)<!--\s+end snippet\s+-->/gi;
        text = text.replace(snippetRegex, function (_, hide, console, babel, snippetCode) {
            return nonNullRenderer(snippetCode, hide, console, babel);
        });
        return text;
    }
    function initSnippetRenderer() {
        if (StackExchange.snippets.renderer && StackExchange.snippets.redraw) {
            return;
        }
        StackExchange.snippets.redraw = function () {
            $("div.snippet").each(function () {
                const div = $(this);
                // Don't render for downvoted answers
                if (div.closest(".downvoted-answer").length > 0) {
                    // Equivalent of continue
                    return true;
                }
                drawSnippet(div);
            });
        };
        StackExchange.snippets.renderer = function (snippetCode, hide, console, babel) {
            // javascript types are garbage
            hide = hide === true || (hide || "").toLowerCase() === "true";
            console = console === true || (console || "").toLowerCase() === "true";
            babel = babel === true || (babel || "").toLowerCase() === "true";
            const state = stateGenerator(snippetCode, hide, console, babel);
            if (!state) {
                // Nothing to render
                return snippetCode;
            }
            const div = makeDiv("snippet").data({ lang: "js", hide: hide, "console": console });
            const divCode = makeDiv("snippet-code");
            if (hide) {
                divCode.addClass("snippet-currently-hidden");
            }
            div.append(divCode);
            const js = state.js;
            const css = state.css;
            const html = state.html;
            if (js) {
                divCode.append(makeCodeblockOverridePre('js')
                    .append(makeCode(js)));
            }
            if (css) {
                divCode.append(makeCodeblockOverridePre('css')
                    .append(makeCode(css)));
            }
            if (html) {
                divCode.append(makeCodeblockOverridePre('html')
                    .append(makeCode(html)));
            }
            // Assign an ID
            const id = nextId();
            makeSnippet(divCode, {
                state: state
            });
            // Cache
            _snippetCache[id] = div;
            return '<pre>' + id + '</pre>';
        };
        // Do a redraw initially
        StackExchange.snippets.redraw();
    }
    function drawSnippet(div) {
        let divCode = div.find(".snippet-code");
        // Backwards compatability to before we had the snippet-code div
        if (divCode.length == 0) {
            divCode = div;
        }
        const js = divCode.find("pre.snippet-code-js").text();
        const css = divCode.find("pre.snippet-code-css").text();
        const html = divCode.find("pre.snippet-code-html").text();
        const state = {
            js: js,
            css: css,
            html: html,
            console: div.data("console") === true,
            hide: div.data("hide") === true,
            babel: div.data("babel") === true
        };
        makeSnippet(divCode, {
            state: state
        });
        // Only show copy button when logged in and not a preview (not yet attached to DOM) and when the markdown editor is defined
        if (StackExchange.options.user.isAnonymous || div.parent().length == 0 || $("textarea#wmd-input").length == 0 || $('.js-popup-suggested-edit').length) {
            div.find(".copySnippet").hide();
        }
        // Show/hide check
        if (div.data("hide") === true) {
            divCode.hide();
            divCode.addClass("snippet-currently-hidden");
            // Remove old show link always to keep things in sync
            div.find(".snippet-display").remove();
            const divShow = makeDiv("snippet-display").attr("style", "vertical-align: center")
                .append($('<p>')
                .append($('<a class="snippet-show-link-chevron"><span class="expander-arrow-hide" style="vertical-align: middle;"></span><a class="snippet-show-link"><span class="show-hide" data-ishidden="true" style="vertical-align: middle"></span></a>')));
            divShow.find('span.show-hide').text(__tr(["Show code snippet"], undefined, "en", []));
            divShow.click(function () {
                divCode.toggle();
                const $this = $(this);
                const elem = $this.find(".show-hide");
                if (elem.data("ishidden") === true) {
                    elem.text(__tr(["Hide code snippet"], undefined, "en", []));
                    $this.find(".expander-arrow-hide").removeClass("expander-arrow-hide").addClass("expander-arrow-show");
                    elem.data("ishidden", false);
                }
                else {
                    elem.text(__tr(["Show code snippet"], undefined, "en", []));
                    $this.find(".expander-arrow-show").removeClass("expander-arrow-show").addClass("expander-arrow-hide");
                    elem.data("ishidden", true);
                }
            });
            div.prepend(divShow);
        }
        else {
            divCode.show().removeClass("snippet-currently-hidden");
            div.find(".snippet-display").remove();
        }
    }
})(jQuery, window);


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/48_PostSidebar.ts":
/*!**********************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/48_PostSidebar.ts ***!
  \**********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
StackExchange.sidebar = (function () {
    /**
     * When Post Collections are enabled on the current site, the sidebar will render
     * StackOverflow/Views/PostCollections/Partials/SidebarWidget.cshtml and it will call this.
     */
    function initCollectionWidget(postId) {
        // on successful add, we replace the entire widget, so bind to the parent
        var $sidebar = $('.js-in-these-collections-widget').parent();
        // load modal with editable collections
        $sidebar.on('click', '.js-fetch-add-to-collection-modal', function (e) {
            var $btn = $(e.target);
            if ($btn.hasClass('is-loading')) {
                return;
            }
            $btn.addClass('is-loading');
            StackExchange.helpers.loadModal('/collections/modal-add-to-collection?postId=' + postId).always(function () {
                $btn.removeClass('is-loading');
            });
        });
        // we only show 10 collections max, so allow showing them all
        $sidebar.on('click', '.js-collections-widget--show-all', function (e) {
            $(e.target).add('.js-widget-collection.d-none').toggleClass('d-none');
        });
    }
    return {
        initCollectionWidget: initCollectionWidget
    };
})();


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/49_ExpandableOverflow.ts":
/*!*****************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/49_ExpandableOverflow.ts ***!
  \*****************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
StackExchange.expandableOverflow = (function () {
    /**
     * Checks if containerEl is scrollable, visually truncating the content and showing the moreBtnEl if so
     * @param containerEl The target element whose contents to check
     * @param moreBtnEl The element to toggle containerEl's content's full visibility on click
     */
    function init(containerEl, moreBtnEl) {
        if (!containerEl || !moreBtnEl) {
            return;
        }
        const heightObserver = new ResizeObserver(element => {
            const target = element[0].target;
            // the height of the inner content
            const contentHeight = target.scrollHeight;
            // the height on the container itself
            const containerHeight = target.clientHeight;
            // if the content is causing the container to scroll, fade it out and show the "Read more" button
            if (contentHeight > containerHeight) {
                target.classList.add("v-truncate-fade");
                moreBtnEl === null || moreBtnEl === void 0 ? void 0 : moreBtnEl.classList.remove("v-hidden");
            }
            else {
                target.classList.remove("v-truncate-fade");
                moreBtnEl === null || moreBtnEl === void 0 ? void 0 : moreBtnEl.classList.add("v-hidden");
            }
        });
        moreBtnEl.addEventListener('click', () => {
            heightObserver.disconnect();
            containerEl.classList.remove("v-truncate-fade");
            containerEl.classList.add("h-auto", "hmx-initial");
            moreBtnEl.classList.add("v-hidden");
        }, false);
        heightObserver.observe(containerEl);
    }
    return { init: init };
})();


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_CommunityWiki.ts":
/*!************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_CommunityWiki.ts ***!
  \************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    function bindCommunityWikiConfirmation($scope) {
        $scope
            .find('input[type=checkbox][name=communitymode]')
            .off('click')
            .one('click', () => confirm(__tr(["Are you sure you want to make this post Community Wiki?$blankLine$Doing so will remove explicit ownership and you will no longer earn reputation for upvotes on it. Once saved, this option cannot be unchecked without moderator assistance."], {blankLine: '\n\n'}, "en", [])));
    }
    StackExchange.bindCommunityWikiConfirmation = bindCommunityWikiConfirmation;
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_FeedLink.ts":
/*!*******************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_FeedLink.ts ***!
  \*******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
$(document).on('click', '.js-feed-link', function (e) {
    const $link = $(this);
    const $modal = $link.siblings(".js-feed-link-modal").clone();
    if ($modal.length > 0) {
        e.preventDefault();
        StackExchange.helpers.showModal($modal, {
            returnElements: $link,
            shown: function () {
                $modal.find(".s-input").focus().select();
            }
        });
    }
});


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_GoogleAnalytics.ts":
/*!**************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_GoogleAnalytics.ts ***!
  \**************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
StackExchange.ga = (function () {
    if (StackExchange.ga && StackExchange.ga.inited) {
        return StackExchange.ga;
    }
    var _ga3;
    var _ga4;
    var _incrementingFormId = 0;
    var _ga3ClientId = null;
    var _ga4ClientId = null;
    const _formInputChanges = {};
    var bindHandlers = function (el) {
        // Track element clicks and form submits
        el.find("[data-ga]").each(function () {
            const $this = $(this);
            const isForm = $this.is("form");
            const event = isForm ? "submit" : "click";
            $this.on(event, (e) => {
                const args = getTrackArgs($this);
                if (args === null)
                    return;
                // track click/submit
                trackElement($this, args);
                // optionally track form input changes
                if (isForm) {
                    trackFormInputs($this, args);
                }
            });
        });
        // Track form input changes
        // Changes are submitted to GA on form submit, or when
        // `trackFormInputs` is called.
        el.find("[data-ga-action]").each(function () {
            const $input = $(this);
            $input.on('change', () => recordInputChange($input));
        });
    };
    var setCampaign = function (medium, name, source) {
        if (!_ga3) {
            return;
        }
        if (medium) {
            setDimension("campaignMedium", medium);
        }
        if (name) {
            setDimension("campaignName", name);
        }
        if (source) {
            setDimension("campaignSource", source);
        }
    };
    var setDimension = function (name, value) {
        const handleTracker = function (name, value) {
            try {
                log(`set: name: '${name}', value: '${value}'`);
                if (!_ga3) {
                    return;
                }
                for (var i = 0; i < _ga3.trackingCodes.length; i++) {
                    // GA3
                    if (_ga3.tracker) {
                        _ga3.tracker(formatCommand(i, "set"), name, value);
                    }
                }
            }
            catch (e) {
                logError(`set: name: '${name}', value: '${value}'`, e);
            }
        };
        setTimeout(() => handleTracker(name, value), 0);
    };
    var setUrl = function (url) {
        if (!_ga3) {
            return;
        }
        if (url) {
            setDimension("page", url);
        }
    };
    var setTitle = function (title) {
        if (!_ga3) {
            return;
        }
        if (title) {
            setDimension("title", title);
        }
    };
    var track = function (category, action, label, fields) {
        const handleTracker = function (category, action, label, fields) {
            try {
                log(`track: category: '${category}', action: '${action}', label: '${label}'`);
                if (!_ga3 && !_ga4) {
                    return;
                }
                if (category == null || action == null) {
                    return;
                }
                addExtraDimensions();
                // GA3
                if (_ga3 && _ga3.tracker) {
                    for (var i = 0; i < _ga3.trackingCodes.length; i++) {
                        _ga3.tracker(formatCommand(i, "send"), "event", category, action, label, undefined, fields);
                    }
                }
                // GA4
                if (_ga4 && _ga4.tracker) {
                    _ga4.tracker("event", category, { category: category, action: action, label: label, fields: fields });
                }
            }
            catch (e) {
                logError(`track: category: '${category}', action: '${action}', label: '${label}'`, e);
            }
        };
        setTimeout(() => handleTracker(category, action, label, fields), 0);
    };
    var trackElement = function ($el, args) {
        if (!_ga3 && !_ga4) {
            return;
        }
        if (args === undefined) {
            args = getTrackArgs($el);
        }
        if (args === null) {
            return;
        }
        track(args.category, args.action, args.label, args.fields);
    };
    var trackPageView = function () {
        const handleTracker = function () {
            try {
                log(`send: pageview: '${getSanitizedUrl().relativePath}'`);
                if (!_ga3) {
                    return;
                }
                addExtraDimensions();
                for (var i = 0; i < _ga3.trackingCodes.length; i++) {
                    // GA3
                    if (_ga3.tracker) {
                        _ga3.tracker(formatCommand(i, "send"), "pageview", getSanitizedUrl().relativePath);
                    }
                }
            }
            catch (e) {
                logError(`send: pageview: '${getSanitizedUrl().relativePath}'`, e);
            }
        };
        setTimeout(() => handleTracker(), 0);
    };
    var trackFormInputs = function ($form, args) {
        if (!_ga3 && !_ga4) {
            return;
        }
        if (args === undefined) {
            args = getTrackArgs($form);
        }
        if (args === null) {
            return;
        }
        const formId = $form.attr('id');
        const changes = _formInputChanges[formId];
        if (changes === undefined) {
            return; // no changes to track
        }
        for (var inputName in changes) {
            const action = `${args.inputActionPrefix} | ${inputName}`;
            const label = changes[inputName];
            track(args.category, action, label, { nonInteraction: false });
        }
        _formInputChanges[formId] = {}; // reset
    };
    var recordInputChange = function ($input) {
        if (!_ga3 && !_ga4) {
            return;
        }
        var val;
        if ($input.is(':checkbox')) {
            val = $input.is(':checked');
        }
        else if ($input.is('select')) {
            val = $input.find(':selected')
                .toArray()
                .map(el => $(el).data('ga-value') || $(el).val())
                .join(' ');
        }
        else {
            val = $input.data('ga-value') || $input.val();
        }
        const $form = $input.closest('form');
        if ($form.length === 0 || val === null) {
            return;
        }
        var formId = $form.attr('id');
        // if the form has no "id" attribute, create one
        if (formId === undefined) {
            formId = "ga-form-" + _incrementingFormId++;
            $form.attr('id', formId);
        }
        let interactions = _formInputChanges[formId];
        if (interactions === undefined) {
            interactions = _formInputChanges[formId] = {};
        }
        const action = $input.attr('data-ga-action');
        const isPII = $input.attr('data-ga-is-pii') === 'false' ? false : true;
        const label = isPII ? "PII Omitted" : val;
        interactions[action] = label;
    };
    var getTrackArgs = function ($el) {
        const data = $el.data("ga");
        if (data === undefined)
            return null;
        return {
            category: data[0],
            action: data[1],
            label: data[2],
            inputActionPrefix: data[3],
            fields: data[4]
        };
    };
    var getTrackerName = function (index) {
        return `tracker_${index}`;
    };
    var formatCommand = function (index, command) {
        if (index == 0) {
            return command;
        }
        const trackerName = getTrackerName(index);
        return `${trackerName}.${command}`;
    };
    var getClientId = function () {
        if (!_ga3) {
            return;
        }
        return _ga3ClientId;
    };
    var getGA4ClientId = function () {
        if (!_ga4) {
            return;
        }
        return _ga4ClientId;
    };
    function log(msg) {
        try {
            if (!StackExchange.options.enableLogging)
                return;
            console.log('StackExchange.ga: ' + msg);
        }
        catch (e) { }
    }
    function logError(msg, err) {
        try {
            if (!StackExchange.options.enableLogging)
                return;
            console.error(`StackExchange.ga: ${msg}`, err);
        }
        catch (e) { }
    }
    // Returns an object with sensitive PII data removed
    function getSanitizedUrl() {
        var origin = window.location.origin;
        var url = new URL(window.location.href);
        url.searchParams.delete('email'); // email/confirm route uses ?e=<email>
        url.searchParams.delete('auth');
        url.searchParams.delete('e');
        // Our href with offending params removed
        var href = url.href;
        // Remove the origin from the href to give us the relative path w/ query string
        var relativePath = href.replace(origin, '');
        return { href, relativePath };
    }
    /** Get local time as ISO string with offset at the end, e.g. 2021-09-27T15:30:34.159-04:00 */
    function getTimestamp() {
        var now = new Date();
        var tzo = -now.getTimezoneOffset();
        var dif = tzo >= 0 ? '+' : '';
        // get the iso string, but slice off the trailing Z character
        var isoString = now.toISOString().slice(0, -1);
        return isoString
            + dif + padTime(tzo / 60)
            + ':' + padTime(tzo % 60);
    }
    function padTime(int) {
        var i = int.toFixed(0).toString();
        return i.length < 2 ? '0' + i : i;
    }
    function addExtraDimensions() {
        if (!_ga3) {
            return;
        }
        if (!_ga3.sendTitles) {
            setDimension("title", "Channel Page");
        }
        // EventFields.Dimensions.ClientId
        if (_ga3ClientId) {
            setDimension("dimension6", _ga3ClientId);
        }
        // EventFields.Dimensions.Timestamp
        setDimension("dimension8", getTimestamp());
        // EventFields.Dimensions.FullUrl
        setDimension("dimension11", getSanitizedUrl().href);
    }
    function initGA3(ga3Settings) {
        const createArgs = {
            allowLinker: true
        };
        let cookieDomain = "auto";
        if (window.location.host.indexOf("stackexchange.com") >= 0) {
            cookieDomain = "stackexchange.com";
        }
        if (StackExchange.options.user.accountId) {
            createArgs.userId = StackExchange.options.user.accountId.toString();
        }
        ga3Settings.tracker("create", ga3Settings.trackingCodes[0], cookieDomain, createArgs);
        if (ga3Settings.autoLink && ga3Settings.autoLink.length > 0) {
            ga3Settings.tracker("require", "linker");
            ga3Settings.tracker("linker:autoLink", ga3Settings.autoLink);
        }
        setDimension("transport", "beacon");
        for (var i = 1; i < ga3Settings.trackingCodes.length; i++) {
            ga3Settings.tracker("create", ga3Settings.trackingCodes[i], cookieDomain, getTrackerName(i), createArgs);
        }
        if (ga3Settings.checkDimension) {
            var adBlockEnabled = adBlockChecker();
            StackExchange.ga.setDimension(ga3Settings.checkDimension, (adBlockEnabled ? '1' : '0'));
        }
    }
    function initGA4(ga4Settings) {
        // Always defaults to denied for cookieless pings
        ga4Settings.tracker('consent', 'default', {
            'ad_storage': 'denied',
            'analytics_storage': 'denied'
        });
        // Updates the consent to whatever the user has currently set on page loaded
        updateGA4Consent(ga4Settings.consentsToPerformanceCookies, ga4Settings.consentsToTargetingCookies);
        if (ga4Settings.checkForAdBlock) {
            var adBlockEnabled = adBlockChecker();
            ga4Settings.eventParameters["ads_blocked"] = adBlockEnabled;
        }
        ga4Settings.tracker('js', new Date());
        if (!ga4Settings.sendTitles) {
            ga4Settings.eventParameters["page_title"] = 'Channel Page';
        }
        //Custom event parameters that we set with 'config' below weren't flowing properly.
        //So trying out this fix to see if it helps: https://ithoughthecamewithyou.com/post/send-event-parameters-with-every-event-and-multiple-tags-in-google-analytics-4
        ga4Settings.tracker('set', ga4Settings.eventParameters);
        ga4Settings.tracker('config', ga4Settings.trackingCodes[0], ga4Settings.eventParameters);
        if (ga4Settings.trackClicks) {
            trackGA4Clicks();
        }
    }
    function adBlockChecker() {
        let adBlockEnabled = false;
        let ad = document.createElement('ins');
        ad.className = 'AdSense';
        ad.style.display = 'block';
        ad.style.position = 'absolute';
        ad.style.top = '-1px';
        ad.style.height = '1px';
        document.body.appendChild(ad);
        adBlockEnabled = !ad.clientHeight;
        document.body.removeChild(ad);
        return adBlockEnabled;
    }
    function updateGA4Consent(performanceCookies, targetingCookies) {
        _ga4.tracker('consent', 'update', {
            'analytics_storage': performanceCookies,
            'ad_storage': targetingCookies
        });
    }
    function trackGA4(eventName, eventParams) {
        try {
            log(`trackGA4: eventName: '${eventName}'`);
            // https://developers.google.com/analytics/devguides/collection/gtagjs/sending-data#know_when_an_event_has_been_sent
            if (navigator && navigator.sendBeacon) {
                eventParams = $.extend(eventParams, { transport_type: 'beacon' });
            }
            // pushing to the dataLayer makes sure it gets picked up after GA init runs, without the need for funky timeouts etc
            if (_ga4 === null || _ga4 === void 0 ? void 0 : _ga4.tracker) {
                _ga4 === null || _ga4 === void 0 ? void 0 : _ga4.tracker("event", eventName, eventParams);
            }
        }
        catch (e) {
            logError(`trackGA4: eventName: '${eventName}'`, e);
        }
    }
    function trackGA4Clicks() {
        // shamelessly copied from https://github.com/StackEng/Marketing/blob/d9d05cc8ae835591476cef3d1c0b3320ef9c25ec/plugins/trackingEvents.client.ts
        // Bind click handler
        window.addEventListener('click', (e) => {
            const el = getClosestAnchorTag(e.target);
            if (el && 'getAttribute' in el) {
                // Returns an object if this url is
                let externalUrl = parseUrl(el.getAttribute('href') || '');
                StackExchange.gaReady(() => trackGA4('click', {
                    outbound: externalUrl.outbound,
                    link_text: el.innerText,
                    link_classes: el.getAttribute('class'),
                    link_id: el.getAttribute('id'),
                    link_url: el.getAttribute('href'),
                }));
            }
            // Return true because otherwise the event might be cancelled
            return true;
        }, { capture: true, passive: true });
        function parseUrl(urlRaw) {
            let url;
            // Returns an error if it's a relative url
            // Therefore, we can assume it's absolute if it returns
            try {
                url = new URL(urlRaw);
            }
            catch (_err) {
                // Swallow the error
                return {
                    href: urlRaw,
                    outbound: false,
                };
            }
            return {
                ...url,
                outbound: !(url.host === window.location.host),
            };
        }
        function getClosestAnchorTag(currentNode) {
            var _a;
            while (currentNode) {
                if (currentNode.nodeName === 'A') {
                    return currentNode;
                }
                // m0sa: added since the spec requests to track all button clicks, too
                if (currentNode.nodeName === 'BUTTON') {
                    return currentNode;
                }
                if (currentNode.nodeName === 'INPUT') {
                    var type = (_a = currentNode.getAttribute("type")) === null || _a === void 0 ? void 0 : _a.toUpperCase();
                    if (type === 'BUTTON' || type === 'SUBMIT') {
                        return currentNode;
                    }
                }
                currentNode = currentNode.parentNode;
            }
            return null;
        }
    }
    return {
        inited: false,
        init: function (settings) {
            if (!settings) {
                return;
            }
            const ga3 = settings.GA3;
            const ga4 = settings.GA4;
            if (ga3 && ga3.tracker && ga3.trackingCodes && ga3.trackingCodes.length > 0) {
                _ga3 = ga3;
                initGA3(_ga3);
                _ga3.tracker((t) => {
                    if (t) {
                        _ga3ClientId = t.get("clientId");
                    }
                    // everything is initialized, let observers know we're done
                    StackExchange.gaInitialized.resolve();
                });
            }
            if (ga4 && ga4.tracker && ga4.trackingCodes && ga4.trackingCodes.length > 0) {
                _ga4 = ga4;
                initGA4(_ga4);
                // TODO Test this
                _ga4.tracker("get", ga4.trackingCodes[0], "client_id", (t) => {
                    if (t) {
                        _ga4ClientId = t;
                    }
                });
                // everything is initialized, let observers know we're done
                StackExchange.gaInitialized.resolve();
            }
            bindHandlers($(document));
            StackExchange.ga.inited = true;
        },
        bindHandlers: bindHandlers,
        setCampaign: setCampaign,
        setDimension: setDimension,
        setTitle: setTitle,
        setUrl: setUrl,
        track: track,
        trackElement: trackElement,
        trackFormInputs: trackFormInputs,
        trackGA4: trackGA4,
        trackPageView: trackPageView,
        recordInputChange: recordInputChange,
        getClientId: getClientId,
        getGA4ClientId: getGA4ClientId,
        updateGA4Consent: updateGA4Consent
    };
})();


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_Notice.ts":
/*!*****************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_Notice.ts ***!
  \*****************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    var Notice;
    (function (Notice) {
        class NoticeState {
            constructor($notice) {
                this.cookieId = $notice.attr('data-cookie');
                this.expireDate = new Date(+$notice.attr('data-expire-date'));
            }
            setCookie(value) {
                $.cookie(this.cookieId, value, {
                    expires: this.expireDate,
                    path: "/",
                });
            }
            ctaClicked() { this.setCookie(`2;${Date.now()}`); }
            dismissed() { this.setCookie(`4;${Date.now()}`); }
        }
        function bindStandardLinkAndDismissButtons($banner, hideNotice, ctaLinkUrl) {
            const noticeState = new NoticeState($banner);
            $banner.find(".js-link").click(() => {
                noticeState.ctaClicked();
                if (ctaLinkUrl) {
                    window.open(ctaLinkUrl, '_blank');
                }
                hideNotice();
            });
            $banner.find(".js-dismiss").click(event => {
                event.preventDefault();
                noticeState.dismissed();
                hideNotice();
                // if is in satisfaction survey banner, then also send ajax notification to dismiss route
                if ($banner.attr('data-is-site-sat') === 'true') {
                    $.post("/survey/site-satisfaction/dismiss", { fkey: StackExchange.options.user.fkey });
                }
                else if ($banner.attr('data-is-coso-survey') === 'true') {
                    $.post("/survey/collectives/dismiss", { fkey: StackExchange.options.user.fkey, slug: $banner.data("coso-slug") });
                }
            });
            return noticeState;
        }
        // It assumed that if the announcement banner and sidebar popover both exist on a page,
        // they are representing the same campaign and can be hidden together.  This makes sense
        // with the current understanding that we'll only ever show one in-your-face message per
        // page load.  If this assumption breaks in the future, we will need to be able to validate
        // that the two are linked.
        function hideAnnoucementBannerAndSidebarPopover() {
            const $popoverReference = $('.js-popover-reference');
            $(".js-announcement-banner").animate({ height: "0", opacity: 0 }, "fast", "linear", function () { $(this).remove(); });
            if ($popoverReference.length) {
                Stacks.hidePopover($popoverReference[0]);
            }
        }
        function announcementBannerInit() {
            const $banner = $(".js-announcement-banner");
            bindStandardLinkAndDismissButtons($banner, hideAnnoucementBannerAndSidebarPopover);
        }
        Notice.announcementBannerInit = announcementBannerInit;
        function sidebarPopoverInit() {
            const $popover = $(".js-notice-sidebar-popover");
            const $popoverReference = $('.js-popover-reference');
            bindStandardLinkAndDismissButtons($popover, hideAnnoucementBannerAndSidebarPopover);
            if ($popover.length && $popoverReference.length) {
                setTimeout(() => {
                    Stacks.showPopover($popoverReference[0]);
                }, 1000);
            }
        }
        Notice.sidebarPopoverInit = sidebarPopoverInit;
        function researchBannerInit() {
            var $researchBanner = $(".js-research-banner");
            var noticeState = new NoticeState($researchBanner);
            // show the next research banner state
            var showNextState = function () {
                var state = $(this).closest(".research-banner__state");
                if (!state) {
                    return false;
                }
                var banner = $(".js-research-banner");
                var states = banner.find(".research-banner__state");
                states.hide();
                var stateIndex = states.index(state);
                var nextState = $(states.get(stateIndex + 1));
                banner.removeClass(state.data("propagateClass"));
                banner.addClass(nextState.data("propagateClass"));
                nextState.show();
            };
            var alertOnFailure = function (message) {
                StackExchange.helpers.showToast(message, { type: "danger", transientTimeout: 3000 });
            };
            // send an ajax call on opt-in
            $researchBanner.find("form.js-submit").submit(function (e) {
                e.preventDefault();
                $.ajax({
                    type: "POST",
                    url: $researchBanner.data("cta-url"),
                    data: {
                        fkey: StackExchange.options.user.fkey
                    }
                }).done(function (response) {
                    if (!response.success) {
                        alertOnFailure(response.message);
                    }
                    else {
                        noticeState.ctaClicked();
                    }
                }).fail(alertOnFailure);
                showNextState.call(this);
                return false;
            });
            // dismiss notice
            $researchBanner.find(".js-research-dismiss").click(() => {
                noticeState.dismissed();
                $researchBanner.remove();
                return false;
            });
            // proceed to the next state on confirmation
            $researchBanner.find(".js-research-banner-state .js-research-confirm").click(showNextState);
        }
        Notice.researchBannerInit = researchBannerInit;
        function researchToastInit(ctaLinkUrl) {
            const $toast = $(".js-research-toast");
            const campaign = $toast.attr('data-campaign');
            const state = bindStandardLinkAndDismissButtons($toast, () => StackExchange.helpers.hideToasts(), ctaLinkUrl);
            $toast.find(".js-link").click(() => StackExchange.gps.track("research_toast.click", { campaign }));
            // This finds both the "no thanks" button and toast's dismiss button,
            // causing both to log the dismissal and advance the cookie's state.
            $toast.closest('.js-toast').find(".js-dismiss").click(() => {
                StackExchange.gps.track("research_toast.dismiss", { campaign });
                state.dismissed();
            });
            StackExchange.gps.track("research_toast.show", { campaign });
        }
        Notice.researchToastInit = researchToastInit;
    })(Notice = StackExchange.Notice || (StackExchange.Notice = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_OutdatedAnswers.ts":
/*!**************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_OutdatedAnswers.ts ***!
  \**************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    var OutdatedAnswers;
    (function (OutdatedAnswers) {
        function initAnon(isAnonymous) {
            if (isAnonymous) {
                $('.js-outdated-yes').on('click', function (e) {
                    const elem = this;
                    let postId = $(elem).data('post-id');
                    openModal($(elem));
                    userVoted(postId);
                });
                $('.js-outdated-no').on('click', function () {
                    let postId = $(this).data('post-id');
                    userVoted(postId);
                });
            }
        }
        OutdatedAnswers.initAnon = initAnon;
        function openModal($elem) {
            const $container = $elem.closest('.js-outdated-answers').find('.js-modal-container');
            let postId = $elem.data('post-id');
            $.ajax({
                url: '/posts/outdated/modal/' + postId,
                dataType: 'html',
                type: 'GET',
                success: function (data) {
                    $container.html(data);
                    setTimeout(() => Stacks.showModal($container.find("#js-outdated-answers-modal")[0]), 50);
                    $('.js-submit-outdated-answer').on('click', function (e) {
                        submitOutdatedAnswerResult(postId);
                    });
                }
            });
        }
        OutdatedAnswers.openModal = openModal;
        function submitOutdatedAnswerResult(postId) {
            let checkedOptions = 0;
            let $outdatedOptions = $('.js-outdated-options');
            let $container = $outdatedOptions.closest('.js-outdated-answers');
            let answerType = $container.data('answer-type');
            let positionOnPage = $container.data('position-on-page');
            let score = $container.data('score');
            $outdatedOptions.find(".s-checkbox:checked").each(function (i, elem) {
                let checkedFlag = $(elem).data('answer-flag-value');
                checkedOptions = checkedOptions | checkedFlag;
            });
            StackExchange.using("gps", function () {
                StackExchange.gps.track("outdated_prompt.yes_detail", { OutdatedAnswerOptions: checkedOptions, AnswerType: answerType, PositionOnPage: positionOnPage, AnswerId: postId, Score: score });
            });
        }
        function userVoted(postId) {
            let $outdatedContainer = $(`.js-outdated-answers[data-post-id=${postId}]`);
            $outdatedContainer.find(".js-outdated-interactions").addClass("d-none");
            $outdatedContainer.find('.js-outdated-svg').removeClass("native");
            $outdatedContainer.find('.js-outdated-answer-prompt').text(__tr(["Thanks for your feedback on this answer."], undefined, "en", []));
        }
        OutdatedAnswers.userVoted = userVoted;
    })(OutdatedAnswers = StackExchange.OutdatedAnswers || (StackExchange.OutdatedAnswers = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_PostTypeId.ts":
/*!*********************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_PostTypeId.ts ***!
  \*********************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
// StackOverflow.Models.PostTypeId
//
// If we were in the good universe, this would be an enum in C#.
// 
// Modulifying note: intentionally not deleting this file since legacy code may reference it directly
//
var StackOverflow;
(function (StackOverflow) {
    var Models;
    (function (Models) {
        let PostTypeId;
        (function (PostTypeId) {
            PostTypeId[PostTypeId["Question"] = 1] = "Question";
            PostTypeId[PostTypeId["Answer"] = 2] = "Answer";
            PostTypeId[PostTypeId["Wiki"] = 3] = "Wiki";
            PostTypeId[PostTypeId["TagWikiExcerpt"] = 4] = "TagWikiExcerpt";
            PostTypeId[PostTypeId["TagWiki"] = 5] = "TagWiki";
            PostTypeId[PostTypeId["ModeratorNomination"] = 6] = "ModeratorNomination";
            PostTypeId[PostTypeId["WikiPlaceholder"] = 7] = "WikiPlaceholder";
            PostTypeId[PostTypeId["PrivilegeWiki"] = 8] = "PrivilegeWiki";
            PostTypeId[PostTypeId["Article"] = 9] = "Article";
            PostTypeId[PostTypeId["HelpArticle"] = 10] = "HelpArticle";
            PostTypeId[PostTypeId["Collection"] = 12] = "Collection";
            PostTypeId[PostTypeId["ModeratorQuestionnaireResponse"] = 13] = "ModeratorQuestionnaireResponse";
            PostTypeId[PostTypeId["Announcement"] = 14] = "Announcement";
            PostTypeId[PostTypeId["CollectiveDiscussion"] = 15] = "CollectiveDiscussion";
            PostTypeId[PostTypeId["CollectiveCollection"] = 17] = "CollectiveCollection";
        })(PostTypeId = Models.PostTypeId || (Models.PostTypeId = {}));
    })(Models = StackOverflow.Models || (StackOverflow.Models = {}));
})(StackOverflow || (StackOverflow = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_ads.ts":
/*!**************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_ads.ts ***!
  \**************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    var ads;
    (function (ads) {
        const modalClass = '.js-ad-report';
        let adReports;
        class AdReports {
            constructor(googletag, adReportUrl, adReportText) {
                var _a;
                this.googletag = googletag;
                this.adReportUrl = adReportUrl;
                this.adReportText = adReportText;
                this.handleSlotRendered = (event) => {
                    // Add the button
                    if (!event || !event.slot || event.isEmpty)
                        return;
                    var adUnitElementId = event.slot.getSlotElementId();
                    if (!adUnitElementId)
                        return;
                    var $adUnit = $('#' + adUnitElementId);
                    var $adUnitButtonPlaceholder = $adUnit.parent('.js-zone-container').find('.js-report-ad-button-container');
                    if (!event.creativeId && !event.lineItemId && event.isEmpty)
                        return;
                    // Ignore the Talent Placeholder Line Items (Double Height Anchor)
                    if (clc.options.dh && clc.options.dh.indexOf(event.lineItemId) !== -1)
                        return;
                    var $adReportButton = $(`<button class="js-report-ad s-btn s-btn__link fs-fine mt2 float-right">${this.adReportText}</button>`);
                    $adUnitButtonPlaceholder.append($adReportButton);
                    $adReportButton.data('modal-url', this.adReportUrl);
                    $adReportButton.data('ad-unit', event.slot.getSlotElementId());
                    // Store the data
                    var jsonEventData = JSON.stringify(event);
                    $adReportButton.data('google-event-data', jsonEventData);
                    this.initButton($adReportButton);
                };
                // Watch for when slots are rendered, save their info and add the report button
                this.googletag.pubads().addEventListener('slotRenderEnded', this.handleSlotRendered);
                // Handle slots that have already been rendered
                if (Array.isArray((_a = clc === null || clc === void 0 ? void 0 : clc.dfp) === null || _a === void 0 ? void 0 : _a.slotsRenderedEvents)) {
                    for (var i = 0; i < clc.dfp.slotsRenderedEvents.length; i++) {
                        this.handleSlotRendered(clc.dfp.slotsRenderedEvents[i]);
                    }
                }
            }
            initButton($adReportButton) {
                $adReportButton.off().on("click", (e) => {
                    e.preventDefault();
                    const url = $adReportButton.data("modal-url");
                    const googleEventData = $adReportButton.data("google-event-data");
                    this.loadModal(url, $adReportButton, googleEventData);
                    return false;
                });
            }
            ;
            loadModal(url, $link, googleEventData) {
                StackExchange.helpers.loadModal(url, { returnElements: $link })
                    .then(() => {
                    this.initForm(googleEventData);
                })
                    .fail((responseText) => {
                    var message = "";
                    var response = eval("(" + responseText + ")");
                    if (response && response.isLoggedOut) {
                        message = __tr(["Your login session has expired, please login and try again."], undefined, "en", []);
                    }
                    else {
                        message = __tr(["An error occurred when loading the report form - please try again"], undefined, "en", []);
                    }
                    StackExchange.helpers.showToast(message, { type: 'danger' });
                });
            }
            ;
            removeModal() {
                StackExchange.helpers.closePopups($(modalClass), 'dismiss');
            }
            initForm(googleEventData) {
                const $form = $(".js-ad-report-form");
                const $googleEventData = $form.find('.js-json-data');
                const $adReportReason = $form.find(".js-ad-report-reason");
                const $adReportReasonOther = $form.find(".js-ad-report-reason-other");
                const $fileUploaderInput = $form.find(".js-file-uploader-input");
                const $imageUploader = $form.find(".js-image-uploader");
                const $clearImageUpload = $form.find(".js-clear-image-upload");
                const $imageUploaderText = $form.find(".js-image-uploader-text");
                const $imageUploaderPreview = $form.find(".js-image-uploader-preview");
                const $imageUploaderLink = $form.find(".js-image-uploader-link");
                const $fileErrorMessage = $form.find(".js-file-error");
                const allowedFileTypes = ['image/png', 'image/jpg', 'image/jpeg'];
                const $dragDropEnabledSection = $form.find('.js-drag-drop-enabled');
                const $dragDropDisabledSection = $form.find('.js-drag-drop-disabled');
                $imageUploaderLink.on('click', function (e) {
                    e.preventDefault();
                    $fileUploaderInput.trigger('click');
                });
                $googleEventData.val(googleEventData);
                $adReportReason.on("change", (e) => {
                    $adReportReasonOther.toggleClass('d-none', $(e.target).val() !== '3');
                });
                var preventDefaults = function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                };
                var handleDragStart = function (e) {
                    $imageUploader.removeClass("bas-dashed");
                    $imageUploader.addClass("bas-solid bc-black-225");
                };
                var handleDragEnd = function (e) {
                    $imageUploader.removeClass("bas-solid bc-black-225");
                    $imageUploader.addClass("bas-dashed");
                };
                var handleDrop = function (e) {
                    var files = e.originalEvent.dataTransfer.files;
                    if (FileReader && files && files.length === 1) {
                        // Update file picker
                        var fileInput = $fileUploaderInput[0];
                        fileInput.files = files;
                        if (validateFileInput())
                            updateImagePreview(files);
                    }
                };
                $fileUploaderInput.change(function () {
                    var fileInput = $fileUploaderInput[0];
                    if (validateFileInput())
                        updateImagePreview(fileInput.files);
                });
                var validateFileInput = function () {
                    const fileTypeErrorMessage = __tr(["Please select a PNG or JPG file"], undefined, "en", []);
                    const fileSizeErrorMessage = __tr(["The file must be under 2 MiB"], undefined, "en", []);
                    var fileInput = $fileUploaderInput[0];
                    if (fileInput.files == null)
                        return false;
                    var file = fileInput.files[0];
                    if (file == null) {
                        setError(true);
                        return false;
                    }
                    if (allowedFileTypes.indexOf(file.type) < 0) {
                        $fileErrorMessage.text(fileTypeErrorMessage);
                        $fileErrorMessage.removeClass('d-none');
                        setError(true);
                        return false;
                    }
                    if (file.size > 2097152) {
                        $fileErrorMessage.text(fileSizeErrorMessage);
                        $fileErrorMessage.removeClass('d-none');
                        setError(true);
                        return false;
                    }
                    $fileErrorMessage.addClass('d-none');
                    setError(false);
                    return true;
                };
                var setError = function (hasError) {
                    $fileErrorMessage.parent().toggleClass('has-error', hasError);
                };
                var updateImagePreview = function (files) {
                    // Update styling
                    $imageUploader.removeClass('p16 ba bas-dashed bc-black-225');
                    // Update visibility
                    $clearImageUpload.removeClass("d-none");
                    $imageUploaderText.addClass("d-none");
                    // Update the image preview
                    var fr = new FileReader();
                    fr.onload = function (e) {
                        if (e.target != null) {
                            $imageUploaderPreview.prop("src", e.target.result);
                            $imageUploaderPreview.removeClass("d-none");
                        }
                    };
                    fr.readAsDataURL(files[0]);
                };
                $clearImageUpload.on("click", (e) => {
                    e.preventDefault();
                    // Reset file picker
                    $fileUploaderInput.val("");
                    // Remove image
                    $imageUploaderPreview.prop("src", "");
                    $imageUploaderPreview.addClass("d-none");
                    // Reset visibility
                    $clearImageUpload.addClass("d-none");
                    $imageUploaderText.removeClass("d-none");
                    // Reset styling
                    $imageUploader.addClass('p16 ba bas-dashed bc-black-225');
                });
                // Edge blocks setting file inputs in strict mode,
                // Test for the ability to use drag / drop, which relies on that
                try {
                    var fileInput = $fileUploaderInput[0];
                    // This is the line that will fail on Edge
                    fileInput.files = null;
                    $imageUploader.on('dragenter dragover dragleave drop', preventDefaults);
                    $imageUploader.on('dragenter dragover', handleDragStart);
                    $imageUploader.on('dragleave drop', handleDragEnd);
                    $imageUploader.on("drop", handleDrop);
                }
                catch (e) {
                    $dragDropEnabledSection.addClass('d-none');
                    $dragDropDisabledSection.removeClass('d-none');
                }
                $form.off().on("submit", (e) => {
                    e.preventDefault();
                    if (!validateFileInput())
                        return false;
                    $form.find("[type=submit]").prop("disabled", true);
                    var existingData = JSON.parse($googleEventData.val() || "{}");
                    existingData.Reason = parseInt($form.find(".js-ad-report-reason:checked").val(), 10);
                    existingData.Description = $adReportReasonOther.val();
                    $googleEventData.val(JSON.stringify(existingData));
                    // We're using FormData here to include the File Input
                    var formData = new FormData($form[0]);
                    $.ajax({
                        type: $form.prop("method"),
                        url: $form.prop("action"),
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false
                    }).then((response, textStatus, xhr) => {
                        const contentType = xhr.getResponseHeader("content-type") || "";
                        if (typeof response === "string" && contentType.indexOf("text/html") == 0) {
                            // replace the existing popup
                            const $popupContent = $(response).find(".js-modal-content");
                            if ($popupContent.length > 0) {
                                $(".js-modal-content").replaceWith($popupContent);
                            }
                        }
                        else {
                            this.removeModal();
                            StackExchange.helpers.showToast(__tr(["Thanks for your feedback. Weâll review this against our code of conduct and take action if necessary."], undefined, "en", []), { type: 'success' });
                        }
                    }, function () {
                        StackExchange.helpers.showToast(__tr(["Error uploading ad report."], undefined, "en", []), { type: 'danger' });
                    }).always(function () {
                        $form.find("[type=submit]").prop("disabled", false);
                    });
                    return false;
                });
            }
        }
        function init(googletag, adReportUrl, adReportText) {
            if (adReports)
                return;
            adReports = new AdReports(googletag, adReportUrl, adReportText);
        }
        ads.init = init;
    })(ads = StackExchange.ads || (StackExchange.ads = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_helpers.ts":
/*!******************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_helpers.ts ***!
  \******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    var helpers;
    (function (helpers) {
        function showConfirmModal(options) {
            var $modal = $(`
<aside class="s-modal" role="dialog" aria-labelledby="confirm-modal-title" aria-describedby="confirm-modal-body" aria-hidden="true">
    <div class="s-modal--dialog ps-relative" data-controller="se-draggable" role="document">
        <h1 class="s-modal--header fw-bold" id="confirm-modal-title" data-se-draggable-target="handle"></h1>
        <div class="s-modal--body fs-body2" id="confirm-modal-body"></div>
        <div class="d-flex gs8 gsx s-modal--footer">
            <button class="flex--item s-btn js-ok-button s-btn__filled" type="button"></button>
            <button class="flex--item s-btn js-cancel-button js-modal-close js-modal-initial-focus" type="button"></button>
        </div>
    </div>
</aside>
`);
            const setContent = (selector, html, text) => {
                const $target = $modal.find(selector);
                if (html) {
                    $target.append(html);
                }
                else if (text) {
                    $target.text(text);
                }
            };
            setContent('#confirm-modal-title', options.titleHtml, options.title);
            setContent('#confirm-modal-body', options.bodyHtml, options.body);
            setContent('.js-ok-button', options.buttonLabelHtml, options.buttonLabel || __tr(["OK"], undefined, "en", []));
            setContent('.js-cancel-button', undefined, __tr(["Cancel"], undefined, "en", []));
            return new Promise((resolve, _) => {
                helpers.showModal($modal, options);
                $modal.find('.js-ok-button').click(e => {
                    e.preventDefault();
                    resolve(true);
                    StackExchange.helpers.closePopups($modal, 'dismiss');
                });
                $modal.on('popupClose', _ => resolve(false));
            });
        }
        helpers.showConfirmModal = showConfirmModal;
    })(helpers = StackExchange.helpers || (StackExchange.helpers = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/index.ts":
/*!*************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _realtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../realtime */ "./_Scripts/PartialJS/realtime.ts");
/* harmony import */ var _00_import_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./00_import-js */ "./_Scripts/PartialJS/full-common/00_import-js.ts");
/* harmony import */ var _06_MagicPopup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./06_MagicPopup */ "./_Scripts/PartialJS/full-common/06_MagicPopup.ts");
/* harmony import */ var _38_MoreHotNetworkQuestions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./38_MoreHotNetworkQuestions */ "./_Scripts/PartialJS/full-common/38_MoreHotNetworkQuestions.ts");
/* harmony import */ var _38_MoreHotNetworkQuestions__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_38_MoreHotNetworkQuestions__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _46_ExternalEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./46_ExternalEditor */ "./_Scripts/PartialJS/full-common/46_ExternalEditor.ts");
/* harmony import */ var _47_SnippetJavascript__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./47_SnippetJavascript */ "./_Scripts/PartialJS/full-common/47_SnippetJavascript.ts");
/* harmony import */ var _48_PostSidebar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./48_PostSidebar */ "./_Scripts/PartialJS/full-common/48_PostSidebar.ts");
/* harmony import */ var _48_PostSidebar__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_48_PostSidebar__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _49_ExpandableOverflow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./49_ExpandableOverflow */ "./_Scripts/PartialJS/full-common/49_ExpandableOverflow.ts");
/* harmony import */ var _49_ExpandableOverflow__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_49_ExpandableOverflow__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _99_ads__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./99_ads */ "./_Scripts/PartialJS/full-common/99_ads.ts");
/* harmony import */ var _99_ads__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_99_ads__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _99_CommunityWiki__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./99_CommunityWiki */ "./_Scripts/PartialJS/full-common/99_CommunityWiki.ts");
/* harmony import */ var _99_CommunityWiki__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_99_CommunityWiki__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _99_FeedLink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./99_FeedLink */ "./_Scripts/PartialJS/full-common/99_FeedLink.ts");
/* harmony import */ var _99_FeedLink__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_99_FeedLink__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _99_GoogleAnalytics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./99_GoogleAnalytics */ "./_Scripts/PartialJS/full-common/99_GoogleAnalytics.ts");
/* harmony import */ var _99_GoogleAnalytics__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_99_GoogleAnalytics__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _99_helpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./99_helpers */ "./_Scripts/PartialJS/full-common/99_helpers.ts");
/* harmony import */ var _99_helpers__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_99_helpers__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _99_Notice__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./99_Notice */ "./_Scripts/PartialJS/full-common/99_Notice.ts");
/* harmony import */ var _99_Notice__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_99_Notice__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./99_OutdatedAnswers */ "./_Scripts/PartialJS/full-common/99_OutdatedAnswers.ts");
/* harmony import */ var _99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _99_PostTypeId__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./99_PostTypeId */ "./_Scripts/PartialJS/full-common/99_PostTypeId.ts");
/* harmony import */ var _99_PostTypeId__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_99_PostTypeId__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var expose_loader_exposes_Svg_Svg_exports_loader_exports_Svg_99_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! expose-loader?exposes=Svg|Svg!exports-loader?exports=Svg!./99_svg */ "./node_modules/expose-loader/dist/cjs.js?exposes=Svg|Svg!./node_modules/exports-loader/dist/cjs.js?exports=Svg!./_Scripts/PartialJS/full-common/99_svg-exposed.ts");
/* harmony import */ var expose_loader_exposes_Svg_Svg_exports_loader_exports_Svg_99_svg__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(expose_loader_exposes_Svg_Svg_exports_loader_exports_Svg_99_svg__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _modules_general_index_mod__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../modules/general/index.mod */ "./_Scripts/modules/general/index.mod.ts");
/* harmony import */ var _site_includes_index_mod__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../site-includes/index.mod */ "./_Scripts/site-includes/index.mod.ts");
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});






















(0,_modules_general_index_mod__WEBPACK_IMPORTED_MODULE_17__.registerAllGeneralControllers)();
_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_19__.seReady.then(async () => {
    await (0,_site_includes_index_mod__WEBPACK_IMPORTED_MODULE_18__["default"])();
});


/***/ }),

/***/ "./_Scripts/PartialJS/full/00_import-js.ts":
/*!*************************************************!*\
  !*** ./_Scripts/PartialJS/full/00_import-js.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./_Scripts/PartialJS/util.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// this file is imported first by index.ts,
// so full-common and the JS files run before
// all the typescript files in this folder

// require.context is webpack magic. It means "please include this whole folder in the bundle"
(0,_util__WEBPACK_IMPORTED_MODULE_0__.importAll)(__webpack_require__("./_Scripts/LegacyJS/full sync (?<%21\\.mod)\\.js$"));


/***/ }),

/***/ "./_Scripts/PartialJS/full/99_TagPreferences.ts":
/*!******************************************************!*\
  !*** ./_Scripts/PartialJS/full/99_TagPreferences.ts ***!
  \******************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
StackExchange.tagPreferences = (function () {
    let EditMode;
    (function (EditMode) {
        EditMode[EditMode["Full"] = 0] = "Full";
        EditMode[EditMode["Watching"] = 1] = "Watching";
        EditMode[EditMode["Ignored"] = 2] = "Ignored";
        EditMode[EditMode["None"] = 3] = "None";
    })(EditMode || (EditMode = {}));
    function find(selector) {
        return $('.js-tag-preferences-container').find(selector);
    }
    var currentMode = EditMode.None;
    var $lastErrorPopup = null;
    function showEditor(mode) {
        if (currentMode === EditMode.Full || currentMode === mode) {
            return;
        }
        currentMode = currentMode === EditMode.None ? mode : EditMode.Full;
        updateVisualState();
    }
    function hideEditor() {
        if (currentMode === EditMode.None) {
            return;
        }
        currentMode = EditMode.None;
        updateVisualState();
        hideErrorPopup();
    }
    function hideErrorPopup() {
        if ($lastErrorPopup) {
            $lastErrorPopup.remove();
            $lastErrorPopup = null;
        }
    }
    function updateVisualState() {
        function showIff(selector, condition) {
            if (condition) {
                find(selector).removeClass('d-none');
            }
            else {
                find(selector).addClass('d-none');
            }
        }
        const editingAll = currentMode == EditMode.Full;
        const editingWatched = editingAll || currentMode == EditMode.Watching;
        const editingIgnored = editingAll || currentMode == EditMode.Ignored;
        const hasWatchedTags = find('.js-watched-tag-list .post-tag').length > 0;
        const hasIgnoredTags = find('.js-ignored-tag-list .post-tag').length > 0;
        // Only show the lists if they have content
        showIff('.js-watched-tag-list', hasWatchedTags);
        showIff('.js-ignored-tag-list', hasIgnoredTags);
        // Show or hide editing elements
        if (editingWatched) {
            addDeleteButtons('.js-watched-tag-list');
            insertFormIfMissing('.js-add-watched-container', "js-add-watched-label", ($input) => {
                removeTags('.js-ignored-tag-list', $input);
                saveTags($input, '.js-watched-tag-list', 20, true, false, true);
            });
            find('.js-watched-tag-list.js-has-subscriptions').addClass('fd-column');
        }
        else {
            find('.js-add-watched-container form, .js-watched-tag-list .delete-tag').remove();
            find('.js-watched-tag-list.js-has-subscriptions').removeClass('fd-column');
            find('.js-watched-tag-list .dropdown').addClass('d-none');
        }
        if (editingIgnored) {
            showIgnoredTags();
            addDeleteButtons('.js-ignored-tag-list');
            insertFormIfMissing('.js-add-ignored-container', "js-add-ignored-label", ($input) => {
                showRemainingIgnored();
                removeTags('.js-watched-tag-list', $input);
                saveTags($input, '.js-ignored-tag-list', 25, true, false, true);
            });
        }
        else {
            find('.js-add-ignored-container form, .js-ignored-tag-list .delete-tag').remove();
        }
        // Show relevant "edit" prompts when not editing.
        showIff('.js-edit-all-tags', !editingAll);
        showIff('.js-edit-watched-tags', (!editingWatched && hasWatchedTags));
        showIff('.js-show-add-watched, .js-show-add-watched-container', !editingWatched && !hasWatchedTags);
        showIff('.js-edit-ignored-tags', !editingIgnored && hasIgnoredTags);
        showIff('.js-show-add-ignored, .js-show-add-ignored-container', !editingIgnored && !hasIgnoredTags);
        showIff('.js-full-edit-visible', editingAll);
        showIff('.js-watched-edit-visible', editingWatched);
        showIff('.js-ignored-edit-visible', editingIgnored);
        find('.post-tag').addClass('user-tag');
        $(document).off('click', hideEditorOnOutsideClicks);
        if (currentMode != EditMode.None) {
            $(document).on('click', hideEditorOnOutsideClicks);
        }
    }
    function insertFormIfMissing(inputContainerSelector, labelElementId, callback) {
        var $inputContainer = find(inputContainerSelector);
        if ($inputContainer.children('form').length > 0) {
            return;
        }
        var $form = $(`
            <form class="mt8 d-flex">
                <input type="text" class="flex--item fl1 m0 mrn1 s-input s-input__sm brr0" aria-labelledby="${labelElementId}">
                <button type="submit" class="flex--item s-btn s-btn__filled blr0 m0"></button>
            </form>`);
        $form.find('button').text(__tr(["Add"], undefined, "en", []));
        var $input = $form.find('input[type=text]');
        StackExchange.using("tagAutocomplete", function () {
            bindTagFilterAutoComplete($input);
        });
        $form.on('submit', function (e) {
            e.preventDefault();
            callback($input);
        });
        $inputContainer.append($form);
    }
    function addDeleteButtons(listSelector) {
        find(listSelector).find('.post-tag').each(function () {
            var $tag = $(this);
            if ($tag.children('.delete-tag').length === 0) {
                $('<span>').addClass('delete-tag').attr('title', __tr(["Remove tag"], undefined, "en", [])).appendTo($tag).click((e) => { removeTagPreference($tag); e.preventDefault(); });
            }
        });
    }
    function removeTagPreference($tag) {
        var $wrapper = $tag.closest('.js-tag');
        var $list = $tag.closest('.js-ignored-tag-list, .js-watched-tag-list');
        if ($list.length === 0) {
            return;
        }
        $wrapper.remove();
        let preferenceId = $list.is('.js-ignored-tag-list') ? 25 : 20;
        let preferenceValue = getTagNamesFromContainer($list).join(" ");
        savePreference(preferenceId, preferenceValue);
        applyPrefs();
        updateVisualState();
    }
    // If we have just one edit button, we only want hide it when showing everything.
    function hasSingleEditButton() {
        return find('.js-edit-ignored-tags').length === 0;
    }
    // In some cases, the ignored section may initially be hidden.  It never returns to this state.
    function showIgnoredTags() {
        find('.js-ignored-section').removeClass('d-none');
    }
    const showRemainingIgnored = function () {
        $(".js-show-remaining-ignored").addClass("d-none");
        $(".js-ignored-tag-list .js-tag").removeClass("d-none");
    };
    let previouslyDontApply = [];
    // see also: StackOverflow.Common > Tags.cs > RenderJQueryHighlightSelectorHelperClass
    function getSingleTagSelector(tagname) {
        // css class names can contain unicode, but not raw: . # +
        tagname = tagname.replace(/#/g, "Ã±").replace(/\+/g, "Ã§").replace(/\./g, "Ã»");
        if (/\*/.test(tagname)) {
            if (tagname.indexOf('*') == (tagname.length - 1)) {
                // optimized starts-with
                // tag* > [class*=' t-tag']
                return "[class*=' t-" + tagname.substr(0, tagname.length - 1) + "']";
            }
            // generic regex solution
            // t*name > :regex(class, t-t[^\s]*name)
            return ":regex(class, t-" + tagname.replace(/\*/g, "[^\s]*") + ")";
        }
        else {
            // exact class match
            // tagname > .t-tagname
            return ".t-" + tagname;
        }
    }
    const getTagsSelector = function (jPrefs, dontAffect) {
        return jPrefs
            .map(function (i, elem) { return $(elem).text(); })
            .filter(function (i, prefTag) {
            if (!dontAffect) // nothing to filter
                return true;
            var prefTagRegex;
            if (/\*/.test(prefTag))
                prefTagRegex = new RegExp(prefTag.replace(/([.+])/g, "\\$1").replace(/\*/g, ".*"));
            for (let i = 0; i < dontAffect.length; i++) {
                var unaffectedTag = dontAffect[i];
                // the preference is precisely the unaffected tag (e.g. user is ignoring [iphone], but has searched for [iphone]). Don't apply.
                if (prefTag === unaffectedTag)
                    return false;
                // there's a wildcard, and the preference matches the unaffected tag (e.g.
                // the user is ignoring [jquery*], but has searched for [jquery-ui]). Don't apply.
                if (prefTagRegex && prefTagRegex.test(unaffectedTag)) {
                    return false;
                }
            }
            // found no reason not to apply the preference
            return true;
        })
            .map(function (i, text) { return getSingleTagSelector(text); })
            .get().join(",");
    };
    let savePreferenceForUserId = undefined;
    function savePreference(prefId, value, callback, render) {
        var uid = '';
        if (typeof savePreferenceForUserId != 'undefined') { // moderators will have this variable set
            uid = String(savePreferenceForUserId);
        }
        var args = { "fkey": StackExchange.options.user.fkey, "key": prefId, "value": value, "forUserId": uid };
        if (render)
            args.render = 1;
        return $.post("/users/save-preference", args, callback);
    }
    var registeredTemplatePostTags = {};
    function registerTemplatePostTag($postTags) {
        $postTags.each((_, el) => {
            var $postTag = $(el);
            if ($postTag.is('.post-tag')) {
                registeredTemplatePostTags[$postTag.text()] = $postTag;
            }
        });
    }
    const saveTags = function (tagSelector, spanSelector, preferenceId, focus = false, clientOnly = false, render = false) {
        let $input = $(tagSelector);
        let $span = $(spanSelector);
        let tags = $input.val();
        // tagsSplit = newly added tags in an array, e.g., ["C#", "html"]
        let tagsSplit = StackExchange.helpers.sanitizeAndSplitTags(tags, /* allowWildcards = */ true, /* allowOperators = */ false);
        let duplicate = false;
        hideErrorPopup();
        for (let tagToCheck of tagsSplit) {
            if ($.trim(tagToCheck).length == 0) {
                continue;
            }
            // Check if a tag already exists...
            let existing = $span.find('.post-tag');
            existing.each(function () {
                if ($(this).text() == tagToCheck) {
                    $(this).fadeTo(500, 0.1).fadeTo(500, 1);
                    duplicate = true;
                    return;
                }
            });
            // ...and if not, add it to the DOM
            if (!duplicate) {
                var encodedTag = encodeURIComponent(tagToCheck);
                var $tag = $($span.find('.js-tag-template').html());
                var $postTagTemplate = registeredTemplatePostTags[tagToCheck];
                if ($postTagTemplate) {
                    $tag.find('.post-tag').replaceWith($postTagTemplate);
                }
                else {
                    $tag.find('.post-tag').attr({
                        href: (StackExchange.options.site.routePrefix || '') + '/questions/tagged/' + encodedTag,
                        title: __tr(["show questions tagged '$tag$'"], {tag: tagToCheck}, "en", []),
                    }).text(tagToCheck);
                }
                if (/~\*/.test(tagToCheck)) {
                    $tag.find('.js-tag-frequency-menu-toggle').remove();
                }
                var $nextSibling = $span.children('.js-tag').filter(function (_, el) {
                    var tag = $(el).find('.post-tag').text();
                    return tag && tagToCheck.localeCompare(tag) < 0;
                }).first();
                if ($nextSibling.length > 0) {
                    $tag.insertBefore($nextSibling);
                }
                else {
                    $span.append($tag);
                }
            }
            duplicate = false;
        }
        $input.val("");
        if (focus)
            $input.focus();
        var allTags = getTagNamesFromContainer($span);
        var allTagNames = allTags.join(" ");
        if (!clientOnly) {
            savePreference(preferenceId, allTagNames, function (o) {
                if (o && render) {
                    if (o.html) {
                        $span.find('.js-tag').remove();
                        $span.append(o.html);
                        applyPrefs();
                        updateVisualState();
                    }
                    if (o.error) {
                        showErrorIfInputVisible($input, o.error);
                    }
                }
            }, render).fail(function () {
                showErrorIfInputVisible($input, __tr(["An error occurred; please try again"], undefined, "en", []));
            });
        }
        applyPrefs();
        updateVisualState();
    };
    const showErrorIfInputVisible = function ($input, message) {
        if (currentMode !== EditMode.None && $input.parents('html').length > 0) {
            $lastErrorPopup = StackExchange.helpers.showErrorMessage($input, message, {
                position: {
                    my: 'top left',
                    at: 'bottom left',
                    offsetLeft: 10
                }
            });
        }
    };
    const getTagNamesFromContainer = function (container) {
        let newTagValue = Array();
        container.find(".post-tag").each(function (index, value) {
            let tagName = $(value).text().trim();
            if (tagName) {
                newTagValue.push(tagName);
            }
        });
        return newTagValue;
    };
    const hideIgnored = function () {
        return find('.js-hide-ignored').is(':checked');
    };
    const isIgnored = function (tags) {
        if (!hideIgnored()) {
            return false;
        }
        var $ignoredTags = find('.js-ignored-tag-list .post-tag');
        var ignoredSelector = getTagsSelector($ignoredTags, true);
        // translate return value (jquery specific selectors) of getSingleTagSelector to a regex we can test against a string
        var ignoredTagExpressions = ignoredSelector.split(/,(?!\s)/).map((s) => {
            const selectorStartsWith = /^\[class\*=' t-(.+?)'\]$/;
            const selectorRegex = /^:regex\(class, t-(.+?)\)$/;
            let regexStr;
            if (selectorStartsWith.test(s)) {
                // [class*=' t-tag'] > tag.*
                regexStr = s.match(selectorStartsWith)[1] + '.*';
            }
            else if (selectorRegex.test(s)) {
                // :regex(class, t-t.*name) > t.*name
                regexStr = s.match(selectorRegex)[1];
            }
            else {
                // .t-tagname > tagname
                regexStr = s.replace(/^\.t-/, '');
            }
            // put the className reserved characters back, but escaped so they aren't mistaken for regex reserved characters
            regexStr = regexStr.replace('Ã±', '#').replace('Ã§', String.raw `\+`).replace('Ã»', String.raw `\.`);
            return new RegExp(regexStr);
        });
        return ignoredTagExpressions.length > 0 && tags.some((t) => ignoredTagExpressions.some((s) => s.test(t)));
    };
    function withTiming(label, callback, millis, info) {
        if (window.performance && window.performance.now) {
            var start = window.performance.now();
            callback();
            var time = window.performance.now() - start;
            var isDev = StackExchange.options && StackExchange.options.user && StackExchange.options.user.isDeveloper;
            if (isDev || (time > millis)) {
                console.log('\'' + label + '\' took ' + time.toString() + 'ms');
                if (isDev && info && (time > millis))
                    console.log(info);
            }
        }
        else // timing not available
         {
            callback();
        }
    }
    let ApplyState;
    (function (ApplyState) {
        ApplyState[ApplyState["Ignored"] = 0] = "Ignored";
        ApplyState[ApplyState["Hidden"] = 1] = "Hidden";
        ApplyState[ApplyState["Watched"] = 2] = "Watched";
    })(ApplyState || (ApplyState = {}));
    function applyToSummary(selector, $containerEl, state) {
        const isStacksPostSummary = $containerEl.is('.js-post-summary');
        let cssClass;
        let tagClass;
        switch (state) {
            case ApplyState.Ignored:
                cssClass = isStacksPostSummary ? 's-post-summary__ignored' : 'tagged-ignored';
                tagClass = isStacksPostSummary ? 's-tag__ignored' : null;
                break;
            case ApplyState.Hidden:
                cssClass = isStacksPostSummary ? 'd-none' : 'tagged-ignored-hidden';
                tagClass = isStacksPostSummary ? 's-tag__ignored' : null;
                break;
            case ApplyState.Watched:
                cssClass = isStacksPostSummary ? 's-post-summary__watched' : 'tagged-interesting';
                tagClass = isStacksPostSummary ? 's-tag__watched' : null;
                break;
        }
        $containerEl.addClass(cssClass);
        if (tagClass) {
            // see: Tag.RenderLink
            const tagSelector = selector.replace(/([.\s])t-/g, '$1js-tagname-');
            $containerEl.find(tagSelector).addClass(tagClass);
        }
    }
    function applyPrefs(isInitialLoad, dontAffect, forUserId) {
        savePreferenceForUserId = forUserId;
        // save our dontAffect list
        if (dontAffect) {
            for (var i = 0; i < dontAffect.length; i++) {
                if (previouslyDontApply.indexOf(dontAffect[i]) == -1) {
                    previouslyDontApply.push(dontAffect[i]);
                }
            }
        }
        dontAffect = previouslyDontApply;
        var $ignoredTags = find('.js-ignored-tag-list .post-tag');
        var $watchedTags = find('.js-watched-tag-list .post-tag');
        if (isInitialLoad && $ignoredTags.length == 0 && $watchedTags.length == 0)
            return;
        const summarySelector = "div.question-summary, .js-post-summary";
        // reset classes..
        $(summarySelector)
            .removeClass("tagged-ignored tagged-ignored-hidden tagged-interesting")
            .removeClass("d-none s-post-summary__ignored s-post-summary__watched");
        $('div.tags').find(".s-tag__ignored, .s-tag__watched").removeClass(".s-tag__ignored, .s-tag__watched");
        // create selectors for interesting/ignored/inferred tags..
        var ignoredSelector = getTagsSelector($ignoredTags, dontAffect);
        var interestedSelector = getTagsSelector($watchedTags, dontAffect);
        if (ignoredSelector.length > 0) {
            var ignoredClass = hideIgnored() ? ApplyState.Hidden : ApplyState.Ignored;
            withTiming('ignored', function () {
                const container = $('div.tags').filter(ignoredSelector).closest(summarySelector);
                applyToSummary(ignoredSelector, container, ignoredClass);
            }, 1500, ignoredSelector);
        }
        if (interestedSelector.length > 0) {
            withTiming('interesting', function () {
                const container = $('div.tags').filter(interestedSelector).closest(summarySelector);
                applyToSummary(interestedSelector, container, ApplyState.Watched);
            }, 1500, interestedSelector);
        }
    }
    ;
    const removeTags = function (tagListSelector, inputSelector) {
        var tags = StackExchange.helpers.sanitizeAndSplitTags($(inputSelector).val(), /* allowWildcards = */ true, /* allowOperators = */ false);
        find(tagListSelector).find('.js-tag').filter(function () { return tags.indexOf($(this).data('tag-name') || $(this).find('.post-tag').text()) !== -1; }).remove();
    };
    const updateVisibleTagPrefs = function (tagName, action) {
        var input = $('<input>').val(tagName);
        if (action == 'favorite') {
            removeTags('.js-ignored-tag-list', input);
            saveTags(input, '.js-watched-tag-list', 20, false, /* clientOnly = */ true);
        }
        if (action == 'ignore') {
            removeTags('.js-watched-tag-list', input);
            showIgnoredTags();
            showRemainingIgnored();
            saveTags(input, '.js-ignored-tag-list', 25, false, /* clientOnly = */ true);
        }
        if (action == 'clear') {
            StackExchange.helpers.hideToasts();
            removeTags('.js-watched-tag-list, .js-ignored-tag-list', input);
            applyPrefs();
            updateVisualState();
        }
    };
    function hideEditorOnOutsideClicks(evt) {
        if (!$.contains(document.documentElement, evt.target) ||
            $(evt.target).closest('.js-tag-preferences-container, .js-edit-interesting, .s-modal, .message').length > 0) {
            return;
        }
        hideEditor();
    }
    const initTagFormHandlers = function () {
        var $container = $(".js-tag-preferences-container");
        $container.on('click', '.js-show-add-ignored, .js-edit-ignored-tags', (e) => {
            e.preventDefault();
            showEditor(EditMode.Ignored);
            $container.find('.js-add-ignored-container input[type=text]').focus();
        });
        $container.on('click', '.js-show-add-watched, .js-edit-watched-tags', (e) => {
            e.preventDefault();
            showEditor(EditMode.Watching);
            $container.find('.js-add-watched-container input[type=text]').focus();
        });
        $container.on('click', '.js-edit-all-tags', (e) => { showEditor(EditMode.Full); e.preventDefault(); });
        $container.on('click', '.js-show-remaining-ignored', () => showRemainingIgnored());
        $container.on('click', '.js-hide-ignored, .js-dim-ignored', () => { savePreference(30, hideIgnored()); applyPrefs(); });
        $container.on('click', '.js-hide-editor', () => hideEditor());
        $container.on('click', '.js-tag-frequency-menu-toggle', function () {
            var $button = $(this);
            $button.find('.dropdown').toggleClass("d-none").find('a').each((_, el) => {
                var $el = $(el);
                if ($el.data('frequency') === $button.find('.js-tag-frequency-label').data('frequency')) {
                    $el.addClass('selected');
                }
                else {
                    $el.removeClass('selected');
                }
            });
        });
        $container.on('click', '.dropdown a', function () {
            let $this = $(this);
            let tagName = $this.closest('.js-tag').find('.post-tag').text();
            let frequency = $this.data('frequency');
            if (tagName) {
                changeSubscriptionFrequency(tagName, frequency, function (result) {
                    $this.closest('.dropdown').addClass('d-none');
                });
            }
            return false; // these are <a> and shouldn't affect navigation
        });
        $container.on('click', (evt) => {
            var dropdownNotToHide = $(evt.target).closest('.js-tag-frequency-menu-toggle').find('.dropdown').get(0);
            find('.dropdown').filter((_, el) => el != dropdownNotToHide).addClass('d-none');
        });
        $(".js-edit-interesting").on("click", function (e) {
            e.preventDefault();
            if ($container.length) {
                showEditor(EditMode.Watching);
                $("html, body").animate({ scrollTop: $container.offset().top }, 400, () => $container.find('.js-add-watched-container input[type=text]').focus());
            }
        });
    };
    const init = function () {
        StackExchange.tagmenu.init();
        bindTagEmbedClicks();
        initTagFormHandlers();
        updateVisualState();
    };
    const changeSubscriptionFrequency = function (tagName, frequency, callback) {
        var uid = null;
        if (typeof forUserId != 'undefined') { // moderators will have this variable set
            uid = String(forUserId);
        }
        var args = { "fkey": StackExchange.options.user.fkey, "tagName": tagName, "notificationFrequencyId": frequency, "forUserId": uid };
        $.post("/users/tags/subscribe", args, function (result, textStatus, jqXHR) {
            if (result) {
                find('.js-watched-tag-list.js-has-subscriptions .js-tag').each(function () {
                    var $tag = $(this);
                    if ($tag.find('.post-tag').text() === tagName) {
                        $tag.find('.js-tag-frequency-label').text(labelForFrequency(frequency)).data('frequency', frequency);
                    }
                });
            }
            if (callback) {
                callback(result, textStatus, jqXHR);
            }
        }).fail((response) => {
            var _a;
            var error = (_a = response.responseJSON.ErrorMessage) !== null && _a !== void 0 ? _a : response.responseJSON;
            StackExchange.helpers.showToast("Error updating notification frequency: " + error, { type: "danger" });
        });
    };
    const labelForFrequency = function (frequency) {
        /** This is mirrored in TagSetRow.cs => LabelForNotificationFrequency */
        switch (frequency) {
            case StackOverflow.Models.NotificationFrequencyTypeId.None:
                return __tr(["Never"], undefined, "en", []);
            case StackOverflow.Models.NotificationFrequencyTypeId.Daily:
                return __tr(["Daily"], undefined, "en", []);
            case StackOverflow.Models.NotificationFrequencyTypeId.FifteenMinutes:
                return __tr(["As soon as possible"], undefined, "en", []);
            default:
                return __tr(["Unknown"], undefined, "en", []);
        }
    };
    const setEmbeddedTagPrefs = function ($embed, action) {
        const tagName = $embed.data('tag-name');
        const slug = $embed.data('slug').toString();
        // update interesting tags (client side)
        registerTemplatePostTag($embed.find('.js-templates .post-tag'));
        updateVisibleTagPrefs(tagName, action);
        // update update favorites (server side)
        $.ajax({
            type: 'POST',
            url: '/tags/' + encodeURIComponent(slug) + '/prefs',
            data: { 'action': action, 'fkey': StackExchange.options.user.fkey },
            dataType: 'html',
            success: function (result) {
                $('.js-embedded-tag-preferences').each((_, elem) => {
                    var _a;
                    var $embed = $(elem);
                    if (((_a = $embed.data('slug')) === null || _a === void 0 ? void 0 : _a.toString()) === slug) {
                        // The existing embed may have additional classes from the CSHTML. Copy them over.
                        var $newEmbed = $('' + result).addClass(elem.className);
                        $newEmbed.find('.js-tag-frequency-popup').remove();
                        $embed.replaceWith($newEmbed);
                    }
                });
                showWatchingToast(tagName, result);
            },
            error: function (res, textStatus, errorThrown) {
            },
            complete: function () {
                $embed.find('.is-loading').removeClass('is-loading');
            }
        });
    };
    const showWatchingToast = function (tagName, result) {
        var $result = $('' + result), $frequencyPopup = $result.find('.js-tag-frequency-popup').remove(), newFrequency = $result.data('new-frequency');
        if ($frequencyPopup.length > 0) {
            var channelTag = $("span.js-channeltag-" + tagName).clone();
            channelTag[0].classList.remove("d-none");
            var watchingMessage = __tr(["You're now watching $tag$."], {tag: channelTag[0].outerHTML}, "en", []);
            StackExchange.helpers.showToast(watchingMessage, {
                role: 'alert',
                type: 'success',
                useRawHtml: true,
                actions: [
                    {
                        labelContents: "<span class='td-underline'>Manage notification frequency</span>",
                        click: () => showFrequencyPopup(tagName, result)
                    }
                ]
            });
        }
        else {
            showFrequencyToast(tagName, newFrequency);
        }
    };
    const showFrequencyPopup = function (tagName, result) {
        var $result = $(result), $frequencyPopup = $result.find('.js-tag-frequency-popup').remove();
        StackExchange.helpers.showModal($frequencyPopup);
        $frequencyPopup.find('.js-frequency-submit').click(function () {
            const checkedFrequencyValue = $frequencyPopup.find(".js-frequency:checked").val();
            const checkedFrequency = StackOverflow.Models.NotificationFrequencyTypeId[checkedFrequencyValue];
            changeSubscriptionFrequency(tagName, checkedFrequency, () => $frequencyPopup.fadeOutAndRemove());
        });
    };
    const showFrequencyToast = function (tagName, newFrequency) {
        var frequencyMessage;
        if (newFrequency == StackOverflow.Models.NotificationFrequencyTypeId.Daily) {
            frequencyMessage = __tr(["You'll receive daily emails when there is new activity in this tag."], undefined, "en", []);
        }
        else if (newFrequency == StackOverflow.Models.NotificationFrequencyTypeId.FifteenMinutes) {
            frequencyMessage = __tr(["You'll receive an email when there is new activity in this tag."], undefined, "en", []);
        }
        else {
            return;
        }
        var watchingMessage = __tr(["You're now watching $tag$."], {tag: '<span class="d-inline-block bg-green-300 px4 py2 bar-sm">' + StackExchange.helpers.htmlEncode(tagName) + '</span>'}, "en", []);
        var $message = StackExchange.helpers.showToast(watchingMessage + ' ' + frequencyMessage, {
            role: 'alert',
            type: 'success',
            actions: [
                {
                    labelContents: Svg.UndoSm().add($('<span/>').text(__tr(["Undo"], undefined, "en", []))),
                    click: () => changeSubscriptionFrequency(tagName, StackOverflow.Models.NotificationFrequencyTypeId.None, function (result) {
                        if (result) {
                            $message.fadeOutAndRemove();
                        }
                    })
                }
            ],
            useRawHtml: true
        });
    };
    const bindTagEmbedClicks = function () {
        $(document).on('click', '.js-embedded-tag-preferences button', function () {
            var $this = $(this), $embed = $this.closest('.js-embedded-tag-preferences'), action = $this.data('action');
            if (!$this.is(".is-loading")) {
                $this.addClass('is-loading');
                setEmbeddedTagPrefs($embed, action);
            }
        });
    };
    return {
        applyPrefs: applyPrefs,
        isIgnored: isIgnored,
        resetDontApplyCache: function () { previouslyDontApply = []; },
        init: init,
    };
})();


/***/ }),

/***/ "./_Scripts/PartialJS/full/99_UserFlags.ts":
/*!*************************************************!*\
  !*** ./_Scripts/PartialJS/full/99_UserFlags.ts ***!
  \*************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
//
// Modulifying note: intentionally not deleting this file since legacy code may reference it directly
//
var StackExchange;
(function (StackExchange) {
    var helpers;
    (function (helpers) {
        function toggleUserFlags(flags, value, userId) {
            const user = StackExchange.options.user;
            return $.post(`/users/toggle-flag/${flags}/${!!value}`, {
                fkey: user.fkey,
                userId: userId || user.proxiedUserId || user.userId
            }).then(response => !!response.hasFlags);
        }
        helpers.toggleUserFlags = toggleUserFlags;
        function toggleAccountPreferenceFlags(flags, value, accountId) {
            const user = StackExchange.options.user;
            return $.post(`/account/toggle-preference-flag`, {
                fkey: user.fkey,
                accountId: accountId || user.accountId,
                flag: flags,
                status: value
            }).then(response => !!response.hasFlags);
        }
        helpers.toggleAccountPreferenceFlags = toggleAccountPreferenceFlags;
        ;
    })(helpers = StackExchange.helpers || (StackExchange.helpers = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full/99_rollback.ts":
/*!************************************************!*\
  !*** ./_Scripts/PartialJS/full/99_rollback.ts ***!
  \************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
var StackExchange;
(function (StackExchange) {
    var rollback;
    (function (rollback) {
        async function rollbackRevision($button) {
            let url = $button.attr('data-url');
            let message = $button.attr('data-description');
            let confirmed = await StackExchange.helpers.showConfirmModal({
                title: __tr(["Are you sure you want to rollback?"], undefined, "en", []),
                body: message,
                buttonLabel: __tr(["Rollback"], undefined, "en", []),
                returnElements: $button,
            });
            if (!confirmed) {
                return;
            }
            let result = await $.post(url, { fkey: StackExchange.options.user.fkey });
            if (result.success) {
                window.location.reload();
            }
            else if (result.message) {
                StackExchange.helpers.showToast(result.message, { type: 'danger' });
            }
        }
        function bindButtons() {
            $(document).on('click', '.js-rollback-revision', function () { rollbackRevision($(this)); });
        }
        rollback.bindButtons = bindButtons;
    })(rollback = StackExchange.rollback || (StackExchange.rollback = {}));
})(StackExchange || (StackExchange = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full/definitions/CSharpToTypescript.ts":
/*!*******************************************************************!*\
  !*** ./_Scripts/PartialJS/full/definitions/CSharpToTypescript.ts ***!
  \*******************************************************************/
/***/ (() => {

/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


"use strict";
// ========================================================= //
// THIS FILE IS AUTOMATICALLY GENERATED                      //
//                                                           //
// Changes will be discarded on next compile                 //
//                                                           //
// To modify this file, make changes to:                     //
// _Scripts\PartialJS\full\definitions\CSharpToTypescript.cs //
// ========================================================= //
// StackOverflow.Models.NotificationFrequencyTypeId
var StackOverflow;
(function (StackOverflow) {
    var Models;
    (function (Models) {
        let NotificationFrequencyTypeId;
        (function (NotificationFrequencyTypeId) {
            NotificationFrequencyTypeId[NotificationFrequencyTypeId["None"] = 0] = "None";
            NotificationFrequencyTypeId[NotificationFrequencyTypeId["FifteenMinutes"] = 1] = "FifteenMinutes";
            NotificationFrequencyTypeId[NotificationFrequencyTypeId["Daily"] = 2] = "Daily";
        })(NotificationFrequencyTypeId = Models.NotificationFrequencyTypeId || (Models.NotificationFrequencyTypeId = {}));
    })(Models = StackOverflow.Models || (StackOverflow.Models = {}));
})(StackOverflow || (StackOverflow = {}));
// StackOverflow.Models.AccountPreferenceFlags
(function (StackOverflow) {
    var Models;
    (function (Models) {
        let AccountPreferenceFlags;
        (function (AccountPreferenceFlags) {
            AccountPreferenceFlags[AccountPreferenceFlags["None"] = 0] = "None";
            AccountPreferenceFlags[AccountPreferenceFlags["HideLeftNavigation"] = 1] = "HideLeftNavigation";
            AccountPreferenceFlags[AccountPreferenceFlags["EnableKeyboardShortcuts"] = 2] = "EnableKeyboardShortcuts";
            AccountPreferenceFlags[AccountPreferenceFlags["HideHotNetworkQuestionsSidebar"] = 8] = "HideHotNetworkQuestionsSidebar";
            AccountPreferenceFlags[AccountPreferenceFlags["DisableNewsletterPersonalization"] = 16] = "DisableNewsletterPersonalization";
            AccountPreferenceFlags[AccountPreferenceFlags["DismissFreemiumTeamsCreationCTA"] = 32] = "DismissFreemiumTeamsCreationCTA";
            AccountPreferenceFlags[AccountPreferenceFlags["UnifiedSearchActiveByDefault"] = 64] = "UnifiedSearchActiveByDefault";
            AccountPreferenceFlags[AccountPreferenceFlags["DismissReviewQueueNoticeCampaign"] = 128] = "DismissReviewQueueNoticeCampaign";
            AccountPreferenceFlags[AccountPreferenceFlags["ForYouUnreadOnlyByDefault"] = 256] = "ForYouUnreadOnlyByDefault";
            AccountPreferenceFlags[AccountPreferenceFlags["DismissCollectivesNavbarCTA"] = 512] = "DismissCollectivesNavbarCTA";
            AccountPreferenceFlags[AccountPreferenceFlags["SearchTagNamesOnly"] = 1024] = "SearchTagNamesOnly";
            AccountPreferenceFlags[AccountPreferenceFlags["HideSGPostsOutsideOfStagingGround"] = 2048] = "HideSGPostsOutsideOfStagingGround";
        })(AccountPreferenceFlags = Models.AccountPreferenceFlags || (Models.AccountPreferenceFlags = {}));
    })(Models = StackOverflow.Models || (StackOverflow.Models = {}));
})(StackOverflow || (StackOverflow = {}));
// StackOverflow.Models.UserFlags
(function (StackOverflow) {
    var Models;
    (function (Models) {
        let UserFlags;
        (function (UserFlags) {
            UserFlags[UserFlags["None"] = 0] = "None";
            UserFlags[UserFlags["DisableSideNav"] = 1073741824] = "DisableSideNav";
            UserFlags[UserFlags["TeamGuide"] = 1] = "TeamGuide";
            UserFlags[UserFlags["DismissMarkdownEditorHelp"] = 2] = "DismissMarkdownEditorHelp";
            UserFlags[UserFlags["HideLeftNavigation"] = 4] = "HideLeftNavigation";
            UserFlags[UserFlags["DismissMentionsCallout"] = 8] = "DismissMentionsCallout";
            UserFlags[UserFlags["DismissQuestionPageProductBanner"] = 16] = "DismissQuestionPageProductBanner";
            UserFlags[UserFlags["DismissWelcomeModal"] = 32] = "DismissWelcomeModal";
            UserFlags[UserFlags["DismissCloseReopenPrivilegePopover"] = 64] = "DismissCloseReopenPrivilegePopover";
            UserFlags[UserFlags["DismissCloseReopenPrivilegeExplanationModal"] = 128] = "DismissCloseReopenPrivilegeExplanationModal";
            UserFlags[UserFlags["DismissPostReactionIntroPopover"] = 256] = "DismissPostReactionIntroPopover";
            UserFlags[UserFlags["DismissFollowQuestionIntroPopover"] = 512] = "DismissFollowQuestionIntroPopover";
            UserFlags[UserFlags["DismissClosedEditModal"] = 1024] = "DismissClosedEditModal";
            UserFlags[UserFlags["DismissModalForCompletedEditOnClosedQuestion"] = 2048] = "DismissModalForCompletedEditOnClosedQuestion";
            UserFlags[UserFlags["DismissAddAdminNotice"] = 4096] = "DismissAddAdminNotice";
            UserFlags[UserFlags["ShowReviewQueueNotice"] = 8192] = "ShowReviewQueueNotice";
            UserFlags[UserFlags["ReviewQueueNoticeIsForCampaign"] = 16384] = "ReviewQueueNoticeIsForCampaign";
            UserFlags[UserFlags["DismissReviewOnboarding"] = 32768] = "DismissReviewOnboarding";
            UserFlags[UserFlags["ShowNewReviewerOnboarding"] = 65536] = "ShowNewReviewerOnboarding";
            UserFlags[UserFlags["DismissModalForFirstPostQueue"] = 131072] = "DismissModalForFirstPostQueue";
            UserFlags[UserFlags["DismissModalForLateAnswerQueue"] = 262144] = "DismissModalForLateAnswerQueue";
            UserFlags[UserFlags["DismissModalForCloseVoteQueue"] = 524288] = "DismissModalForCloseVoteQueue";
            UserFlags[UserFlags["DismissModalForReopenVoteQueue"] = 1048576] = "DismissModalForReopenVoteQueue";
            UserFlags[UserFlags["DismissModalForTriageQueue"] = 2097152] = "DismissModalForTriageQueue";
            UserFlags[UserFlags["DismissModalForHelperQueue"] = 4194304] = "DismissModalForHelperQueue";
            UserFlags[UserFlags["DismissModalForSuggestedEditQueue"] = 8388608] = "DismissModalForSuggestedEditQueue";
            UserFlags[UserFlags["DismissModalForLowQualityPostQueue"] = 16777216] = "DismissModalForLowQualityPostQueue";
            UserFlags[UserFlags["DismissModalForFirstQuestionsQueue"] = 33554432] = "DismissModalForFirstQuestionsQueue";
            UserFlags[UserFlags["DismissModalForFirstAnswersQueue"] = 67108864] = "DismissModalForFirstAnswersQueue";
            UserFlags[UserFlags["DismissModalForContentHealthQueue"] = 134217728] = "DismissModalForContentHealthQueue";
            UserFlags[UserFlags["IsShareFeedbackDefaultSelf"] = 268435456] = "IsShareFeedbackDefaultSelf";
            UserFlags[UserFlags["DismissNewStagingGroundReviewerNotice"] = 536870912] = "DismissNewStagingGroundReviewerNotice";
            UserFlags[UserFlags["DismissNewStagingGroundAuthorNotice"] = 1073741824] = "DismissNewStagingGroundAuthorNotice";
            UserFlags[UserFlags["CollectivesExploredFeatures"] = -2147483648] = "CollectivesExploredFeatures";
            UserFlags[UserFlags["CollectivesReadBulletin"] = 1] = "CollectivesReadBulletin";
            UserFlags[UserFlags["CollectivesCheckedLeaderboard"] = 2] = "CollectivesCheckedLeaderboard";
            UserFlags[UserFlags["CollectivesLearnedAboutRoles"] = 4] = "CollectivesLearnedAboutRoles";
            UserFlags[UserFlags["CollectivesDiscoveredRecAnswers"] = 8] = "CollectivesDiscoveredRecAnswers";
            UserFlags[UserFlags["CollectivesSeenAll"] = 16] = "CollectivesSeenAll";
        })(UserFlags = Models.UserFlags || (Models.UserFlags = {}));
    })(Models = StackOverflow.Models || (StackOverflow.Models = {}));
})(StackOverflow || (StackOverflow = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/realtime.ts":
/*!****************************************!*\
  !*** ./_Scripts/PartialJS/realtime.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var expose_loader_exposes_EventEmitter_Content_Js_third_party_event_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! expose-loader?exposes=EventEmitter!../../Content/Js/third-party/event-emitter.js */ "./node_modules/expose-loader/dist/cjs.js?exposes=EventEmitter!./Content/Js/third-party/event-emitter-exposed.js");
/* harmony import */ var expose_loader_exposes_EventEmitter_Content_Js_third_party_event_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(expose_loader_exposes_EventEmitter_Content_Js_third_party_event_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LegacyJS_realtime_se_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../LegacyJS/realtime-se.js */ "./_Scripts/LegacyJS/realtime-se.js");
/* harmony import */ var _LegacyJS_realtime_se_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_LegacyJS_realtime_se_js__WEBPACK_IMPORTED_MODULE_1__);
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});






/***/ }),

/***/ "./_Scripts/PartialJS/util.ts":
/*!************************************!*\
  !*** ./_Scripts/PartialJS/util.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   importAll: () => (/* binding */ importAll)
/* harmony export */ });
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


function importAll(ctx) {
    // import each file in the folder, in alphabetical order
    const files = [...ctx.keys()];
    files.sort();
    for (const file of files) {
        ctx(file);
    }
}


/***/ }),

/***/ "./_Scripts/TopBar.ts":
/*!****************************!*\
  !*** ./_Scripts/TopBar.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attachInQuestionUrlRewriter: () => (/* binding */ attachInQuestionUrlRewriter)
/* harmony export */ });
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


const INQUESTION_KEYWORD = 'inquestion';
const INQUESTION_THIS_SEARCH_TERM = `${INQUESTION_KEYWORD}:this`;
const QUESTION_URL_REGEX = /\/questions\/(\d+)/i;
/**
 * Rewrite query parameter inquestion:this to inquestion:<question id> before submitting.
 * */
function attachInQuestionUrlRewriter(inputEl, location = document.location) {
    var _a;
    (_a = inputEl === null || inputEl === void 0 ? void 0 : inputEl.form) === null || _a === void 0 ? void 0 : _a.addEventListener("submit", () => {
        if (inputEl.value.includes(INQUESTION_THIS_SEARCH_TERM)) {
            let questionId = (location.pathname.match(QUESTION_URL_REGEX) || [])[1];
            if (!!questionId) {
                inputEl.value = inputEl.value.replace(INQUESTION_THIS_SEARCH_TERM, `${INQUESTION_KEYWORD}:${questionId}`);
            }
        }
    });
}


/***/ }),

/***/ "./_Scripts/_Declarations/TypeIdEnums.ts":
/*!***********************************************!*\
  !*** ./_Scripts/_Declarations/TypeIdEnums.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VoteTypeId: () => (/* binding */ VoteTypeId)
/* harmony export */ });
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


// TODO - it would be really nice to generate this via _CSharpToTypeScript.cs, but not an enum, just class with static int properties
// Must match `VoteTypeId.cs`
var VoteTypeId;
(function (VoteTypeId) {
    VoteTypeId[VoteTypeId["informModerator"] = -1] = "informModerator";
    VoteTypeId[VoteTypeId["undoMod"] = 0] = "undoMod";
    VoteTypeId[VoteTypeId["acceptedByOwner"] = 1] = "acceptedByOwner";
    VoteTypeId[VoteTypeId["upMod"] = 2] = "upMod";
    VoteTypeId[VoteTypeId["downMod"] = 3] = "downMod";
    VoteTypeId[VoteTypeId["offensive"] = 4] = "offensive";
    VoteTypeId[VoteTypeId["bookmark"] = 5] = "bookmark";
    VoteTypeId[VoteTypeId["close"] = 6] = "close";
    VoteTypeId[VoteTypeId["reopen"] = 7] = "reopen";
    VoteTypeId[VoteTypeId["bountyClose"] = 9] = "bountyClose";
    VoteTypeId[VoteTypeId["deletion"] = 10] = "deletion";
    VoteTypeId[VoteTypeId["undeletion"] = 11] = "undeletion";
    VoteTypeId[VoteTypeId["spam"] = 12] = "spam";
    VoteTypeId[VoteTypeId["reaction1"] = 17] = "reaction1";
    VoteTypeId[VoteTypeId["helpful"] = 18] = "helpful";
    VoteTypeId[VoteTypeId["thankYou"] = 19] = "thankYou";
    VoteTypeId[VoteTypeId["wellWritten"] = 20] = "wellWritten";
    VoteTypeId[VoteTypeId["follow"] = 21] = "follow";
    VoteTypeId[VoteTypeId["reaction2"] = 22] = "reaction2";
    VoteTypeId[VoteTypeId["reaction3"] = 23] = "reaction3";
    VoteTypeId[VoteTypeId["reaction4"] = 24] = "reaction4";
    VoteTypeId[VoteTypeId["reaction5"] = 25] = "reaction5";
    VoteTypeId[VoteTypeId["reaction6"] = 26] = "reaction6";
    VoteTypeId[VoteTypeId["reaction7"] = 27] = "reaction7";
    VoteTypeId[VoteTypeId["reaction8"] = 28] = "reaction8";
    VoteTypeId[VoteTypeId["outdated"] = 29] = "outdated";
    VoteTypeId[VoteTypeId["notOutdated"] = 30] = "notOutdated";
    VoteTypeId[VoteTypeId["preVote"] = 31] = "preVote";
    VoteTypeId[VoteTypeId["collectiveDiscussionUpvote"] = 32] = "collectiveDiscussionUpvote";
    VoteTypeId[VoteTypeId["collectiveDiscussionDownvote"] = 33] = "collectiveDiscussionDownvote";
})(VoteTypeId || (VoteTypeId = {}));


/***/ }),

/***/ "./_Scripts/modules/general/controllers/character_counter_controller.ts":
/*!******************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/character_counter_controller.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CharacterCounterController)
/* harmony export */ });
/* harmony import */ var _utilities_debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utilities/debounce */ "./_Scripts/utilities/debounce.ts");
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


/**
 * The events to listen to on the target input field to update the visual
 * character counter.
 */
const msgUpdateEvents = ["blur", "focus", "keyup", "paste"];
/**
 * Events where we want to almost immediately announce to screen readers the
 * remaining character count. For example, when someone focuses on the input
 * field, we want to let them know how many characters are remaining immediately
 * so that they can keep that in mind as they start typing.
 */
const srMsgImmediateUpdateEvents = ["focus", "paste"];
/**
 * Events where we want a debounced announcement to screen readers because it
 * would not make sense to spam the user with these updates. For example, if
 * someone is typing normally we don't want to try announcing the new character
 * count after each key. Instead, we wait until they've paused in typing.
 */
const srMsgPoliteUpdateEvents = ["keyup"];
/**
 * Events where we want to stop any pending announcements to screen readers
 * because the message would no longer make sense. For example, when the user
 * has navigated to another field, we don't want to announce to them the remaining
 * count in the previous field they were in.
 */
const srMsgCancelEvents = ["blur"];
const { Base, stimulusCallback } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_1__.buildController)("se-character-counter")
    .withElementType()
    .withTargets("visibleMessage", "screenReaderMessage")
    .withValues({
    cssClasses: (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_1__.objectOfShape)(),
    ignoreWhitespace: Boolean,
    invalidState: Boolean,
    maxLength: Number,
    minLength: Number,
    messageMode: String,
    target: String,
})
    .build();
/**
 * A Stimulus controller for handling character counting (not to be confused with
 * card counting).
 *
 * ## Arguments
 *
 * Like all Stimulus controllers, the arguments are prefixed with
 * `data-se-character-counter-`.
 *
 * - `css-classes-value`: a JSON object representing CSS classes to apply to
 *   breakpoints when certain thresholds are met of the character limit. The keys
 *   should range from 0 to 1, inclusively.
 *
 *   ```js
 *   {
 *       "1.0": "fc-red-400",
 *       "0.5": "supernova",
 *       "0": "cool"
 *   }
 *   ```
 * - `ignore-whitespace-value`: when configured to true, white space at the
 *   beginning and end of the user input are ignored from calculations; also,
 *   consecutive whitespaces are calculated as one.
 * - `invalid-state-value`: a boolean value that is updated automatically on
 *   whether or not the given input meets the length criteria.
 * - `max-length-value`: the maximum number of characters that would be allowed
 *   in the target input field. Use this attribute when you **don't** use
 *   `maxlength` on the `<input />` because `maxlength` restricts input after
 *   that threshold.
 * - `message-mode-value`: either `minimal` or `descriptive`.
 *    * `minimal` looks like: `5 / 70 characters`
 *    * `descriptive` looks like:
 *      - `Enter up to 70 characters`
 *      - `20 characters left`
 *      - `Too long by 10 characters`
 * - `min-length-value`: the minimum number of characters that are required in
 *   the target input field. Use this attribute when you **don't** use
 *   `minlength` on the `<input />`.
 * - `target-value`: a valid `document.querySelector()` value for the `<input />`
 *   to watch for character counts.
 *
 *   This goes against Stimulus conventions, however, there's no controller to
 *   serve as a parent for `<input />`s right now so this will have to do as a
 *   workaround.
 *
 * ## Actions
 *
 * - `stateChange`: when the state of this counter changes from invalid to valid,
 *   based on min/max limits.
 */
class CharacterCounterController extends Base {
    constructor() {
        super(...arguments);
        this.breakPoints = [];
        this.cssClasses = {};
        this.srTimer = -1;
        this.updateVisualMessageImmediate = () => {
            const curr = this.getCurrentCount();
            const maxLength = this.getMaxLength();
            const minLength = this.getMinLength();
            if (this.messageModeValue === "minimal" /* CharacterCounterMode.Minimal */) {
                this.visibleMessageTarget.innerText = this.minimalMessage(curr, maxLength);
            }
            else if (this.messageModeValue === "descriptive" /* CharacterCounterMode.Descriptive */) {
                this.visibleMessageTarget.innerText = this.descriptiveMessage(curr, maxLength, minLength);
            }
            else {
                this.visibleMessageTarget.innerText = "";
                StackExchange.debug.log("Invalid message mode for this Character Counter controller");
                return;
            }
            this.invalidStateValue = curr < minLength || curr > maxLength;
            this.element.classList.remove(...Object.values(this.cssClasses).flat());
            const cssClass = this.getCssClass();
            if (cssClass) {
                this.element.classList.add(...cssClass);
            }
        };
        this.updateVisualMessage = (0,_utilities_debounce__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.updateVisualMessageImmediate, 100, {
            sliding: true,
        }).trigger;
        /**
         * Announce the current character count remaining to the screen reader
         * immediately without respecting any debouncing.
         *
         * **NOTE**: If the previous character count is the same as the current
         * count, then nothing new will be announced to screen readers. If you need
         * to re-announce something, see {@link announceToScreenReaderForcefully}.
         *
         * Use with caution!
         */
        this.announceToScreenReaderImmediate = () => {
            const curr = this.getCurrentCount();
            const maxLength = this.getMaxLength();
            const minLength = this.getMinLength();
            this.screenReaderMessageTarget.innerText = this.screenReaderMessage(curr, maxLength, minLength);
        };
        this.debounceUpdateScreenReader = (0,_utilities_debounce__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.announceToScreenReaderImmediate, 2000, // 2 seconds; we don't want to spam our announcements to SRs after every keystroke
        { sliding: true });
        this.announceToScreenReader = this.debounceUpdateScreenReader.trigger;
        /**
         * Announce the current character count remaining to the screen reader
         * immediately without respecting any debouncing. However, this will
         * re-announce any messages to screen readers if it's the same message as
         * before.
         *
         * Use with caution!
         */
        this.announceToScreenReaderForcefully = () => {
            this.screenReaderMessageTarget.innerText = "";
            this.srTimer = window.setTimeout(() => {
                this.announceToScreenReaderImmediate();
            }, 100);
        };
        this.cancelAnnounceToScreenReader = () => {
            this.debounceUpdateScreenReader.cancel();
            clearTimeout(this.srTimer);
        };
        this.cssClassesValueChanged = () => {
            this.breakPoints = [];
            this.cssClasses = {};
            Object.entries(this.cssClassesValue).forEach(([key, classes]) => {
                this.breakPoints.push(+key);
                this.cssClasses[+key] = classes.split(" ");
            });
            this.breakPoints.sort().reverse();
        };
        this.invalidStateValueChanged = () => {
            this.element.dispatchEvent(new CustomEvent("stateChange", {
                detail: {
                    invalid: this.invalidStateValue,
                },
            }));
        };
        this.targetValueChanged = (newTarget, oldTarget) => {
            if (oldTarget) {
                this.unbindEvents(document.querySelector(oldTarget));
            }
            this.loadTarget(newTarget);
            this.bindEvents(this.targetField);
        };
        this.loadTarget = (targetQuery) => {
            const target = document.querySelector(targetQuery);
            if (target === null) {
                throw new Error(`Selector did not find a DOM element matching: ${targetQuery}`);
            }
            const tag = target.tagName.toLowerCase();
            if (tag !== "input" && tag !== "textarea") {
                throw new Error(`Only inputs and text areas are supported as targets. Given: ${tag}`);
            }
            this.targetField = target;
        };
        this.bindEvents = (element) => {
            msgUpdateEvents.forEach((event) => {
                element.addEventListener(event, this.updateVisualMessage);
            });
            srMsgImmediateUpdateEvents.forEach((event) => {
                element.addEventListener(event, this.announceToScreenReaderForcefully);
            });
            srMsgPoliteUpdateEvents.forEach((event) => {
                element.addEventListener(event, this.announceToScreenReader);
            });
            srMsgCancelEvents.forEach((event) => {
                element.addEventListener(event, this.cancelAnnounceToScreenReader);
            });
        };
        this.unbindEvents = (element) => {
            if (element === null) {
                return;
            }
            msgUpdateEvents.forEach((event) => {
                element.removeEventListener(event, this.updateVisualMessage);
            });
            srMsgImmediateUpdateEvents.forEach((event) => {
                element.removeEventListener(event, this.announceToScreenReaderForcefully);
            });
            srMsgPoliteUpdateEvents.forEach((event) => {
                element.removeEventListener(event, this.announceToScreenReader);
            });
            srMsgCancelEvents.forEach((event) => {
                element.removeEventListener(event, this.cancelAnnounceToScreenReader);
            });
        };
        this.minimalMessage = (current, max) => {
            return __tr(["$current$ / $max$ characters","$current$ / $max$ characters","$current$ / $max$ characters","$current$ / $max$ characters"], {current,max}, "en", ["current","max"]);
        };
        this.descriptiveMessage = (currCount, maxLength, minLength) => {
            if (currCount === 0) {
                if (minLength === 0) {
                    return __tr(["Enter up to $max$ characters","Enter up to $max$ characters"], {max: maxLength}, "en", ["max"]);
                }
                return __tr(["Enter at least $min$ character","Enter at least $min$ characters"], {min: minLength}, "en", ["min"]);
            }
            else if (currCount < minLength) {
                return __tr(["$count$ more to go...","$count$ more to go..."], {count: minLength - currCount}, "en", ["count"]);
            }
            const diff = maxLength - currCount;
            if (diff >= 0) {
                return __tr(["$count$ character left","$count$ characters left"], {count: diff}, "en", ["count"]);
            }
            return __tr(["Too long by $count$ character","Too long by $count$ characters"], {count: Math.abs(diff)}, "en", ["count"]);
        };
        /**
         * Identical logic to {@link descriptiveMessage} except the wording returned
         * from this method is more geared towards human understandable phrasing
         * instead of shorthand.
         */
        this.screenReaderMessage = (currCount, maxLength, minLength) => {
            if (currCount === 0 && minLength === 0) {
                return __tr(["You have $max$ characters remaining","You have $max$ characters remaining"], {max: maxLength}, "en", ["max"]);
            }
            else if (currCount < minLength) {
                return __tr(["You need at least $min$ more characters","You need at least $min$ more characters"], {min: minLength}, "en", ["min"]);
            }
            const diff = maxLength - currCount;
            if (diff >= 0) {
                return __tr(["You have $count$ characters remaining","You have $count$ characters remaining"], {count: diff}, "en", ["count"]);
            }
            return __tr(["You have $count$ characters too many","You have $count$ characters too many"], {count: Math.abs(diff)}, "en", ["count"]);
        };
    }
    connect() {
        this.loadTarget(this.targetValue);
        this.bindEvents(this.targetField);
        this.updateVisualMessageImmediate();
    }
    disconnect() {
        this.unbindEvents(this.targetField);
    }
    getCssClass() {
        const currCount = this.getCurrentCount();
        const maxLength = this.getMaxLength();
        for (const breakpoint of this.breakPoints) {
            const cls = this.cssClasses[breakpoint];
            if (currCount > maxLength * breakpoint) {
                return cls;
            }
        }
        return [];
    }
    getCurrentCount() {
        const value = this.targetField.value;
        if (this.ignoreWhitespaceValue) {
            return value
                .replace(/\s+/g, " ")
                .replace(/^\s+/, "")
                .replace(/\s+$/, "").length;
        }
        // Normalize line endings for length checks, use CRLF, because that's what the server receives when we submit LFs
        return value.replace(/\r\n/g, "\n").replace(/\n/g, "\r\n").length;
    }
    getMaxLength() {
        let length;
        if ((length = this.targetField.getAttribute("maxlength")) !== null) {
            return +length;
        }
        // Compatibility with post-validation.js
        if ((length = this.targetField.getAttribute("data-max-length")) !== null) {
            return +length;
        }
        return this.maxLengthValue;
    }
    getMinLength() {
        let length;
        if ((length = this.targetField.getAttribute("minlength")) !== null) {
            return +length;
        }
        // Compatability with post-validation.js
        if ((length = this.targetField.getAttribute("data-min-length")) !== null) {
            return +length;
        }
        return this.minLengthValue;
    }
}
__decorate([
    stimulusCallback
], CharacterCounterController.prototype, "cssClassesValueChanged", void 0);
__decorate([
    stimulusCallback
], CharacterCounterController.prototype, "invalidStateValueChanged", void 0);
__decorate([
    stimulusCallback
], CharacterCounterController.prototype, "targetValueChanged", void 0);


/***/ }),

/***/ "./_Scripts/modules/general/controllers/delayed_popover_controller.ts":
/*!****************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/delayed_popover_controller.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DelayedPopoverController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-delayed-popover")
    .withTargets("controller")
    .withValues({
    delay: Number,
    afterVisible: Boolean,
})
    .build();
/**
 * This controller allows you to set a time delay to automatically show a popover
 * after the specified delay.
 *
 * - "controller" target is attached to the element that holds the s-popover controller.
 * - "delay" value should be the number of milliseconds to wait before showing the popover.
 * - "afterVisible" value should be true if you want to wait until the controller element is visible
 */
class DelayedPopoverController extends Base {
    connect() {
        if (!this.hasControllerTarget) {
            throw new Error("No popover controller element selector provided");
        }
        if (this.afterVisibleValue) {
            // Create an observer to watch for the controller element to become visible.
            // Once visible, we start the one-shot timer to show the popover, and unregister
            // the observer.
            const observer = new IntersectionObserver((entries, observer) => {
                if (entries[0].isIntersecting) {
                    this.showPopoverAfterDelay(this.delayValue);
                    observer.unobserve(this.controllerTarget);
                }
            });
            observer.observe(this.controllerTarget);
        }
        else {
            this.showPopoverAfterDelay(this.delayValue);
        }
    }
    showPopoverAfterDelay(delay) {
        setTimeout(() => {
            Stacks.showPopover(this.controllerTarget);
        }, delay);
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/controllers/dismiss_controller.ts":
/*!********************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/dismiss_controller.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DismissController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-dismiss")
    .withTargets("deletable")
    .withValues({
    endpoint: String,
    fkey: String,
})
    .build();
/**
 * This controller enables quick wire up of buttons to dismiss notifications, banners, popopvers, etc.
 * It requires the following properties to be wired up:
 *
 * - "deletable" target on the element(s) that should be deleted from the page after a successful dismiss
 * - "endpoint" value that specifies which endpoint should be hit to record the dismiss action
 * - "fkey" value used for XSRF protection
 * - A call to the performDismiss action on the controller to perform the dismiss (wire this up on the clickable element that dismisses)
 */
class DismissController extends Base {
    performDismiss() {
        if (!this.hasEndpointValue) {
            throw new Error("Dismiss endpoint required");
        }
        if (!this.hasDeletableTarget) {
            throw new Error("At least one deletable target required");
        }
        if (!this.hasFkeyValue) {
            throw new Error("fkey value required");
        }
        const formData = new FormData();
        formData.append("fkey", this.fkeyValue);
        fetch(this.endpointValue, {
            method: "POST",
            body: formData,
        }).then(() => {
            this.deletableTargets.forEach((element) => element.remove());
        });
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/controllers/draggable_sort_controller.ts":
/*!***************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/draggable_sort_controller.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DraggableSortController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-ui/ui/widgets/sortable */ "./node_modules/jquery-ui/ui/widgets/sortable.js");
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_1__);
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});




const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-draggable-sort")
    .withValues({
    sortAxis: String,
    placeholderClass: String,
    handleSelector: String,
})
    .withTargets("sortable")
    .build();
/**
 * A StimulusJS controller that allows dragging HTML elements to sort them.
 * It requires the following properties to be wired up:
 *
 * - "sortable" target on the elements that should be drag sortable
 * - "sort-axis" value that specifies which axis the elements should be sortable on (either "x" or "y")
 * - "placeholder-class" value that specifies the class to use for the placeholder element (optional)
 * - "handle-selector" value that specifies the selector to use for the handle element. By default it uses the whole sortable element. (optional)
 */
class DraggableSortController extends Base {
    connect() {
        if (["x", "y"].indexOf(this.sortAxisValue) === -1) {
            throw new Error("The sort-axis value must be either 'x' or 'y'.");
        }
        $(this.element).sortable({
            axis: this.sortAxisValue,
            items: "[data-se-draggable-sort-target='sortable']",
            opacity: 1.0,
            placeholder: this.hasPlaceholderClassValue
                ? this.placeholderClassValue
                : undefined,
            handle: this.hasHandleSelectorValue
                ? this.handleSelectorValue
                : undefined,
        });
    }
    sortableTargetConnected() {
        if ($(this.element).sortable("instance")) {
            $(this.element).sortable("refresh");
        }
    }
    sortableTargetDisconnected() {
        if ($(this.element).sortable("instance")) {
            $(this.element).sortable("refresh");
        }
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/controllers/follow_post_controller.ts":
/*!************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/follow_post_controller.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FollowPostController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/* harmony import */ var _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../PartialJS/full-common/99_PostTypeId.mod */ "./_Scripts/PartialJS/full-common/99_PostTypeId.mod.ts");
/* harmony import */ var _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../_Declarations/TypeIdEnums */ "./_Scripts/_Declarations/TypeIdEnums.ts");
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/* harmony import */ var _LegacyJS_stub_mod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../LegacyJS/stub.mod */ "./_Scripts/LegacyJS/stub.mod.js");
/* harmony import */ var _Shared_options_mod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../Shared/options.mod */ "./_Scripts/Shared/options.mod.ts");
/* harmony import */ var _LegacyJS_full_common_21_OpenID_mod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../LegacyJS/full-common/21_OpenID.mod */ "./_Scripts/LegacyJS/full-common/21_OpenID.mod.js");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});









const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-follow-post")
    .withTargets("follow")
    .withValues({
    postId: Number,
    postTypeId: Number,
    isFollowing: Boolean,
    followSuccessToastOverride: String,
    unfollowSuccessToastOverride: String,
    showPopover: { type: Boolean, default: true },
    anonymousUrl: String,
})
    .build();
/**
 * This controller enables post follows/unfollows. Currently does not support event tracking.
 * It requires the following properties to be wired up:
 *
 * - "follow" target on the element that triggers the follow/unfollow action
 * - "postId" value that specifies the post to be followed/unfooleds
 * - "postTypeId" value used for to customize tooltips and notification message
 *.- "isFollowing" value that indicates whether the post is already being followed
 * - "followSuccessToastOverride" - optional parameter, overrides the on follow success toast message
 * - "unfollowSuccessToastOverride" - optional parameter, overrides the on unfollow success toast message
 * - "showPopover" - optional parameter, defaults to true and show a popover on follow
 * - "anonymousUrl" - optional parameter
 */
class FollowPostController extends Base {
    connect() {
        this.updateUI(this.isFollowingValue);
        this.followTarget.onclick = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_5__["default"].user.isAnonymous
            ? this.bindAnonymousPopup.bind(this)
            : this.bindFollowUnfollow.bind(this);
    }
    bindFollowUnfollow() {
        const followTarget = this.followTarget;
        const originalIsFollowing = this.followTarget.getAttribute("aria-pressed") === "true";
        const newIsFollowing = !originalIsFollowing;
        $.ajax({
            type: "POST",
            url: `/posts/${this.postIdValue}/vote/${_Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_2__.VoteTypeId.follow}`,
            data: {
                fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_5__["default"].user.fkey,
                undo: originalIsFollowing, // if it is currently following, that means that we now have to undo the vote
            },
            success: (data) => {
                if (!data.Success) {
                    this.updateUI(originalIsFollowing);
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(data.Message, {
                        useRawHtml: true,
                        dismissable: true,
                        transient: false,
                        type: "danger",
                    });
                }
                else {
                    let followPopoverExists = $("#divFollowingConfirm-" + this.postIdValue).length >
                        0;
                    if (data.Message && this.showPopoverValue) {
                        if (!followPopoverExists) {
                            $(data.Message).insertAfter(followTarget);
                            followPopoverExists = true;
                            this.bindPopoverUnfollow();
                        }
                        // always want to make sure that these are set properly, since other code below
                        // messes with this for removing the new feature popover
                        followTarget.setAttribute("aria-controls", "divFollowingConfirm-" + this.postIdValue);
                        followTarget.setAttribute("data-controller", "s-popover s-tooltip");
                    }
                    if (newIsFollowing) {
                        // just started following, show the popover
                        if (followPopoverExists && this.showPopoverValue) {
                            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.hideToasts)();
                            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.toggleStacksPopover)($(followTarget), true);
                        }
                        else {
                            // can't find the popover controller for any reason, still show a confirmation with toast message
                            this.showFollowSuccessToast();
                        }
                    }
                    else {
                        // just unfollowed, show message at top of screen confirming
                        this.showUnfollowSuccessToast();
                        if (followPopoverExists && this.showPopoverValue) {
                            // if the popover was open (for example, user clicked the popover unfollow button) then hide it
                            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.toggleStacksPopover)($(followTarget), false);
                        }
                    }
                }
                this.updateUI(newIsFollowing);
                followTarget.removeAttribute("disabled");
            },
            error: () => {
                this.updateUI(originalIsFollowing);
                followTarget.removeAttribute("disabled");
            },
        });
    }
    bindAnonymousPopup() {
        $.ajax({
            type: "POST",
            url: this.hasAnonymousUrlValue
                ? this.anonymousUrlValue
                : `/posts/popup/anon-vote/${this.postIdValue}?voteTypeId=${_Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_2__.VoteTypeId.follow}`,
            data: { fkey: StackExchange.options.user.fkey },
            success: function (html) {
                (0,_LegacyJS_full_common_21_OpenID_mod__WEBPACK_IMPORTED_MODULE_6__.showLoginModal)(html);
            },
            error: () => {
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)("An error occurred.", {
                    type: "danger",
                });
            },
        });
    }
    bindPopoverUnfollow() {
        $(".js-unfollow-post-confirm").on("click", () => {
            this.bindFollowUnfollow();
        });
    }
    updateUI(isFollowing) {
        if (!this.followTarget) {
            return;
        }
        this.followTarget.setAttribute("aria-pressed", isFollowing ? "true" : "false");
        if (this.showPopoverValue) {
            (0,_LegacyJS_stub_mod__WEBPACK_IMPORTED_MODULE_4__.setTooltipText)($(this.followTarget), this.getTooltipText(isFollowing));
        }
        this.followTarget.innerHTML = isFollowing
            ? __tr(["Following"], undefined, "en", [])
            : __tr(["Follow"], undefined, "en", []);
    }
    showFollowSuccessToast() {
        if (this.hasFollowSuccessToastOverrideValue) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(this.followSuccessToastOverrideValue, {
                transient: true,
                useRawHtml: true,
                type: "success",
            });
        }
        else {
            switch (this.postTypeIdValue) {
                case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_1__.PostTypeId.CollectiveDiscussion:
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(__tr(["Youâre now following this discussion"], undefined, "en", []), {
                        transient: true,
                    });
                    break;
                default:
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(__tr(["Youâre now following this post"], undefined, "en", []), {
                        transient: true,
                    });
            }
        }
    }
    showUnfollowSuccessToast() {
        if (this.hasUnfollowSuccessToastOverrideValue) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(this.unfollowSuccessToastOverrideValue, {
                transient: true,
            });
        }
        else {
            switch (this.postTypeIdValue) {
                case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_1__.PostTypeId.CollectiveDiscussion:
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(__tr(["Youâre no longer following this discussion."], undefined, "en", []), { transient: true });
                    break;
                default:
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_3__.showToast)(__tr(["Youâre no longer following this post"], undefined, "en", []), {
                        transient: true,
                    });
            }
        }
    }
    getTooltipText(isFollowing) {
        if (isFollowing) {
            switch (this.postTypeIdValue) {
                case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_1__.PostTypeId.CollectiveDiscussion:
                    return __tr(["Unfollow this discussion to stop receiving notifications"], undefined, "en", []);
                default:
                    return __tr(["Unfollow this post to stop receiving notifications"], undefined, "en", []);
            }
        }
        else {
            switch (this.postTypeIdValue) {
                case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_1__.PostTypeId.CollectiveDiscussion:
                    return __tr(["Follow this discussion to receive notifications"], undefined, "en", []);
                default:
                    return __tr(["Follow this post to receive notifications"], undefined, "en", []);
            }
        }
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/controllers/nav_prevention_controller.ts":
/*!***************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/nav_prevention_controller.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NavPreventionController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-nav-prevention").build();
/**
 * This controller prevents navigation away from the page if the user has unsaved changes
 *
 * It uses event delegation to listen for input events on input and textarea elements that
 * are children of the controller's element. By using event delegation by listening to the
 * controller's element, we can listen for input events on elements that are added to the
 * page after the controller is initialized.
 */
class NavPreventionController extends Base {
    constructor() {
        super(...arguments);
        this._shouldInterruptNav = false;
        this._wasInterrupting = false;
    }
    connect() {
        // Ensure proper "this" binding for the handler methods
        this.windowUnloadHandler = this.windowUnloadHandler.bind(this);
        this.navPreventionInputHandler =
            this.navPreventionInputHandler.bind(this);
        this.pause = this.pause.bind(this);
        this.resume = this.resume.bind(this);
        window.addEventListener("beforeunload", this.windowUnloadHandler, {
            capture: true,
        });
        this.element.addEventListener("input", this.navPreventionInputHandler);
    }
    disconnect() {
        window.removeEventListener("beforeunload", this.windowUnloadHandler, {
            capture: true,
        });
        this.element.removeEventListener("input", this.navPreventionInputHandler);
    }
    pause() {
        this._wasInterrupting = this._shouldInterruptNav;
        this._shouldInterruptNav = false;
    }
    resume() {
        this._shouldInterruptNav = this._wasInterrupting;
    }
    windowUnloadHandler(event) {
        if (this._shouldInterruptNav) {
            // This is the standard procedure to activate nav prevention. The dialog shown to the user
            // is handled by the browser and cannot be customized. Here is the reference URL:
            // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#examples
            // Chrome doesn't follow standard as of the time this code was written, so it requires
            // event.returnValue to be a non-null string.
            event.preventDefault();
            event.returnValue = "";
        }
    }
    navPreventionInputHandler(event) {
        const targetElement = event.target;
        // Only listen for input events on input and textarea elements
        if (targetElement.tagName === "INPUT" ||
            targetElement.tagName === "TEXTAREA") {
            this._shouldInterruptNav = true;
        }
    }
}


/***/ }),

/***/ "./_Scripts/modules/shared/controller-builder/index.ts":
/*!*************************************************************!*\
  !*** ./_Scripts/modules/shared/controller-builder/index.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayOf: () => (/* reexport safe */ _lib_controller_builder_mod__WEBPACK_IMPORTED_MODULE_0__.arrayOf),
/* harmony export */   buildController: () => (/* reexport safe */ _lib_controller_builder_mod__WEBPACK_IMPORTED_MODULE_0__.buildController),
/* harmony export */   objectOfShape: () => (/* reexport safe */ _lib_controller_builder_mod__WEBPACK_IMPORTED_MODULE_0__.objectOfShape),
/* harmony export */   registerControllers: () => (/* reexport safe */ _lib_controller_registration__WEBPACK_IMPORTED_MODULE_1__.registerControllers)
/* harmony export */ });
/* harmony import */ var _lib_controller_builder_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/controller-builder.mod */ "./_Scripts/modules/shared/controller-builder/lib/controller-builder.mod.ts");
/* harmony import */ var _lib_controller_registration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/controller-registration */ "./_Scripts/modules/shared/controller-builder/lib/controller-registration.ts");
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});






/***/ }),

/***/ "./_Scripts/modules/shared/controller-builder/lib/controller-registration.ts":
/*!***********************************************************************************!*\
  !*** ./_Scripts/modules/shared/controller-builder/lib/controller-registration.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   registerControllers: () => (/* binding */ registerControllers)
/* harmony export */ });
/* harmony import */ var _stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stackoverflow/stacks */ "@stackoverflow/stacks");
/* harmony import */ var _stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_0__);
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});



function registerControllers(controllers, namespace) {
    for (const controller of controllers) {
        if (namespace && !controller.controllerName.startsWith(namespace)) {
            throw new Error(`The provided Stimulus controllers must be namespaced with "${namespace}"`);
        }
        _stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_0__.application.register(controller.controllerName, controller);
    }
}


/***/ }),

/***/ "./_Scripts/utilities/debounce.ts":
/*!****************************************!*\
  !*** ./_Scripts/utilities/debounce.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce)
/* harmony export */ });
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});


/**
 * Create a separate version of a given callback that guarantees only to be
 * executed once every `delay` milliseconds.
 *
 * @param callback The function to throttle the number of times it's called.
 * @param delay    The number of milliseconds allowed in between calls to
 *                 `callback`.
 * @param options  Options to configure behavior, {@see DebounceOptions}.
 */
function debounce(callback, delay, options = {}) {
    let timeout, always = options.always;
    const go = (...args) => {
        timeout = null;
        callback(...args);
    };
    return {
        trigger: (...args) => {
            if (always) {
                always(args);
            }
            if (timeout) {
                if (options.sliding) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        go(...args);
                    }, delay);
                }
            }
            else {
                timeout = setTimeout(() => {
                    go(...args);
                }, delay);
            }
        },
        cancel: () => {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
        }
    };
}


/***/ }),

/***/ "./node_modules/jquery-ui/ui/data.js":
/*!*******************************************!*\
  !*** ./node_modules/jquery-ui/ui/data.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI :data 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/

( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ./version */ "./node_modules/jquery-ui/ui/version.js") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

return $.extend( $.expr.pseudos, {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );
} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/i18n lazy recursive ^\\.\\/datepicker\\-.*\\.js$":
/*!****************************************************************************************!*\
  !*** ./node_modules/jquery-ui/ui/i18n/ lazy ^\.\/datepicker\-.*\.js$ namespace object ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./datepicker-af.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-af.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-af_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ar-DZ.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ar-DZ.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ar-DZ_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ar.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ar.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ar_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-az.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-az.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-az_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-be.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-be.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-be_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-bg.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-bg.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-bg_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-bs.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-bs.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-bs_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ca.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ca.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ca_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-cs.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-cs.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-cs_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-cy-GB.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-cy-GB.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-cy-GB_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-da.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-da.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-da_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-de-AT.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-de-AT.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-de-AT_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-de.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-de.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-de_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-el.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-el.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-el_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-en-AU.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-en-AU.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-en-AU_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-en-GB.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-en-GB.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-en-GB_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-en-NZ.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-en-NZ.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-en-NZ_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-eo.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-eo.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-eo_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-es.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-es.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-es_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-et.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-et.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-et_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-eu.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-eu.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-eu_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fa.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fa.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fa_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fi.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fi.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fi_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fo.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fo.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fo_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fr-CA.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fr-CA.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fr-CA_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fr-CH.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fr-CH.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fr-CH_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-fr.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-fr.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-fr_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-gl.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-gl.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-gl_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-he.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-he.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-he_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-hi.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-hi.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-hi_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-hr.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-hr.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-hr_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-hu.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-hu.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-hu_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-hy.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-hy.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-hy_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-id.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-id.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-id_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-is.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-is.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-is_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-it-CH.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-it-CH.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-it-CH_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-it.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-it.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-it_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ja.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ja.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ja_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ka.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ka.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ka_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-kk.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-kk.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-kk_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-km.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-km.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-km_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ko.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ko.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ko_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ky.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ky.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ky_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-lb.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-lb.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-lb_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-lt.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-lt.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-lt_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-lv.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-lv.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-lv_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-mk.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-mk.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-mk_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ml.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ml.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ml_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ms.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ms.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ms_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-nb.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-nb.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-nb_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-nl-BE.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-nl-BE.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-nl-BE_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-nl.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-nl.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-nl_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-nn.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-nn.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-nn_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-no.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-no.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-no_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-pl.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-pl.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-pl_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-pt-BR.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-pt-BR.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-pt-BR_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-pt.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-pt.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-pt_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-rm.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-rm.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-rm_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ro.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ro.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ro_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ru.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ru.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ru_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sk.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sk.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sk_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sl.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sl.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sl_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sq.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sq.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sq_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sr-SR.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sr-SR.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sr-SR_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sr.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sr.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sr_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-sv.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-sv.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-sv_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-ta.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-ta.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-ta_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-th.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-th.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-th_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-tj.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-tj.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-tj_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-tr.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-tr.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-tr_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-uk.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-uk.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-uk_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-vi.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-vi.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-vi_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-zh-CN.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-zh-CN.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-zh-CN_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-zh-HK.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-zh-HK.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-zh-HK_js-node_modules_jquery-ui_ui_version_js"
	],
	"./datepicker-zh-TW.js": [
		"./node_modules/jquery-ui/ui/i18n/datepicker-zh-TW.js",
		"defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js",
		"node_modules_jquery-ui_ui_i18n_datepicker-zh-TW_js-node_modules_jquery-ui_ui_version_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__.t(id, 7 | 16);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = "./node_modules/jquery-ui/ui/i18n lazy recursive ^\\.\\/datepicker\\-.*\\.js$";
module.exports = webpackAsyncContext;

/***/ }),

/***/ "./node_modules/jquery-ui/ui/ie.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery-ui/ui/ie.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ./version */ "./node_modules/jquery-ui/ui/version.js") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

// This file is deprecated
return $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );
} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/scroll-parent.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery-ui/ui/scroll-parent.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI Scroll Parent 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/

( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ./version */ "./node_modules/jquery-ui/ui/version.js") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

return $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};

} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/version.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery-ui/ui/version.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

$.ui = $.ui || {};

return $.ui.version = "1.13.2";

} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/widget.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery-ui/ui/widget.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI Widget 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/

( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ./version */ "./node_modules/jquery-ui/ui/version.js") ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

var widgetUuid = 0;
var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {

			// Only trigger remove when necessary to save time
			events = $._data( elem, "events" );
			if ( events && events.remove ) {
				$( elem ).triggerHandler( "remove" );
			}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( Array.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this || !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( typeof value !== "function" ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( typeof instance[ options ] !== "function" ||
						options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function bindRemoveEvent() {
			var nodesToBind = [];

			options.element.each( function( _, element ) {
				var isTracked = $.map( that.classesElementLookup, function( elements ) {
					return elements;
				} )
					.some( function( elements ) {
						return elements.is( element );
					} );

				if ( !isTracked ) {
					nodesToBind.push( element );
				}
			} );

			that._on( $( nodesToBind ), {
				remove: "_untrackClassesElement"
			} );
		}

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					bindRemoveEvent();
					current = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );

		this._off( $( event.target ) );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( typeof callback === "function" &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		} else if ( options === true ) {
			options = {};
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

return $.widget;

} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/widgets/mouse.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery-ui/ui/widgets/mouse.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI Mouse 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/

( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
			__webpack_require__(/*! jquery */ "jquery"),
			__webpack_require__(/*! ../ie */ "./node_modules/jquery-ui/ui/ie.js"),
			__webpack_require__(/*! ../version */ "./node_modules/jquery-ui/ui/version.js"),
			__webpack_require__(/*! ../widget */ "./node_modules/jquery-ui/ui/widget.js")
		], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

return $.widget( "ui.mouse", {
	version: "1.13.2",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		if ( this._mouseStarted ) {
			this._mouseUp( event );
		}

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			if ( this._mouseStarted ) {
				this._mouseDrag( event );
			} else {
				this._mouseUp( event );
			}
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) {
		return true;
	}
} );

} );


/***/ }),

/***/ "./node_modules/jquery-ui/ui/widgets/sortable.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery-ui/ui/widgets/sortable.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery UI Sortable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css

( function( factory ) {
	"use strict";

	if ( true ) {

		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
			__webpack_require__(/*! jquery */ "jquery"),
			__webpack_require__(/*! ./mouse */ "./node_modules/jquery-ui/ui/widgets/mouse.js"),
			__webpack_require__(/*! ../data */ "./node_modules/jquery-ui/ui/data.js"),
			__webpack_require__(/*! ../ie */ "./node_modules/jquery-ui/ui/ie.js"),
			__webpack_require__(/*! ../scroll-parent */ "./node_modules/jquery-ui/ui/scroll-parent.js"),
			__webpack_require__(/*! ../version */ "./node_modules/jquery-ui/ui/version.js"),
			__webpack_require__(/*! ../widget */ "./node_modules/jquery-ui/ui/widget.js")
		], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $ ) {
"use strict";

return $.widget( "ui.sortable", $.ui.mouse, {
	version: "1.13.2",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// Callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return ( /left|right/ ).test( item.css( "float" ) ) ||
			( /inline|table-cell/ ).test( item.css( "display" ) );
	},

	_create: function() {
		this.containerCache = {};
		this._addClass( "ui-sortable" );

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		var that = this;
		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
		$.each( this.items, function() {
			that._addClass(
				this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) :
					this.item,
				"ui-sortable-handle"
			);
		} );
	},

	_destroy: function() {
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[ i ].item.removeData( this.widgetName + "-item" );
		}

		return this;
	},

	_mouseCapture: function( event, overrideHandle ) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if ( this.reverting ) {
			return false;
		}

		if ( this.options.disabled || this.options.type === "static" ) {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems( event );

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$( event.target ).parents().each( function() {
			if ( $.data( this, that.widgetName + "-item" ) === that ) {
				currentItem = $( this );
				return false;
			}
		} );
		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
			currentItem = $( event.target );
		}

		if ( !currentItem ) {
			return false;
		}
		if ( this.options.handle && !overrideHandle ) {
			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
				if ( this === event.target ) {
					validHandle = true;
				}
			} );
			if ( !validHandle ) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function( event, overrideHandle, noActivation ) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to
		// mouseCapture
		this.refreshPositions();

		//Prepare the dragged items parent
		this.appendTo = $( o.appendTo !== "parent" ?
				o.appendTo :
				this.currentItem.parent() );

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend( this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},

			// This is a relative to absolute position minus the actual position calculation -
			// only used for relative positioned helper
			relative: this._getRelativeOffset()
		} );

		// After we get the helper offset, but before we get the parent offset we can
		// change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css( "position", "absolute" );
		this.cssPosition = this.helper.css( "position" );

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		if ( o.cursorAt ) {
			this._adjustOffsetFromHelper( o.cursorAt );
		}

		//Cache the former DOM position
		this.domPosition = {
			prev: this.currentItem.prev()[ 0 ],
			parent: this.currentItem.parent()[ 0 ]
		};

		// If the helper is not the original, hide the original so it's not playing any role during
		// the drag, won't cause anything bad this way
		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Get the next scrolling parent
		this.scrollParent = this.placeholder.scrollParent();

		$.extend( this.offset, {
			parent: this._getParentOffset()
		} );

		//Set a containment if given in the options
		if ( o.containment ) {
			this._setContainment();
		}

		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// Support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet =
				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
		}

		// We need to make sure to grab the zIndex before setting the
		// opacity, because setting the opacity to anything lower than 1
		// causes the zIndex to change from "auto" to 0.
		if ( o.zIndex ) { // zIndex option
			if ( this.helper.css( "zIndex" ) ) {
				this._storedZIndex = this.helper.css( "zIndex" );
			}
			this.helper.css( "zIndex", o.zIndex );
		}

		if ( o.opacity ) { // opacity option
			if ( this.helper.css( "opacity" ) ) {
				this._storedOpacity = this.helper.css( "opacity" );
			}
			this.helper.css( "opacity", o.opacity );
		}

		//Prepare scrolling
		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger( "start", event, this._uiHash() );

		//Recache the helper size
		if ( !this._preserveHelperProportions ) {
			this._cacheHelperProportions();
		}

		//Post "activate" events to possible containers
		if ( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		this.dragging = true;

		this._addClass( this.helper, "ui-sortable-helper" );

		//Move the helper, if needed
		if ( !this.helper.parent().is( this.appendTo ) ) {
			this.helper.detach().appendTo( this.appendTo );

			//Update position
			this.offset.parent = this._getParentOffset();
		}

		//Generate the original position
		this.position = this.originalPosition = this._generatePosition( event );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;
		this.lastPositionAbs = this.positionAbs = this._convertPositionTo( "absolute" );

		this._mouseDrag( event );

		return true;

	},

	_scroll: function( event ) {
		var o = this.options,
			scrolled = false;

		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {

			if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
					event.pageY < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollTop =
					scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
			} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollTop =
					scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
			}

			if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
					event.pageX < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollLeft = scrolled =
					this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
			} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollLeft = scrolled =
					this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
			}

		} else {

			if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
				scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
			} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
					o.scrollSensitivity ) {
				scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
			}

			if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
				scrolled = this.document.scrollLeft(
					this.document.scrollLeft() - o.scrollSpeed
				);
			} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
					o.scrollSensitivity ) {
				scrolled = this.document.scrollLeft(
					this.document.scrollLeft() + o.scrollSpeed
				);
			}

		}

		return scrolled;
	},

	_mouseDrag: function( event ) {
		var i, item, itemElement, intersection,
			o = this.options;

		//Compute the helpers position
		this.position = this._generatePosition( event );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Set the helper position
		if ( !this.options.axis || this.options.axis !== "y" ) {
			this.helper[ 0 ].style.left = this.position.left + "px";
		}
		if ( !this.options.axis || this.options.axis !== "x" ) {
			this.helper[ 0 ].style.top = this.position.top + "px";
		}

		//Do scrolling
		if ( o.scroll ) {
			if ( this._scroll( event ) !== false ) {

				//Update item positions used in position checks
				this._refreshItemPositions( true );

				if ( $.ui.ddmanager && !o.dropBehaviour ) {
					$.ui.ddmanager.prepareOffsets( this, event );
				}
			}
		}

		this.dragDirection = {
			vertical: this._getDragVerticalDirection(),
			horizontal: this._getDragHorizontalDirection()
		};

		//Rearrange
		for ( i = this.items.length - 1; i >= 0; i-- ) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[ i ];
			itemElement = item.item[ 0 ];
			intersection = this._intersectsWithPointer( item );
			if ( !intersection ) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if ( item.instance !== this.currentContainer ) {
				continue;
			}

			// Cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if ( itemElement !== this.currentItem[ 0 ] &&
				this.placeholder[ intersection === 1 ?
				"next" : "prev" ]()[ 0 ] !== itemElement &&
				!$.contains( this.placeholder[ 0 ], itemElement ) &&
				( this.options.type === "semi-dynamic" ?
					!$.contains( this.element[ 0 ], itemElement ) :
					true
				)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if ( this.options.tolerance === "pointer" ||
						this._intersectsWithSides( item ) ) {
					this._rearrange( event, item );
				} else {
					break;
				}

				this._trigger( "change", event, this._uiHash() );
				break;
			}
		}

		//Post events to containers
		this._contactContainers( event );

		//Interconnect with droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		//Call callbacks
		this._trigger( "sort", event, this._uiHash() );

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function( event, noPropagation ) {

		if ( !event ) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			$.ui.ddmanager.drop( this, event );
		}

		if ( this.options.revert ) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollLeft
					);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollTop
					);
			}
			this.reverting = true;
			$( this.helper ).animate(
				animation,
				parseInt( this.options.revert, 10 ) || 500,
				function() {
					that._clear( event );
				}
			);
		} else {
			this._clear( event, noPropagation );
		}

		return false;

	},

	cancel: function() {

		if ( this.dragging ) {

			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

			if ( this.options.helper === "original" ) {
				this.currentItem.css( this._storedCSS );
				this._removeClass( this.currentItem, "ui-sortable-helper" );
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		if ( this.placeholder ) {

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
			// it unbinds ALL events from the original node!
			if ( this.placeholder[ 0 ].parentNode ) {
				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
			}
			if ( this.options.helper !== "original" && this.helper &&
					this.helper[ 0 ].parentNode ) {
				this.helper.remove();
			}

			$.extend( this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			} );

			if ( this.domPosition.prev ) {
				$( this.domPosition.prev ).after( this.currentItem );
			} else {
				$( this.domPosition.parent ).prepend( this.currentItem );
			}
		}

		return this;

	},

	serialize: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			str = [];
		o = o || {};

		$( items ).each( function() {
			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
			if ( res ) {
				str.push(
					( o.key || res[ 1 ] + "[]" ) +
					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
			}
		} );

		if ( !str.length && o.key ) {
			str.push( o.key + "=" );
		}

		return str.join( "&" );

	},

	toArray: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			ret = [];

		o = o || {};

		items.each( function() {
			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
		} );
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function( item ) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
				( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
				( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			( this.options.tolerance !== "pointer" &&
				this.helperProportions[ this.floating ? "width" : "height" ] >
				item[ this.floating ? "width" : "height" ] )
		) {
			return isOverElement;
		} else {

			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function( item ) {
		var verticalDirection, horizontalDirection,
			isOverElementHeight = ( this.options.axis === "x" ) ||
				this._isOverAxis(
					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
			isOverElementWidth = ( this.options.axis === "y" ) ||
				this._isOverAxis(
					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( !isOverElement ) {
			return false;
		}

		verticalDirection = this.dragDirection.vertical;
		horizontalDirection = this.dragDirection.horizontal;

		return this.floating ?
			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 ) :
			( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

	},

	_intersectsWithSides: function( item ) {

		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
			verticalDirection = this.dragDirection.vertical,
			horizontalDirection = this.dragDirection.horizontal;

		if ( this.floating && horizontalDirection ) {
			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
				( horizontalDirection === "left" && !isOverRightHalf ) );
		} else {
			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
				( verticalDirection === "up" && !isOverBottomHalf ) );
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && ( delta > 0 ? "down" : "up" );
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && ( delta > 0 ? "right" : "left" );
	},

	refresh: function( event ) {
		this._refreshItems( event );
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ?
			[ options.connectWith ] :
			options.connectWith;
	},

	_getItemsAsjQuery: function( connected ) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if ( connectWith && connected ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ typeof inst.options.items === "function" ?
							inst.options.items.call( inst.element ) :
							$( inst.options.items, inst.element )
								.not( ".ui-sortable-helper" )
								.not( ".ui-sortable-placeholder" ), inst ] );
					}
				}
			}
		}

		queries.push( [ typeof this.options.items === "function" ?
			this.options.items
				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
			$( this.options.items, this.element )
				.not( ".ui-sortable-helper" )
				.not( ".ui-sortable-placeholder" ), this ] );

		function addItems() {
			items.push( this );
		}
		for ( i = queries.length - 1; i >= 0; i-- ) {
			queries[ i ][ 0 ].each( addItems );
		}

		return $( items );

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

		this.items = $.grep( this.items, function( item ) {
			for ( var j = 0; j < list.length; j++ ) {
				if ( list[ j ] === item.item[ 0 ] ) {
					return false;
				}
			}
			return true;
		} );

	},

	_refreshItems: function( event ) {

		this.items = [];
		this.containers = [ this ];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [ [ typeof this.options.items === "function" ?
				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
				$( this.options.items, this.element ), this ] ],
			connectWith = this._connectWith();

		//Shouldn't be run the first time through due to massive slow-down
		if ( connectWith && this.ready ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ typeof inst.options.items === "function" ?
							inst.options.items
								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
							$( inst.options.items, inst.element ), inst ] );
						this.containers.push( inst );
					}
				}
			}
		}

		for ( i = queries.length - 1; i >= 0; i-- ) {
			targetData = queries[ i ][ 1 ];
			_queries = queries[ i ][ 0 ];

			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
				item = $( _queries[ j ] );

				// Data for target checking (mouse manager)
				item.data( this.widgetName + "-item", targetData );

				items.push( {
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				} );
			}
		}

	},

	_refreshItemPositions: function( fast ) {
		var i, item, t, p;

		for ( i = this.items.length - 1; i >= 0; i-- ) {
			item = this.items[ i ];

			//We ignore calculating positions of all connected containers when we're not over them
			if ( this.currentContainer && item.instance !== this.currentContainer &&
					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
				continue;
			}

			t = this.options.toleranceElement ?
				$( this.options.toleranceElement, item.item ) :
				item.item;

			if ( !fast ) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}
	},

	refreshPositions: function( fast ) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		// This has to be redone because due to the item being moved out/into the offsetParent,
		// the offsetParent's position will change
		if ( this.offsetParent && this.helper ) {
			this.offset.parent = this._getParentOffset();
		}

		this._refreshItemPositions( fast );

		var i, p;

		if ( this.options.custom && this.options.custom.refreshContainers ) {
			this.options.custom.refreshContainers.call( this );
		} else {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				p = this.containers[ i ].element.offset();
				this.containers[ i ].containerCache.left = p.left;
				this.containers[ i ].containerCache.top = p.top;
				this.containers[ i ].containerCache.width =
					this.containers[ i ].element.outerWidth();
				this.containers[ i ].containerCache.height =
					this.containers[ i ].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function( that ) {
		that = that || this;
		var className, nodeName,
			o = that.options;

		if ( !o.placeholder || o.placeholder.constructor === String ) {
			className = o.placeholder;
			nodeName = that.currentItem[ 0 ].nodeName.toLowerCase();
			o.placeholder = {
				element: function() {

					var element = $( "<" + nodeName + ">", that.document[ 0 ] );

					that._addClass( element, "ui-sortable-placeholder",
							className || that.currentItem[ 0 ].className )
						._removeClass( element, "ui-sortable-helper" );

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function( container, p ) {

					// 1. If a className is set as 'placeholder option, we don't force sizes -
					// the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
					// class name is specified
					if ( className && !o.forcePlaceholderSize ) {
						return;
					}

					// If the element doesn't have a actual height or width by itself (without
					// styles coming from a stylesheet), it receives the inline height and width
					// from the dragged item. Or, if it's a tbody or tr, it's going to have a height
					// anyway since we're populating them with <td>s above, but they're unlikely to
					// be the correct height on their own if the row heights are dynamic, so we'll
					// always assign the height of the dragged item given forcePlaceholderSize
					// is true.
					if ( !p.height() || ( o.forcePlaceholderSize &&
							( nodeName === "tbody" || nodeName === "tr" ) ) ) {
						p.height(
							that.currentItem.innerHeight() -
							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
					}
					if ( !p.width() ) {
						p.width(
							that.currentItem.innerWidth() -
							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
					}
				}
			};
		}

		//Create the placeholder
		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

		//Append it after the actual current item
		that.currentItem.after( that.placeholder );

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update( that, that.placeholder );

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each( function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		} );
	},

	_contactContainers: function( event ) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
			floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// Get innermost container that intersects with item
		for ( i = this.containers.length - 1; i >= 0; i-- ) {

			// Never consider a container that's located within the item itself
			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
				continue;
			}

			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

				// If we've already found a container and it's more "inner" than this, then continue
				if ( innermostContainer &&
						$.contains(
							this.containers[ i ].element[ 0 ],
							innermostContainer.element[ 0 ] ) ) {
					continue;
				}

				innermostContainer = this.containers[ i ];
				innermostIndex = i;

			} else {

				// container doesn't intersect. trigger "out" event if necessary
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		// If no intersecting containers found, return
		if ( !innermostContainer ) {
			return;
		}

		// Move the item into the container if it's not there already
		if ( this.containers.length === 1 ) {
			if ( !this.containers[ innermostIndex ].containerCache.over ) {
				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
				this.containers[ innermostIndex ].containerCache.over = 1;
			}
		} else {

			// When entering a new container, we will find the item with the least distance and
			// append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating( this.currentItem );
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "pageX" : "pageY";

			for ( j = this.items.length - 1; j >= 0; j-- ) {
				if ( !$.contains(
						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
				) {
					continue;
				}
				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
					continue;
				}

				cur = this.items[ j ].item.offset()[ posProperty ];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up" : "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
				return;
			}

			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			if ( itemWithLeastDistance ) {
				this._rearrange( event, itemWithLeastDistance, null, true );
			} else {
				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
			}
			this._trigger( "change", event, this._uiHash() );
			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
			this.currentContainer = this.containers[ innermostIndex ];

			//Update the placeholder
			this.options.placeholder.update( this.currentContainer, this.placeholder );

			//Update scrollParent
			this.scrollParent = this.placeholder.scrollParent();

			//Update overflowOffset
			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
					this.scrollParent[ 0 ].tagName !== "HTML" ) {
				this.overflowOffset = this.scrollParent.offset();
			}

			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
			this.containers[ innermostIndex ].containerCache.over = 1;
		}

	},

	_createHelper: function( event ) {

		var o = this.options,
			helper = typeof o.helper === "function" ?
				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

		//Add the helper to the DOM if that didn't happen already
		if ( !helper.parents( "body" ).length ) {
			this.appendTo[ 0 ].appendChild( helper[ 0 ] );
		}

		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
			this._storedCSS = {
				width: this.currentItem[ 0 ].style.width,
				height: this.currentItem[ 0 ].style.height,
				position: this.currentItem.css( "position" ),
				top: this.currentItem.css( "top" ),
				left: this.currentItem.css( "left" )
			};
		}

		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
			helper.width( this.currentItem.width() );
		}
		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
			helper.height( this.currentItem.height() );
		}

		return helper;

	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( Array.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this
		// information with an ugly IE fix
		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
				( this.offsetParent[ 0 ].tagName &&
				this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {

		if ( this.cssPosition === "relative" ) {
			var p = this.currentItem.position();
			return {
				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
					this.scrollParent.scrollTop(),
				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
					this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}
		if ( o.containment === "document" || o.containment === "window" ) {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ?
					this.document.width() :
					this.window.width() - this.helperProportions.width - this.margins.left,
				( o.containment === "document" ?
					( this.document.height() || document.body.parentNode.scrollHeight ) :
					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
				) - this.helperProportions.height - this.margins.top
			];
		}

		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
			ce = $( o.containment )[ 0 ];
			co = $( o.containment ).offset();
			over = ( $( ce ).css( "overflow" ) !== "hidden" );

			this.containment = [
				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width - this.margins.left,
				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
					scroll.scrollLeft() ) * mod )
			)
		};

	},

	_generatePosition: function( event ) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

			if ( this.containment ) {
				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
					pageX = this.containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
					pageY = this.containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
					pageX = this.containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
					pageY = this.containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {
				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
					o.grid[ 1 ] ) * o.grid[ 1 ];
				pageY = this.containment ?
					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
						top - this.offset.click.top <= this.containment[ 3 ] ) ?
							top :
							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
								top;

				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
					o.grid[ 0 ] ) * o.grid[ 0 ];
				pageX = this.containment ?
					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
						left - this.offset.click.left <= this.containment[ 2 ] ) ?
							left :
							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
								left;
			}

		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() :
					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
			)
		};

	},

	_rearrange: function( event, i, a, hardRefresh ) {

		if ( a ) {
			a[ 0 ].appendChild( this.placeholder[ 0 ] );
		} else {
			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );
		}

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout,
		// if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay( function() {
			if ( counter === this.counter ) {

				//Precompute after each DOM insertion, NOT on mousemove
				this.refreshPositions( !hardRefresh );
			}
		} );

	},

	_clear: function( event, noPropagation ) {

		this.reverting = false;

		// We delay all events that have to be triggered to after the point where the placeholder
		// has been removed and everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets
		// reappended (see #4088)
		if ( !this._noFinalSort && this.currentItem.parent().length ) {
			this.placeholder.before( this.currentItem );
		}
		this._noFinalSort = null;

		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
			for ( i in this._storedCSS ) {
				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
					this._storedCSS[ i ] = "";
				}
			}
			this.currentItem.css( this._storedCSS );
			this._removeClass( this.currentItem, "ui-sortable-helper" );
		} else {
			this.currentItem.show();
		}

		if ( this.fromOutside && !noPropagation ) {
			delayedTriggers.push( function( event ) {
				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
			} );
		}
		if ( ( this.fromOutside ||
				this.domPosition.prev !==
				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

			// Trigger update callback if the DOM position has changed
			delayedTriggers.push( function( event ) {
				this._trigger( "update", event, this._uiHash() );
			} );
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if ( this !== this.currentContainer ) {
			if ( !noPropagation ) {
				delayedTriggers.push( function( event ) {
					this._trigger( "remove", event, this._uiHash() );
				} );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "receive", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "update", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
			}
		}

		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for ( i = this.containers.length - 1; i >= 0; i-- ) {
			if ( !noPropagation ) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if ( this.containers[ i ].containerCache.over ) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[ i ].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if ( this._storedOpacity ) {
			this.helper.css( "opacity", this._storedOpacity );
		}
		if ( this._storedZIndex ) {
			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
		}

		this.dragging = false;

		if ( !noPropagation ) {
			this._trigger( "beforeStop", event, this._uiHash() );
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
		// it unbinds ALL events from the original node!
		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if ( !noPropagation ) {
			for ( i = 0; i < delayedTriggers.length; i++ ) {

				// Trigger all delayed events
				delayedTriggers[ i ].call( this, event );
			}
			this._trigger( "stop", event, this._uiHash() );
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
			this.cancel();
		}
	},

	_uiHash: function( _inst ) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $( [] ),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

} );

} );


/***/ }),

/***/ "./_Scripts/LegacyJS/citation.mod.ts":
/*!*******************************************!*\
  !*** ./_Scripts/LegacyJS/citation.mod.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   showCitation: () => (/* binding */ showCitation)
/* harmony export */ });
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");

const showCitation = function ($link) {
    const $menu = $link.closest('.js-post-menu');
    const postId = $menu.attr('data-post-id');
    const $container = $menu.find('.js-menu-popup-container');
    // If a popup is already shown, let popup code hide it and don't reshow.
    if ($container.find('.js-cite-popup').length > 0) {
        return;
    }
    const $popup = $(`
        <div class="js-cite-popup popup d-block ws6 c-auto">
            <div class="js-cite-example mb4"></div>
            <form class="d-flex gs8">
                <label class="flex--item"><input type="radio" class="s-radio js-cite-bibtex" name="reftype" checked="checked"/> BibTeX</label>
                <label class="flex--item"><input type="radio" class="s-radio js-cite-amsrefs" name="reftype" /> amsrefs</label>
            </form>
            <textarea class="js-cite-text s-textarea w100 d-block mt4" rows="9"></textarea>
            <button type="button" class="s-btn js-cite-close mt8 mbn4 p2">Close</button>
        </div>`);
    $popup.find(".js-cite-close").click(function () { $popup.fadeOutAndRemove(); });
    $popup.find('form').on('submit', function (e) { e.preventDefault(); });
    const $example = $popup.find('.js-cite-example');
    const $bibtextOption = $popup.find('.js-cite-bibtex');
    const $amssrefsOption = $popup.find('.js-cite-amsrefs');
    const $text = $popup.find('.js-cite-text');
    $container.append($popup);
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.addSpinner)($example);
    $.ajax({
        type: "GET",
        url: "/posts/" + postId + "/citation",
        dataType: "json",
        success: function (data) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.removeSpinner)();
            $example.html(data.example);
            $text.val(data.bibtex);
            $bibtextOption.click(function () { $text.val(data.bibtex); });
            $amssrefsOption.click(function () { $text.val(data.amsref); });
        }
    });
};


/***/ }),

/***/ "./_Scripts/LegacyJS/full-common/13_Share.mod.ts":
/*!*******************************************************!*\
  !*** ./_Scripts/LegacyJS/full-common/13_Share.mod.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   share: () => (/* binding */ share)
/* harmony export */ });
// taken from Portman Wills' http://scoreawin.com/scripts/master.js
function pop(uri, name, options) {
    if (!window.open(uri, name, options)) {
        window.location.href = uri;
    }
    ;
}
;
function addTracker(url, slug, slugValue) {
    slugValue = typeof slugValue !== 'undefined' ? slugValue : '1';
    slug += "=" + slugValue;
    var quote = url.indexOf('?');
    var hash = url.indexOf('#');
    if (quote == -1) {
        if (hash == -1) {
            return url + '?' + slug;
        }
        return url.substring(0, hash) + '?' + slug + url.substring(hash);
    }
    if (hash == -1) {
        return url + '&' + slug;
    }
    return url.substring(0, hash) + '&' + slug + url.substring(hash);
}
;
function shareTwitter(link, url, message, slugValue) {
    url = addTracker(url, 'stw', slugValue);
    var twitterMaxTweetLength = 280 - 23; // 22 for t.co wrapping our urls + a space
    if (message.length > twitterMaxTweetLength) {
        message = message.substring(0, twitterMaxTweetLength - 3) + "...";
    }
    link.click(function () {
        pop('https://twitter.com/share?url=' + encodeURIComponent(url) + '&ref=twitbtn&text=' + encodeURIComponent(message), 'sharetwitter', 'toolbar=1,status=1,resizable=1,scrollbars=1,width=800,height=526');
    });
}
function shareFacebook(link, url, message, slugValue) {
    url = addTracker(url, 'sfb', slugValue);
    link.click(function () {
        pop('https://www.facebook.com/sharer.php?u=' + encodeURIComponent(url) + '&ref=fbshare&t=' + encodeURIComponent(message), 'sharefacebook', 'toolbar=1,status=1,resizable=1,scrollbars=1,width=626,height=436');
    });
}
function shareDevTo(link, url, title, slugValue) {
    var body, match;
    if (match = url.match(/^.*:\/\/stackoverflow\.com\/[qa]\/(\d+)(?:\/\d+)?$/)) {
        // stackoverflow.com
        body = '{% stackoverflow {postId} %}'.formatUnicorn({ postId: match[1] });
    }
    else if (match = url.match(/^.*:\/\/([a-z]*(?:\.meta)?\.stackoverflow)\.com\/[qa]\/(\d+)(?:\/\d+)?$/)) {
        // ru.stackoverflow.com, ru.meta.stackoverflow.com, etc.
        body = '{% stackexchange {postId} {host} %}'.formatUnicorn({ postId: match[2], host: match[1] });
    }
    else if (match = url.match(/^.*:\/\/(([a-z0-9]*(?:\.meta)?)\.stackexchange\.com)\/[qa]\/(\d+)(?:\/\d+)?$/)) {
        // meta.stackexchange.com, diy.stackexchange.com, diy.meta.stackexchange.com, etc.
        body = '{% stackexchange {postId} {host} %}'.formatUnicorn({ postId: match[3], host: match[2] || match[1] });
    }
    else if (match = url.match(/^.*:\/\/((?:meta\.)?[a-z0-9]*)\.(?:com|net|org)\/[qa]\/(\d+)(?:\/\d+)?$/)) {
        // mathoverflow.net, meta.mathoverflow.net, etc.
        body = '{% stackexchange {postId} {host} %}'.formatUnicorn({ postId: match[2], host: match[1] });
    }
    else {
        body = addTracker(url, 'sdv', slugValue);
    }
    link.click(function () {
        pop('https://dev.to/new?prefill=---%0Atitle%3A%20{title}%0Apublished%3A%20true%0A---%0A%0A{body}'.formatUnicorn({
            title: encodeURIComponent(title),
            body: encodeURIComponent(body)
        }), 'sharedev', 'toolbar=1,status=1,resizable=1,scrollbars=1,width=800,height=526');
    });
}
const share = {
    facebook: shareFacebook,
    twitter: shareTwitter,
    devTo: shareDevTo
};


/***/ }),

/***/ "./_Scripts/LegacyJS/full/04_Vote.mod.ts":
/*!***********************************************!*\
  !*** ./_Scripts/LegacyJS/full/04_Vote.mod.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bindFetchVoteCounts: () => (/* binding */ bindFetchVoteCounts),
/* harmony export */   bookmark_init: () => (/* binding */ bookmark_init),
/* harmony export */   delete_init: () => (/* binding */ delete_init),
/* harmony export */   election_init: () => (/* binding */ election_init),
/* harmony export */   follow_init: () => (/* binding */ follow_init),
/* harmony export */   getPostId: () => (/* binding */ getPostId),
/* harmony export */   getReferrer: () => (/* binding */ getReferrer),
/* harmony export */   highlightExistingVotes: () => (/* binding */ highlightExistingVotes),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   normalizePostScore: () => (/* binding */ normalizePostScore),
/* harmony export */   submit: () => (/* binding */ submit),
/* harmony export */   vote_down: () => (/* binding */ vote_down),
/* harmony export */   vote_init: () => (/* binding */ vote_init),
/* harmony export */   vote_up: () => (/* binding */ vote_up)
/* harmony export */ });
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/* harmony import */ var _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Shared/options.mod */ "./_Scripts/Shared/options.mod.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _PartialJS_full_definitions_Enums_generated_mod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../PartialJS/full/definitions/Enums.generated.mod */ "./_Scripts/PartialJS/full/definitions/Enums.generated.mod.ts");
/* harmony import */ var _PartialJS_full_99_UserFlags_mod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../PartialJS/full/99_UserFlags.mod */ "./_Scripts/PartialJS/full/99_UserFlags.mod.ts");
/* harmony import */ var _full_common_11_Question_mod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../full-common/11_Question.mod */ "./_Scripts/LegacyJS/full-common/11_Question.mod.js");
/* harmony import */ var _PartialJS_full_common_99_OutdatedAnswers_mod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../PartialJS/full-common/99_OutdatedAnswers.mod */ "./_Scripts/PartialJS/full-common/99_OutdatedAnswers.mod.ts");
/* harmony import */ var _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../full-common/20_Analytics.mod */ "./_Scripts/LegacyJS/full-common/20_Analytics.mod.js");
/* harmony import */ var _realtime_se_mod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../realtime-se.mod */ "./_Scripts/LegacyJS/realtime-se.mod.js");
/* harmony import */ var _stub_mod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stub.mod */ "./_Scripts/LegacyJS/stub.mod.js");
/* harmony import */ var _05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./05_VoteToCloseAndFlag.mod */ "./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.mod.ts");
/* harmony import */ var _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../_Declarations/TypeIdEnums */ "./_Scripts/_Declarations/TypeIdEnums.ts");
/* harmony import */ var _LegacyJS_constants_mod__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../LegacyJS/constants.mod */ "./_Scripts/LegacyJS/constants.mod.js");
/* harmony import */ var _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../../PartialJS/full-common/99_PostTypeId.mod */ "./_Scripts/PartialJS/full-common/99_PostTypeId.mod.ts");














function init(votesCast) {
    // when voting, should the user be directed to login?
    const promptToLogin = !(_Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.isRegistered);
    if (promptToLogin) {
        (0,_full_common_11_Question_mod__WEBPACK_IMPORTED_MODULE_5__.bindAnonymousVoteDisclaimers)();
    }
    else {
        bindLoggedIn(votesCast);
    }
    getAcceptedAnswerLinks().not(':data(bound)')
        .unadornedButtonClick(acceptAnswer_click)
        .on('update', acceptAnswer_update)
        .data('bound', true) // prevent multiple duplicate events
        .trigger('update'); // ensure UI has proper text/titles
    (0,_full_common_11_Question_mod__WEBPACK_IMPORTED_MODULE_5__.bindFetchAcceptedAnswerDates)();
    if ((0,_full_common_11_Question_mod__WEBPACK_IMPORTED_MODULE_5__.canViewVoteCounts)()) {
        bindFetchVoteCounts();
    }
    delete_init();
}
function election_init(canVote, votesCast) {
    if (canVote) {
        highlightExistingVotes(votesCast);
        bindFetchVoteCounts();
    }
    bindVoteClicks();
}
function vote_up($voteButton) {
    const $jDiv = getVotingContainer($voteButton);
    const $jUp = $jDiv.find('.js-vote-up-btn');
    const $jDown = $jDiv.find('.js-vote-down-btn');
    const isSelecting = !isSelected($jUp);
    const isReversing = isSelected($jDown);
    const incrementAmount = isSelecting ? (isReversing ? 2 : 1) : -1;
    updateModScore($jDiv, incrementAmount);
    setSelected($jUp, isSelecting);
    setSelected($jDown, false);
    submitModVote($voteButton, isSelecting ? _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.upMod : _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.undoMod);
}
function vote_down($voteButton) {
    const $jDiv = getVotingContainer($voteButton);
    const $jUp = $jDiv.find('.js-vote-up-btn');
    const $jDown = $jDiv.find('.js-vote-down-btn');
    const isSelecting = !isSelected($jDown);
    const isReversing = isSelected($jUp);
    const incrementAmount = isSelecting ? (isReversing ? -2 : -1) : 1;
    updateModScore($jDiv, incrementAmount);
    setSelected($jDown, isSelecting);
    setSelected($jUp, false);
    submitModVote($voteButton, isSelecting ? _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.downMod : _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.undoMod);
}
// used by the review dashboard
function follow_init() {
    if (!_Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.isRegistered) {
        return;
    }
    jquery__WEBPACK_IMPORTED_MODULE_2__(document)
        .off('.following')
        .on('click.following', '.js-follow-post', function () { follow(jquery__WEBPACK_IMPORTED_MODULE_2__(this)); })
        .on('click.following', '.js-unfollow-post-confirm', function () {
        // in the event that user clicks on the unfollow button inside the popover that shows after you click to follow
        // at this point, the follow button itself will have been set to Following, and on click will unfollow
        // so the click on the button in the popover should really trigger the function using the main button to unfollow
        // this is needed in order that all of the text and data attributes connected to the main button will update properly
        const $btnUnfollowPostConfirm = jquery__WEBPACK_IMPORTED_MODULE_2__(this);
        const $parentDiv = $btnUnfollowPostConfirm.closest(".js-following-confirm");
        const $btnFollowPost = $parentDiv.prev(".js-follow-post");
        follow($btnFollowPost);
    });
}
// used on the user's own bookmarks page
function bookmark_init() {
    updateBookmarkButtonTitles();
    jquery__WEBPACK_IMPORTED_MODULE_2__(document).unadornedButtonClick(function () { bookmark(jquery__WEBPACK_IMPORTED_MODULE_2__(this)); }, { selector: '.js-bookmark-btn:not(.disabled)' });
}
// used by the review dashboard
function vote_init(votesCast) {
    highlightExistingVotes(votesCast);
    bindVoteClicks();
    updateVoteButtonTitles();
    reaction_init();
    outdated_init();
}
// used by suggested edits
function delete_init(optionalCallback, optionalFormData) {
    const selector = ".js-post-menu .js-delete-post";
    const $parent = jquery__WEBPACK_IMPORTED_MODULE_2__(document);
    $parent.off("click", selector);
    $parent.on("click", selector, function (e) {
        e.preventDefault();
        deletion(jquery__WEBPACK_IMPORTED_MODULE_2__(this), optionalCallback, optionalFormData);
    });
    // Enable deleting from post notices.
    // A lot of deletion behavior is baked into the actual delete button, so we will simply simulate clicking it.
    $parent
        .off("click", ".js-post-notice-delete-post")
        .on("click", ".js-post-notice-delete-post", function () {
        jquery__WEBPACK_IMPORTED_MODULE_2__(this).closest(".question, .answer, .js-sg-question")
            .find(selector)
            .first()
            .click();
    });
    jquery__WEBPACK_IMPORTED_MODULE_2__(`.js-post-menu[data-post-type-id=${_PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Article}]`).each((i, menu) => {
        const articleId = parseInt(jquery__WEBPACK_IMPORTED_MODULE_2__(menu).attr('data-post-id'));
        const $modal = jquery__WEBPACK_IMPORTED_MODULE_2__(menu).find('.js-delete-article-modal');
        $modal.find('input[type="radio"]').change((e) => {
            $modal.find('.s-label').removeClass('bg-black-200');
            jquery__WEBPACK_IMPORTED_MODULE_2__(jquery__WEBPACK_IMPORTED_MODULE_2__(e.target).parents('.s-label')[0]).addClass('bg-black-200');
            $modal.find('textarea').attr('readonly', 'true');
            jquery__WEBPACK_IMPORTED_MODULE_2__(jquery__WEBPACK_IMPORTED_MODULE_2__(e.target).parents('.s-label')[0]).find('textarea').removeAttr('readonly');
        });
        $modal.find('.js-delete-article-btn').click((e) => {
            jquery__WEBPACK_IMPORTED_MODULE_2__(e.target).disable();
            jquery__WEBPACK_IMPORTED_MODULE_2__(e.target).addClass("is-loading");
            const postUrl = `/collectives/mod/delete-article/${articleId}`;
            const deleteReason = parseInt($modal.find('input[name="deleteReason"]:checked').val());
            const deleteComment = $modal.find('textarea').val();
            jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
                type: 'POST',
                url: postUrl,
                dataType: 'json',
                data: {
                    fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.fkey,
                    deleteReason,
                    deleteComment,
                },
                success: () => {
                    location.reload();
                },
                error: () => {
                    Stacks.hideModal($modal[0]);
                    jquery__WEBPACK_IMPORTED_MODULE_2__(e.target).enable();
                    alert('There has been an error while processing your request.');
                },
            });
        });
    });
}
function bindFetchVoteCounts($optionalVoteCountPostSpans) {
    const $elems = ($optionalVoteCountPostSpans || jquery__WEBPACK_IMPORTED_MODULE_2__('.js-vote-count')).not('.mobile-vote-count').not(':data(bound)')
        .filter(function () {
        // don't bind if there is no post id (SuppressVoteArrows case in Vote.cshtml, used mainly in review)
        return getPostId(jquery__WEBPACK_IMPORTED_MODULE_2__(this)) > 0; // (min postid is 1)
    });
    $elems.attr({
        role: 'button',
        tabindex: '0'
    })
        .addClass('c-pointer')
        .unadornedButtonClick(function () { fetchVoteCounts(jquery__WEBPACK_IMPORTED_MODULE_2__(this)); })
        .data('bound', true);
    (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($elems, __tr(["View upvote and downvote totals."], undefined, "en", []), voteContainerTooltipOptions);
}
function highlightExistingVotes(votesCast) {
    const reactions = {};
    jquery__WEBPACK_IMPORTED_MODULE_2__.each(votesCast, function () {
        const postId = this.PostId;
        const $jDiv = allVotingContainers().filter(function () { return getPostId(jquery__WEBPACK_IMPORTED_MODULE_2__(this)) === postId; });
        const voteTypeId = this.VoteTypeId;
        switch (voteTypeId) {
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.upMod:
                setSelected($jDiv.find('.js-vote-up-btn'), true);
                break;
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.downMod:
                setSelected($jDiv.find('.js-vote-down-btn'), true);
                break;
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.bookmark:
                const $bookmarkBtn = $jDiv.find('.js-bookmark-btn');
                setSelected($bookmarkBtn, true);
                updateBookmarkButtonTitles($bookmarkBtn);
                break;
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.follow:
                const $followBtn = jquery__WEBPACK_IMPORTED_MODULE_2__(".js-post-menu[data-post-id=" + postId + "] .js-follow-post");
                const isQuestion = $followBtn.hasClass('js-follow-question');
                const isCollectiveCollection = $followBtn.hasClass('js-follow-collective-collection');
                if (isCollectiveCollection) {
                    updateCollectionFollowUI($followBtn, isCollectiveCollection, true);
                }
                else {
                    updateFollowUI($followBtn, isQuestion, true);
                }
                break;
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.outdated:
            case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.notOutdated:
                _PartialJS_full_common_99_OutdatedAnswers_mod__WEBPACK_IMPORTED_MODULE_6__.userVoted(postId);
                break;
            default:
                if (isReaction(voteTypeId)) {
                    if (!reactions[postId]) {
                        reactions[postId] = {
                            PostElement: $jDiv.find('.js-reactions'),
                            VotesCast: [voteTypeId]
                        };
                    }
                    else {
                        reactions[postId].VotesCast.push(voteTypeId);
                    }
                }
                else {
                    _stub_mod__WEBPACK_IMPORTED_MODULE_9__.debug.log("site.vote.js > highlightExistingVotes has no case for " + voteTypeId);
                }
                break;
        }
    });
    Object.values(reactions).forEach(function (post) {
        var _a;
        post.PostElement.attr('data-votes-cast', JSON.stringify(post.VotesCast));
        // TODO: re-implement same way the dispatchEvent extension does it in stub.js
        const event = new Event('post:reactionsInit');
        (_a = post.PostElement[0]) === null || _a === void 0 ? void 0 : _a.dispatchEvent(event);
    });
}
// TODO: This was written for an experiment that did not graduate and can be removed.
function normalizePostScore(score) {
    const negativeVoteScoreFloor = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].site.negativeVoteScoreFloor;
    return negativeVoteScoreFloor === null ? score : Math.max(negativeVoteScoreFloor, score);
}
function submit(voteOptions) {
    const jClicked = voteOptions.$target;
    const postId = voteOptions.postId;
    const referrer = voteOptions.referrer;
    const optionalFormData = voteOptions.data;
    const voteTypeId = voteOptions.voteTypeId;
    const success = function (data) {
        if (data.Warning) {
            if (confirm(data.Message)) {
                formData['ignoreWarnings'] = 'true';
                send();
            }
        }
        else {
            if (voteOptions.success)
                voteOptions.success(jClicked, postId, data);
        }
        if (voteOptions.complete)
            voteOptions.complete();
    };
    const error = function (data) {
        showGenericErrorMessage();
        if (voteOptions.error)
            voteOptions.error(jClicked, postId, data);
        if (voteOptions.complete)
            voteOptions.complete();
    };
    const stubData = jClicked.data('vote-stub');
    if (stubData) {
        setTimeout(function () { success(stubData); }, 0);
        return;
    }
    const formData = { 'fkey': _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.fkey };
    // merge call-specific form data
    if (optionalFormData) {
        for (const name in optionalFormData) {
            formData[name] = optionalFormData[name];
        }
    }
    let url = `/posts/${postId}/vote/${voteTypeId}`;
    const urlParams = new URLSearchParams();
    // putting this on the query means haproxy logs will record it
    if (voteOptions.undo) {
        urlParams.append("undo", "true");
    }
    if (referrer) {
        urlParams.append("r", referrer);
    }
    if (urlParams.size > 0) {
        url += "?" + urlParams.toString();
    }
    function send() {
        jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
            type: 'POST',
            url: url,
            data: formData,
            dataType: 'json',
            success: success,
            error: error,
        });
    }
    send();
}
function getPostId($el) {
    return +getVotingContainer($el).data('post-id');
}
function getReferrer($el) {
    return getVotingContainer($el).data('referrer');
}
function isReaction(voteTypeId) {
    switch (voteTypeId) {
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.helpful:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.thankYou:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.wellWritten:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction1:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction2:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction3:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction4:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction5:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction6:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction7:
        case _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.reaction8:
            return true;
        default:
            return false;
    }
}
const voteContainerTooltipOptions = { placement: "right" };
const reactionContainerTooltipOptions = { placement: 'top-start' };
function updateVoteButtonTitles($jDivVote) {
    // if we don't pass an element, operate on all voting divs
    const $jDiv = $jDivVote ? getVotingContainer($jDivVote) : allVotingContainers();
    const isReadOnly = jquery__WEBPACK_IMPORTED_MODULE_2__('body.read-only').length > 0;
    $jDiv.find('.js-vote-down-btn, .js-vote-up-btn').each(function () {
        const $jVote = jquery__WEBPACK_IMPORTED_MODULE_2__(this);
        let title;
        const isUpVote = $jVote.hasClass('js-vote-up-btn');
        const selected = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.isRegistered && isSelected($jVote);
        const postIsAnswer = isAnswer($jVote);
        if (isReadOnly) {
            title = __tr(["Voting is disabled while the site is in read-only mode."], undefined, "en", []);
        }
        else if ($jDiv.data('is-election')) {
            return; // static title on the election page (for now)
        }
        else {
            const suffix = selected ? ' (' + __tr(["click again to undo"], undefined, "en", []) + ')' : '';
            if (isUpVote) {
                if (postIsAnswer) {
                    title = __tr(["This answer is useful"], undefined, "en", []) + suffix;
                }
                else {
                    title = __tr(["This question shows research effort; it is useful and clear"], undefined, "en", []) + suffix;
                }
            }
            else {
                if (postIsAnswer) {
                    title = __tr(["This answer is not useful"], undefined, "en", []) + suffix;
                }
                else {
                    title = __tr(["This question does not show any research effort; it is unclear or not useful"], undefined, "en", []) + suffix;
                }
            }
        }
        // NOTE the same strings are rendered statically in Vote.cshtml
        (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($jVote, title, voteContainerTooltipOptions);
    });
}
function updateBookmarkButtonTitles($source) {
    // if we don't pass an element, operate on all voting divs
    const $containers = $source ? getVotingContainer($source) : allVotingContainers();
    $containers.find('.js-bookmark-btn').each(function () {
        const $button = jquery__WEBPACK_IMPORTED_MODULE_2__(this);
        // No localization for bookmarks copy, since it only shows up on Teams
        let postType = "post";
        switch (getPostType($button)) {
            case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Question:
                postType = "question";
                break;
            case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Article:
                postType = "article";
                break;
            case _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Collection:
                postType = "collection";
                break;
        }
        const unbookmarkText = `You have bookmarked this ${postType} (click to undo).`;
        const bookmarkText = `Bookmark this ${postType}.`;
        (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($button, isSelected($button) ? unbookmarkText : bookmarkText, voteContainerTooltipOptions);
    });
}
function bindVoteClicks(jDivVote) {
    // if we don't pass an element, operate on all voting divs
    const jDiv = jDivVote ? getVotingContainer(jDivVote) : allVotingContainers();
    unbindVoteClicks(jDivVote);
    jDiv.find('.js-vote-up-btn').unadornedButtonClick(function () { vote_up(jquery__WEBPACK_IMPORTED_MODULE_2__(this)); }, { namespace: 'vote' });
    jDiv.find('.js-vote-down-btn').unadornedButtonClick(function () { vote_down(jquery__WEBPACK_IMPORTED_MODULE_2__(this)); }, { namespace: 'vote' });
}
function unbindVoteClicks($jDivVote) {
    // if we don't pass an element, operate on all voting divs
    const $jDiv = $jDivVote ? getVotingContainer($jDivVote) : allVotingContainers();
    // return the elements that were just unbound
    return $jDiv.find('.js-vote-down-btn, .js-vote-up-btn').unbind('keypress.vote click.vote');
}
function outdated_init() {
    jquery__WEBPACK_IMPORTED_MODULE_2__('.js-outdated-no').on('click', function () {
        const elem = this;
        const postId = +jquery__WEBPACK_IMPORTED_MODULE_2__(elem).data('post-id');
        submit({
            $target: jquery__WEBPACK_IMPORTED_MODULE_2__(elem),
            postId: postId,
            voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.notOutdated,
            success: function () { _PartialJS_full_common_99_OutdatedAnswers_mod__WEBPACK_IMPORTED_MODULE_6__.userVoted(postId); }
        });
    });
    jquery__WEBPACK_IMPORTED_MODULE_2__('.js-outdated-yes').on('click', function () {
        const elem = this;
        const postId = +jquery__WEBPACK_IMPORTED_MODULE_2__(elem).data('post-id');
        submit({
            $target: jquery__WEBPACK_IMPORTED_MODULE_2__(elem),
            postId: postId,
            voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.outdated,
            success: function () {
                _PartialJS_full_common_99_OutdatedAnswers_mod__WEBPACK_IMPORTED_MODULE_6__.openModal(jquery__WEBPACK_IMPORTED_MODULE_2__(elem));
                _PartialJS_full_common_99_OutdatedAnswers_mod__WEBPACK_IMPORTED_MODULE_6__.userVoted(postId);
            }
        });
    });
}
function getAcceptedAnswerLinks() { return allVotingContainers().find(".js-accept-answer-btn"); }
function getProtectLinks() { return jquery__WEBPACK_IMPORTED_MODULE_2__(".js-post-menu .js-protect-btn"); }
function getUnprotectLinks() { return jquery__WEBPACK_IMPORTED_MODULE_2__(".js-post-menu .js-unprotect-btn"); }
function isSelected($el) { return $el.attr('aria-pressed') === 'true'; }
function setSelected($el, value) {
    $el
        .attr('aria-pressed', value ? 'true' : 'false')
        .each(function () {
        const selectedClasses = jquery__WEBPACK_IMPORTED_MODULE_2__(this).data('selected-classes');
        const unselectedClasses = jquery__WEBPACK_IMPORTED_MODULE_2__(this).data('unselected-classes');
        // Order matters when adding and removing classes
        // in case someone messes up and there's overlap.
        if (unselectedClasses && value) {
            jquery__WEBPACK_IMPORTED_MODULE_2__(this).removeClass(unselectedClasses);
        }
        if (selectedClasses) {
            jquery__WEBPACK_IMPORTED_MODULE_2__(this).toggleClass(selectedClasses, value);
        }
        if (unselectedClasses && !value) {
            jquery__WEBPACK_IMPORTED_MODULE_2__(this).addClass(unselectedClasses);
        }
    });
}
function getPostType($el) {
    const $postSummary = $el.closest(".js-post-summary");
    const postTypeId = parseInt($postSummary === null || $postSummary === void 0 ? void 0 : $postSummary.data("post-type-id"));
    if (isAnswer($el)) {
        return _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Answer;
    }
    return postTypeId || null;
}
function isAnswer($el) {
    return $el.closest('.answer').length > 0;
}
function getLocalizedPostType($el) {
    return isAnswer($el) ? __tr(["answer"], undefined, "en", []) : __tr(["question"], undefined, "en", []);
}
function getVotingContainer($el) {
    return $el.closest('.js-voting-container');
}
function allVotingContainers() {
    return jquery__WEBPACK_IMPORTED_MODULE_2__('.js-voting-container');
}
function shouldSimulateVoting($el) {
    return getVotingContainer($el).data('suppress-vote-requests');
}
function getLtuVal($el) {
    return getVotingContainer($el).data('ltu');
}
function getCheckmarkCopies() {
    return getAcceptedAnswerLinks().find(".js-checkmark-copy");
}
function showErrorMessage(message, options) {
    const defaults = {
        dismissable: true,
        transient: false,
        transientTimeout: (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.suggestedTransientTimeout)(message, true),
        type: 'danger',
        actions: [],
    };
    const settings = jquery__WEBPACK_IMPORTED_MODULE_2__.extend({}, defaults, options);
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showToast)(message, settings);
}
function showGenericErrorMessage() {
    showErrorMessage(__tr(["An error has occurred - please retry your request."], undefined, "en", []), { transient: true });
}
function showInfoMessage(message, options) {
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showToast)(message, options);
}
function updateModScore($el, incrementAmount) {
    const $score = getVotingContainer($el).find(".js-vote-count");
    const newScore = $score.data('value') + incrementAmount;
    const displayScore = normalizePostScore(newScore);
    $score.data('value', newScore).text(displayScore);
    // Rebind the split details if we cleared them.
    if ($score.data('had-split')) {
        bindFetchVoteCounts($score);
    }
}
function getModScore($el) {
    return getVotingContainer($el).find(".js-vote-count").data('value');
}
function submitModVote($button, voteTypeId) {
    unbindVoteClicks($button); // disable voting during a vote
    // prevent realtime updates while we process the vote
    _realtime_se_mod__WEBPACK_IMPORTED_MODULE_8__.pauseQuestionNotifications(true);
    const postId = getPostId($button);
    const referrer = getReferrer($button);
    // Existing functionality will cause this request to be simulated.
    if (shouldSimulateVoting($button)) {
        $button.data('vote-stub', { Success: true, LastVoteTypeId: voteTypeId, NewScore: getModScore($button) });
    }
    submit({
        $target: $button,
        postId: postId,
        voteTypeId: voteTypeId,
        referrer: referrer,
        success: modVoteResult,
        data: { 'ltu': getLtuVal($button) }
    });
}
function modVoteResult($jClicked, postId, data) {
    if (data.Success) {
        if (data.Message) {
            showInfoMessage(data.Message, { transient: data.Transient, useRawHtml: true });
        }
        if (data.LastVoteTypeId == _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.upMod) {
            jquery__WEBPACK_IMPORTED_MODULE_2__(document).trigger('upVote', [postId, data.NewScore]);
        }
        else if (data.LastVoteTypeId == _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.downMod) {
            jquery__WEBPACK_IMPORTED_MODULE_2__(document).trigger('downVote', [postId, data.NewScore]);
        }
        else {
            jquery__WEBPACK_IMPORTED_MODULE_2__(document).trigger('undoVote', [postId, data.NewScore]);
        }
    }
    else {
        if (data.Message) {
            if (data.Info) {
                showInfoMessage(data.Message, { transient: true, useRawHtml: true });
            }
            else {
                showErrorMessage(data.Message, { transient: true, useRawHtml: true });
            }
        }
        else {
            showGenericErrorMessage();
        }
        // undo score change
        const displayScore = normalizePostScore(data.NewScore);
        getVotingContainer($jClicked).find('.js-vote-count').data('value', displayScore).text(displayScore);
        // always unclick the button, and then set it to the previous vote if a previous vote exists
        setSelected($jClicked, false);
        if (data.LastVoteTypeId) {
            selectPreviousVote($jClicked, data.LastVoteTypeId);
        }
    }
    bindVoteClicks($jClicked.parent()); // re-enable voting..
    _realtime_se_mod__WEBPACK_IMPORTED_MODULE_8__.pauseQuestionNotifications(false);
    updateVoteButtonTitles($jClicked);
}
function selectPreviousVote($jClicked, voteTypeId) {
    const jDiv = getVotingContainer($jClicked);
    if (voteTypeId === _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.upMod) {
        setSelected(jDiv.find('.js-vote-up-btn'), true);
    }
    else if (voteTypeId === _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.downMod) {
        setSelected(jDiv.find('.js-vote-down-btn'), true);
    }
}
function updateFollowUI($followBtn, isQuestion, isFollowing) {
    if (!$followBtn || !$followBtn.length) {
        return;
    }
    $followBtn.attr('aria-pressed', isFollowing ? 'true' : 'false');
    const title = isFollowing
        ? isQuestion ? __tr(["Unfollow this question to stop receiving notifications"], undefined, "en", []) : __tr(["Unfollow this answer to stop receiving notifications"], undefined, "en", [])
        : isQuestion ? __tr(["Follow this question to receive notifications"], undefined, "en", []) : __tr(["Follow this answer to receive notifications"], undefined, "en", []);
    (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($followBtn, title);
    // data-gps-track update item Type
    const currentGpsTrack = $followBtn.data('gps-track');
    const newTrackItemType = isFollowing ? 15 : 14; // corresponds to PostClickType enum members, unfollow: 15, follow: 14
    const newGpsTrack = currentGpsTrack.replace(/item:[ ]?[\d]+/, "item: " + newTrackItemType);
    $followBtn.data('gps-track', newGpsTrack);
    $followBtn.html(isFollowing ? __tr(["Following"], undefined, "en", []) : __tr(["Follow"], undefined, "en", []));
}
function updateCollectionFollowUI($followBtn, isCollectiveCollection, isFollowing) {
    if (!$followBtn || !$followBtn.length) {
        return;
    }
    if (isCollectiveCollection) {
        $followBtn.attr('aria-pressed', isFollowing ? 'true' : 'false');
        const title = isFollowing
            ? __tr(["Unfollow this collection to stop receiving notifications"], undefined, "en", [])
            : __tr(["Follow this collection to receive notifications for new additions, edits and comments."], undefined, "en", []);
        (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($followBtn, title);
        $followBtn.html(isFollowing ? __tr(["Following"], undefined, "en", []) : __tr(["Follow"], undefined, "en", []));
    }
}
function follow($followBtn) {
    $followBtn.prop('disabled', true);
    const isQuestion = $followBtn.hasClass('js-follow-question');
    const isCollectiveCollection = $followBtn.hasClass('js-follow-collective-collection');
    const postId = parseInt($followBtn.closest('.js-post-menu').data('post-id'));
    const originalIsFollowing = $followBtn.attr('aria-pressed') === 'true';
    const newIsFollowing = !originalIsFollowing;
    if (isCollectiveCollection) {
        updateCollectionFollowUI($followBtn, isCollectiveCollection, newIsFollowing);
    }
    else {
        updateFollowUI($followBtn, isQuestion, newIsFollowing);
    }
    submit({
        $target: $followBtn,
        postId: postId,
        voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.follow,
        undo: originalIsFollowing,
        success: function ($clicked, pid, data) {
            if (!data.Success) {
                if (isCollectiveCollection) {
                    updateCollectionFollowUI($followBtn, isCollectiveCollection, newIsFollowing);
                }
                else {
                    updateFollowUI($followBtn, isQuestion, newIsFollowing);
                }
                showErrorMessage(data.Message, { useRawHtml: true });
            }
            else {
                let followPopoverExists = jquery__WEBPACK_IMPORTED_MODULE_2__("#divFollowingConfirm-" + postId).length > 0;
                if (data.Message) {
                    if (!followPopoverExists) {
                        jquery__WEBPACK_IMPORTED_MODULE_2__(data.Message).insertAfter($followBtn);
                        followPopoverExists = true;
                    }
                    // always want to make sure that these are set properly, since other code below
                    // messes with this for removing the new feature popover
                    $followBtn.attr("aria-controls", "divFollowingConfirm-" + postId);
                    $followBtn.attr("data-controller", "s-popover s-tooltip");
                }
                if (newIsFollowing) {
                    // just started following, show the popover
                    if (followPopoverExists) {
                        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.hideToasts)();
                        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.toggleStacksPopover)($followBtn, true);
                    }
                    else {
                        // can't find the popover controller for any reason, still show a confirmation with toast message
                        if (isQuestion) {
                            showInfoMessage(__tr(["Youâre now following this question"], undefined, "en", []), { transient: true });
                        }
                        else if (isCollectiveCollection) {
                            showInfoMessage(__tr(["Youâre now following this collection"], undefined, "en", []), { transient: true });
                        }
                        else {
                            showInfoMessage(__tr(["Youâre now following this answer"], undefined, "en", []), { transient: true });
                        }
                    }
                }
                else {
                    // just unfollowed, show message at top of screen confirming
                    if (isQuestion) {
                        showInfoMessage(__tr(["Youâre no longer following this question"], undefined, "en", []), { transient: true });
                    }
                    else if (isCollectiveCollection) {
                        showInfoMessage(__tr(["Youâre no longer following this collection"], undefined, "en", []), { transient: true });
                    }
                    else {
                        showInfoMessage(__tr(["Youâre no longer following this answer"], undefined, "en", []), { transient: true });
                    }
                    if (followPopoverExists) {
                        // if the popover was open (for example, user clicked the popover unfollow button) then hide it
                        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.toggleStacksPopover)($followBtn, false);
                    }
                }
            }
            $followBtn.prop('disabled', false);
        },
        error: function () {
            if (isCollectiveCollection) {
                updateCollectionFollowUI($followBtn, isCollectiveCollection, newIsFollowing);
            }
            else {
                updateFollowUI($followBtn, isQuestion, newIsFollowing);
            }
            $followBtn.prop('disabled', false);
        }
    });
}
function bookmark($bookmarkBtn) {
    if ($bookmarkBtn.data('loading')) {
        return;
    } // prevent fast double-clicking of the vote control
    $bookmarkBtn.data('loading', true);
    const postId = getPostId($bookmarkBtn);
    const $bookmarkCount = getVotingContainer($bookmarkBtn).find('.js-bookmark-count');
    const $bookmarkActive = getVotingContainer($bookmarkBtn).find('.js-bookmark-selected');
    const $bookmarkInactive = getVotingContainer($bookmarkBtn).find('.js-bookmark-unselected');
    const originalValue = isSelected($bookmarkBtn);
    const originalCount = $bookmarkCount.data('value') || 0;
    const newValue = !originalValue;
    const newCount = newValue ? originalCount + 1 : originalCount - 1;
    // make this a function, so if there's a failure during submission, we can roll back the UI
    const updateUI = function (value, count) {
        setSelected($bookmarkBtn, value);
        $bookmarkBtn.attr('aria-label', count ? __tr(["Bookmark"], undefined, "en", []) + '(' + count + ')' : __tr(["Bookmark"], undefined, "en", []));
        updateBookmarkButtonTitles($bookmarkBtn);
        $bookmarkCount.data('value', count).text(count).toggleClass('d-none', count === 0);
        $bookmarkActive.toggleClass('d-none');
        $bookmarkInactive.toggleClass('d-none');
    };
    updateUI(newValue, newCount);
    submit({
        $target: $bookmarkBtn,
        postId: postId,
        voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.bookmark,
        undo: originalValue,
        success: function (clicked, pid, data) {
            $bookmarkBtn.data('loading', false);
            if (!data.Success) {
                updateUI(originalValue, originalCount);
                showErrorMessage(data.Message, { useRawHtml: true });
            }
        }
    });
}
function showFancyDeletionPrompt($button, postId, callback, optionalFormData, hasActiveVote) {
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.loadModal)(`/posts/${postId}/fancy-deletion-prompt`, { returnElements: $button })
        .then(function ($modal) {
        $modal.find('a:link').attr('target', '_blank');
        $modal.find('.js-ok-button').on('click', function () {
            submit({
                $target: $button,
                postId: postId,
                voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.deletion,
                success: callback,
                data: optionalFormData,
                undo: hasActiveVote
            });
        });
    });
}
function deletion($jClicked, optionalCallback, optionalFormData) {
    const postId = parseInt($jClicked.closest('.js-post-menu').attr('data-post-id'));
    const postTypeId = parseInt($jClicked.closest('.js-post-menu').attr('data-post-type-id'));
    const isDeleted = $jClicked.data('is-deleted');
    const prompt = $jClicked.data('prompt');
    const hasActiveVote = $jClicked.data('has-active-vote');
    const hasDeletedVote = $jClicked.data('has-deleted-vote');
    const fancy = !isDeleted ? !!$jClicked.data('fancy-delete') : false;
    const callback = optionalCallback || deletionCallback;
    if (hasDeletedVote && hasActiveVote) {
        submit({
            $target: $jClicked,
            postId: postId,
            voteTypeId: (isDeleted ? _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.undeletion : _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.deletion),
            success: callback,
            data: optionalFormData,
            undo: hasActiveVote
        });
        return;
    }
    if (postTypeId === _PartialJS_full_common_99_PostTypeId_mod__WEBPACK_IMPORTED_MODULE_13__.PostTypeId.Article && !isDeleted) {
        Stacks.showModal($jClicked.closest('.js-post-menu').find('.js-delete-article-modal')[0]);
    }
    else {
        if (fancy) {
            showFancyDeletionPrompt($jClicked, postId, callback, optionalFormData, hasActiveVote);
            return;
        }
        if (confirm(prompt)) {
            // HACK: realtime deletion broadcast doesn't send down the account id that did it
            _realtime_se_mod__WEBPACK_IMPORTED_MODULE_8__.pauseQuestionNotifications(true);
            submit({
                $target: $jClicked,
                postId: postId,
                voteTypeId: (isDeleted ? _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.undeletion : _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.deletion),
                success: callback,
                data: optionalFormData,
                undo: hasActiveVote
            });
        }
    }
}
function deletionCallback($jClicked, postId, data) {
    const wasDeleted = $jClicked.data('is-deleted');
    if (data && data.Success) {
        if (data.NewScore < 0) {
            // On a state change, reloads the page to make sure all styles comply with the new state
            document.location.reload();
        }
        else {
            // If there's no state change, reloads only the Delete Link information
            const url = '/posts/' + postId + '/delete-link';
            jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
                type: 'GET',
                url: url,
                dataType: 'json',
                success: function (deleteLinkInfo) {
                    const postIsDeleted = $jClicked.data('is-deleted');
                    // Refreshes delete link information
                    $jClicked.html(deleteLinkInfo.Text);
                    $jClicked.attr('title', deleteLinkInfo.Tooltip);
                    $jClicked.data('fancy-delete', deleteLinkInfo.ShowFancyDeletePrompt);
                    $jClicked.data('prompt', deleteLinkInfo.Prompt);
                    $jClicked.data('has-active-vote', deleteLinkInfo.HasActiveVote);
                    $jClicked.data('has-deleted-vote', deleteLinkInfo.HasDeletedVote);
                    // Figures out which operation was executed and displays appropriate message
                    let infoMessage;
                    if (postIsDeleted && deleteLinkInfo.HasActiveVote) { // Vote for Undeletion
                        infoMessage = __tr(["Your undelete vote has been recorded"], undefined, "en", []);
                    }
                    else if (!postIsDeleted && deleteLinkInfo.HasActiveVote) { // Vote for Deletion
                        infoMessage = __tr(["Your delete vote has been recorded"], undefined, "en", []);
                    }
                    else if (postIsDeleted && !deleteLinkInfo.HasActiveVote) { // Retract vote for Undeletion
                        infoMessage = __tr(["Your undelete vote has been retracted"], undefined, "en", []);
                    }
                    else if (!postIsDeleted && !deleteLinkInfo.HasActiveVote) { // Retract vote for Deletion
                        infoMessage = __tr(["Your delete vote has been retracted"], undefined, "en", []);
                    }
                    showInfoMessage(infoMessage);
                },
                error: function () {
                    // No way to recover, reload the page
                    document.location.reload();
                }
            });
        }
        jquery__WEBPACK_IMPORTED_MODULE_2__(".js-post-notice-delete-post[data-post-id=" + postId + "]").remove();
    }
    else {
        const msg = (data && data.Message) ? data.Message : wasDeleted ? __tr(["A problem occurred during undeletion"], undefined, "en", []) : __tr(["A problem occurred during deletion"], undefined, "en", []);
        showErrorMessage(msg, { useRawHtml: true }); // data.Message can include html, need to allow for it with useRawHtml
    }
    // HACK: realtime deletion broadcast doesn't send down the account id that did it
    _realtime_se_mod__WEBPACK_IMPORTED_MODULE_8__.pauseQuestionNotifications(false);
}
function acceptAnswer_click() {
    const $clicked = jquery__WEBPACK_IMPORTED_MODULE_2__(this), postId = getPostId($clicked), $links = getAcceptedAnswerLinks(), $checkmarkCopies = getCheckmarkCopies();
    if ($clicked.is(':working') && !$clicked.hasClass('js-accept-answer-btn'))
        return;
    const $spinner = jquery__WEBPACK_IMPORTED_MODULE_2__('<div class="flex--item as-center" />').addStacksSpinner('sm').appendTo(getVotingContainer($clicked));
    $links.working(true);
    submit({
        $target: $clicked,
        postId: postId,
        voteTypeId: _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.acceptedByOwner,
        success: function ($ignore, postId, data) {
            if (data.Success) {
                // reset old accepted answer checks
                setSelected($links, false);
                // server sends down which vote type id was successful, either accept or undo
                if (parseInt(data.Message, 10) == _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.acceptedByOwner) {
                    setSelected($clicked, true);
                }
                if ($checkmarkCopies.length !== 0) {
                    $checkmarkCopies.each(function () {
                        if (StackExchange.options.user.isModerator && data.HasAcceptedByModRights === true) {
                            jquery__WEBPACK_IMPORTED_MODULE_2__(this).removeClass('d-none');
                        }
                        else {
                            jquery__WEBPACK_IMPORTED_MODULE_2__(this).addClass('d-none');
                        }
                    });
                }
            }
            else {
                // the server sent back a reason that it blocked this vote - inform the user
                // if the message is that it's too early to accept to the answer, fade it away automatically.
                showErrorMessage(data.Message, { transient: data.Transient, useRawHtml: true });
            }
            $spinner.remove();
            $links.working(false).trigger('update');
        }
    });
}
function acceptAnswer_update() {
    const $this = jquery__WEBPACK_IMPORTED_MODULE_2__(this), verb = isSelected($this) ? 'unaccept' : 'accept';
    (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($this, $this.data('title-' + verb), voteContainerTooltipOptions);
    const label = $this.data('verb-' + verb);
    if (label) {
        $this.text(label);
    }
}
let loadingVotes = false;
function fetchVoteCounts($scoreEl) {
    if (loadingVotes)
        return;
    loadingVotes = true;
    const postId = getPostId($scoreEl);
    $scoreEl.addStacksSpinner('sm', 'fc-black-300');
    if (shouldSimulateVoting($scoreEl)) {
        setTimeout(function () {
            const jDiv = getVotingContainer($scoreEl);
            const jUp = jDiv.find('.js-vote-up-btn');
            const jDown = jDiv.find('.js-vote-down-btn');
            const downvoted = isSelected(jDown);
            const upvoted = isSelected(jUp);
            const score = getModScore($scoreEl);
            const getJson = function () {
                if (score >= 0 && downvoted)
                    return { up: score + 1, down: -1 };
                if (score <= 0 && upvoted)
                    return { up: 1, down: score - 1 };
                return score > 0 ? { up: score, down: 0 } : { up: 0, down: score };
            };
            applyVoteCounts($scoreEl, getJson());
            loadingVotes = false;
        }, 200);
        return;
    }
    jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
        type: 'GET',
        url: `/posts/${postId}/vote-counts`,
        dataType: "json",
        success: function (json) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.removeMessages)();
            applyVoteCounts($scoreEl, json);
        },
        error: function (res) {
            $scoreEl.removeSpinner();
            showErrorMessage((res.responseText && res.responseText.length < 100 ? res.responseText : __tr(["An error occurred during vote count fetch"], undefined, "en", [])), { transient: res.status == 409, useRawHtml: true }); // fade away throttle errors
        },
        complete: function () {
            loadingVotes = false;
        }
    });
}
function applyVoteCounts($score, json) {
    const html = '<div class="fc-green-500">' + json.up + '</div>' +
        '<div class="vote-count-separator"></div>' +
        '<div class="fc-red-500">' + json.down + '</div>';
    const upCount = Math.abs(+json.up);
    const downCount = Math.abs(+json.down);
    const label = __tr(["$upCount$ up / $downCount$ down","$upCount$ up / $downCount$ down","$upCount$ up / $downCount$ down","$upCount$ up / $downCount$ down"], {upCount: upCount,downCount: downCount}, "en", ["upCount","downCount"]);
    const tooltip = __tr(["This $postType$ has received $upCount$ upvote and $downCount$ downvote.","This $postType$ has received $upCount$ upvote and $downCount$ downvotes.","This $postType$ has received $upCount$ upvotes and $downCount$ downvote.","This $postType$ has received $upCount$ upvotes and $downCount$ downvotes."], {upCount: upCount,downCount: downCount,postType: getLocalizedPostType($score)}, "en", ["upCount","downCount"]);
    $score
        .html(html)
        .data('value', Math.abs(+json.up) - Math.abs(+json.down))
        .off('keypress click')
        .data('bound', false)
        .data('had-split', true)
        .removeClass('c-pointer')
        .removeAttr('role')
        .attr('aria-label', label);
    (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($score, tooltip, voteContainerTooltipOptions);
}
function bindLoggedIn(votesCast) {
    vote_init(votesCast);
    getProtectLinks().unbind("click").click(function () {
        jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
            type: "POST",
            url: "/question/protect",
            data: {
                'id': jquery__WEBPACK_IMPORTED_MODULE_2__(this).closest('.js-post-menu').attr('data-post-id'),
                'fkey': _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.fkey
            },
            success: function () { location.reload(); }
        });
    });
    getUnprotectLinks().unbind("click").click(function () {
        jquery__WEBPACK_IMPORTED_MODULE_2__.ajax({
            type: "POST",
            url: "/question/unprotect",
            data: {
                'id': jquery__WEBPACK_IMPORTED_MODULE_2__(this).closest('.js-post-menu').attr('data-post-id'),
                'fkey': _Shared_options_mod__WEBPACK_IMPORTED_MODULE_1__["default"].user.fkey
            },
            success: function () { location.reload(); }
        });
    });
    (0,_05_VoteToCloseAndFlag_mod__WEBPACK_IMPORTED_MODULE_10__.initVoteToCloseAndFlag)();
    bookmark_init();
    reaction_init();
    follow_init();
    jquery__WEBPACK_IMPORTED_MODULE_2__(document).on({
        // Don't show tooltips in a voting container if it contains an active popover.
        's-tooltip:show': function (evt) {
            if (jquery__WEBPACK_IMPORTED_MODULE_2__(this).has('.s-popover.is-visible:not(.s-popover__tooltip)').length) {
                evt.preventDefault();
            }
        },
        // Make all voting tooltips wmx2
        's-tooltip:shown': function (evt) {
            const popoverId = jquery__WEBPACK_IMPORTED_MODULE_2__(evt.target).attr('aria-describedby');
            jquery__WEBPACK_IMPORTED_MODULE_2__('#' + popoverId).addClass('wmx2');
        }
    }, '.js-voting-container');
}
let reaction_init = function () {
    reaction_init = function () { };
    let templateLoader = null;
    function loadTemplate() {
        if (!templateLoader) {
            templateLoader =
                jquery__WEBPACK_IMPORTED_MODULE_2__.ajax('/posts/popover/reactions', { dataType: 'text' })
                    .fail(function () {
                    templateLoader = null;
                    showGenericErrorMessage();
                });
        }
        return templateLoader;
    }
    Stacks.addController('reactions', {
        targets: ['button', 'toggle', 'count', 'onboarding', 'list'],
        connect: function () {
            if (this.hasOnboardingTarget) {
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.queueStacksPopover)(jquery__WEBPACK_IMPORTED_MODULE_2__(this.onboardingTarget), 60);
            }
            this.updateUI();
        },
        dismissOnboarding: function () {
            if (!this.hasOnboardingTarget) {
                return;
            }
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.toggleStacksPopover)(jquery__WEBPACK_IMPORTED_MODULE_2__(this.onboardingTarget), false);
        },
        onboardingDismissed: function () {
            if (!this.hasOnboardingTarget) {
                return;
            }
            (0,_PartialJS_full_99_UserFlags_mod__WEBPACK_IMPORTED_MODULE_4__.toggleUserFlags)(_PartialJS_full_definitions_Enums_generated_mod__WEBPACK_IMPORTED_MODULE_3__.UserFlags.DismissPostReactionIntroPopover, true);
            // The following fixes a bug where the reaction popover element would be too narrow when onboarding was present on the page.
            jquery__WEBPACK_IMPORTED_MODULE_2__(this.onboardingTarget).remove();
            jquery__WEBPACK_IMPORTED_MODULE_2__(this.element).removeClass('ps-relative');
        },
        tryToggle: function (evt) {
            // This replicates logic from unadornedButtonClick. We don't want the voting buttons to get focused on mouse click but we
            // don't want them to lose their focus on keyboard click.
            if (evt.type === 'keypress' && (evt.keyCode === _LegacyJS_constants_mod__WEBPACK_IMPORTED_MODULE_12__.KEY_CODE.SPACE || evt.keyCode === _LegacyJS_constants_mod__WEBPACK_IMPORTED_MODULE_12__.KEY_CODE.ENTER)) {
                evt.preventDefault();
                this.toggle(evt);
            }
            else if (evt.type === 'click') {
                evt.currentTarget.blur();
                evt.preventDefault();
                this.toggle(evt);
            }
        },
        toggle: function (evt) {
            if (!this.tryStartWork()) {
                return;
            }
            // If the controller supports multiple vote type ids, get it from the button.  Otherwise, use thank you.
            const $target = jquery__WEBPACK_IMPORTED_MODULE_2__(evt.currentTarget);
            const voteTypeId = this.allowsMultiple ? +$target.attr('data-vote-id') : _Declarations_TypeIdEnums__WEBPACK_IMPORTED_MODULE_11__.VoteTypeId.thankYou;
            const adding = this.toggleVoteTypeId(voteTypeId);
            submit({
                $target: $target,
                postId: this.postId,
                voteTypeId: voteTypeId,
                undo: !adding,
                success: this.handleVoteResponse.bind(this),
                error: this.abortWork.bind(this),
                complete: this.completeWork.bind(this)
            });
        },
        loadPopover: function () {
            const id = 'reactions-popover-' + this.postId;
            const $button = this.$btn;
            const controller = this;
            const popoverPlacement = this.isFooter ? 'top-start' : 'right';
            loadTemplate().done(function (html) {
                // It's possible that the user will try loading the popover multiple times.
                // Reject if we've handled the response.
                if (jquery__WEBPACK_IMPORTED_MODULE_2__('#' + id).length > 0) {
                    return;
                }
                jquery__WEBPACK_IMPORTED_MODULE_2__(html).attr('id', id).insertAfter($button);
                $button.attr({
                    'aria-controls': id,
                    'data-controller': 's-popover ' + $button.attr('data-controller'),
                    'data-action': 's-popover#toggle ' + $button.attr('data-action'),
                    'data-s-popover-placement': popoverPlacement
                });
                controller.updateUI();
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.toggleStacksPopover)($button, true);
            });
        },
        showVotes: function () {
            jquery__WEBPACK_IMPORTED_MODULE_2__.ajax(`/posts/modal/reactions/${this.postId}`)
                .then(this._showVotes.bind(this))
                .fail(showGenericErrorMessage);
        },
        _showVotes: function (data) {
            if (data.Message) {
                showInfoMessage(data.Message, { useRawHtml: true });
            }
            else if (data.ModalHtml) {
                const $modal = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showModal)(jquery__WEBPACK_IMPORTED_MODULE_2__(data.ModalHtml).elementNodesOnly(), { returnElements: jquery__WEBPACK_IMPORTED_MODULE_2__(this.countTarget) });
                _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_7__.bindTrackClicks($modal);
            }
            const newState = this.stateFromData(data);
            if (newState) {
                this.state = newState;
            }
        },
        get $el() { return jquery__WEBPACK_IMPORTED_MODULE_2__(this.element); },
        get $btn() { return jquery__WEBPACK_IMPORTED_MODULE_2__(this.buttonTarget); },
        get postId() { return +getPostId(this.$el); },
        // Infer the behavior from the button's properties.
        get allowsMultiple() { return this.$btn.attr('aria-haspopup') === 'true'; },
        get isFooter() { return this.$btn.hasClass('js-reactions-footer-button'); },
        get state() {
            const votesCast = JSON.parse(this.$el.attr('data-votes-cast') || '[]');
            const voteCounts = {};
            this.listTargets.forEach(function (el) {
                voteCounts[+el.dataset.voteId] = +el.dataset.voteCount;
            });
            if (votesCast) {
                votesCast.sort();
            }
            return {
                votesCast: votesCast,
                count: +this.$el.attr('data-count'),
                voteCounts: voteCounts
            };
        },
        set state(val) {
            this.$el.attr({
                'data-votes-cast': JSON.stringify(val.votesCast),
                'data-count': val.count
            });
            this.listTargets.forEach(function (el) {
                const voteCounts = val.voteCounts[+el.dataset.voteId] || 0;
                jquery__WEBPACK_IMPORTED_MODULE_2__(el).attr('data-vote-count', voteCounts);
            });
            this.updateUI();
        },
        tryStartWork: function () {
            if (this.workData) {
                return false;
            }
            this.workData = this.state;
            return true;
        },
        abortWork: function () {
            if (!this.workData) {
                return;
            }
            this.state = this.workData;
            this.workData = null;
        },
        completeWork: function () {
            this.workData = null;
        },
        toggleVoteTypeId: function (voteTypeId) {
            const state = this.state;
            let removed = false;
            let index;
            while ((index = state.votesCast.indexOf(voteTypeId)) !== -1) {
                removed = true;
                state.votesCast.splice(index, 1);
            }
            let specificVoteCount = state.voteCounts[voteTypeId] || 0;
            if (removed) {
                state.count--;
                specificVoteCount = Math.max(0, specificVoteCount - 1);
            }
            else {
                state.votesCast.push(voteTypeId);
                state.count++;
                specificVoteCount++;
            }
            state.voteCounts[voteTypeId] = specificVoteCount;
            this.state = state;
            return !removed;
        },
        stateFromData: function (data) {
            const newState = {
                count: data.NewScore,
                votesCast: data.SelectedVoteTypeIds,
                voteCounts: data.VoteCounts
            };
            return (typeof newState.count === 'number' && Array.isArray(newState.votesCast)) ? newState : null;
        },
        handleVoteResponse: function ($target, postId, data) {
            const success = data.Success;
            const message = data.Message;
            const newState = this.stateFromData(data);
            if (newState) {
                // If we know the new score and the selected vote types, update the UI to match
                this.state = newState;
            }
            else if (!success) {
                // If we failed and we don't know the new score, revert back to the old state.
                this.abortWork();
            }
            // Otherwise, assume the score we rendered was correct enough.
            if (success && this.allowsMultiple) {
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.toggleStacksPopover)(this.$btn, false);
            }
            if (message) {
                if (success) {
                    showInfoMessage(message, { transient: data.Transient, useRawHtml: true });
                }
                else if (data.Info) {
                    showInfoMessage(message, { transient: true, useRawHtml: true });
                }
                else {
                    showErrorMessage(message, { transient: true, useRawHtml: true });
                }
            }
        },
        updateUI: function () {
            const state = this.state;
            const count = state.count;
            const votesCast = state.votesCast;
            const hasVoted = votesCast.length > 0;
            const haveOthersVoted = count > votesCast.length;
            let $count;
            if (!this.isFooter) {
                $count = jquery__WEBPACK_IMPORTED_MODULE_2__(this.countTarget);
                // These classes are also applied in Reactions.cshtml and need to be updated in both locations.
                $count
                    .toggleClass('d-none', count <= 0)
                    .toggleClass('fc-yellow-500', hasVoted)
                    .toggleClass('fc-black-300', !hasVoted)
                    .text(count);
            }
            this.$btn
                .find('svg').toggleClass('native', !this.isFooter && hasVoted);
            this.toggleTargets.forEach(function (button) {
                const $button = jquery__WEBPACK_IMPORTED_MODULE_2__(button);
                const voteTypeId = +$button.attr('data-vote-id');
                const selected = votesCast.indexOf(voteTypeId) !== -1;
                $button
                    .toggleClass('is-selected d:bg-white bc-black-225', selected)
                    .attr('aria-pressed', selected.toString());
                if (!this.isFooter) {
                    $button.find('svg').toggleClass('native', selected);
                }
            }, this);
            const postType = getLocalizedPostType(this.$btn);
            if (!this.allowsMultiple) {
                (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipHtml)(this.$btn, hasVoted
                    ? __tr(["You reacted <strong>thanks</strong> (click to undo)."], undefined, "en", [])
                    : __tr(["Say <strong>thanks</strong> for this $postType$."], {postType: postType}, "en", []), voteContainerTooltipOptions);
                if ($count) {
                    (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipHtml)($count, hasVoted
                        ? haveOthersVoted
                            ? __tr(["You and $__count$ other reacted with <strong>thanks</strong>.","You and $__count$ others reacted with <strong>thanks</strong>."], {__count: count - 1}, "en", ["__count"])
                            : __tr(["You reacted with <strong>thanks</strong>."], undefined, "en", [])
                        : __tr(["$__count$ other reacted with <strong>thanks</strong>.","$__count$ others reacted with <strong>thanks</strong>."], {__count: count}, "en", ["__count"]), voteContainerTooltipOptions);
                }
            }
            else {
                (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)(this.$btn, __tr(["Click to add a reaction"], undefined, "en", []), reactionContainerTooltipOptions);
            }
            this.listTargets.forEach(function (button) {
                const $button = jquery__WEBPACK_IMPORTED_MODULE_2__(button);
                const voteTypeId = +$button.attr('data-vote-id');
                const reactionCount = +$button.attr('data-vote-count');
                const reactionName = $button.attr('data-name');
                const selected = votesCast.indexOf(voteTypeId) !== -1;
                const hasOtherVoters = reactionCount > (selected ? 1 : 0);
                $button.find('.js-reaction-count').text(reactionCount);
                this.updateTooltip(button);
                $button
                    .toggleClass('bg-black-150 d:bg-white bc-black-225', selected)
                    .toggleClass('bg-white d:bg-black-100', !selected)
                    .toggleClass('d-none', !selected && !hasOtherVoters)
                    .attr({
                    'aria-pressed': selected.toString(),
                    'aria-label': __tr(["$reactionName$ ($reactionCount$ times)","$reactionName$ ($reactionCount$ times)"], {reactionName: reactionName,reactionCount: reactionCount}, "en", ["reactionCount"]),
                    'data-controller': 's-tooltip',
                    'data-action': 'reactions#toggle s-tooltip:show->reactions#loadAndUpdateTooltip'
                });
            }, this);
            // upon deploy of new footer UI, if there are reactions leftover from before, then the 'add a reaction' prompt won't show;
            // this fixes this by summing the new reactions and checking that before show/hiding the prompt
            const hasReactions = +this.$el.attr('data-count') > 0;
            this.$el.find('.js-add-reaction-label').toggleClass('d-none', hasReactions);
        },
        loadAndUpdateTooltip: function (evt) {
            const button = evt.currentTarget;
            const voteTypeId = +jquery__WEBPACK_IMPORTED_MODULE_2__(button).attr('data-vote-id');
            if (!this.updateTooltip(button)) {
                const self = this;
                jquery__WEBPACK_IMPORTED_MODULE_2__.ajax(`/posts/tooltip/reactions/${getPostId(jquery__WEBPACK_IMPORTED_MODULE_2__(button))}/${voteTypeId}`)
                    .done(function (data) {
                    jquery__WEBPACK_IMPORTED_MODULE_2__(button).data('tooltip-payload', data);
                    self.updateTooltip(button);
                });
            }
        },
        updateTooltip: function (button) {
            const votesCast = this.state.votesCast;
            const $button = jquery__WEBPACK_IMPORTED_MODULE_2__(button);
            const voteTypeId = +$button.attr('data-vote-id');
            const selected = votesCast.indexOf(voteTypeId) !== -1;
            const reactionCount = +$button.attr('data-vote-count');
            if (selected && reactionCount === 1) {
                (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipHtml)($button, '<div class="ta-left fs-caption w128 s-tooltip"><p class="fs-body1 mb6">'
                    + __tr(["Reacted with <strong>$reaction$</strong>"], {reaction: $(button).attr('data-name')}, "en", [])
                    + '</p><span class="fs-caption py2 m0">' + __tr(["You"], undefined, "en", []) + '</span></div>', reactionContainerTooltipOptions);
                return true;
            }
            const payload = $button.data('tooltip-payload');
            if (payload && payload.VoterUsers) {
                const voterUsers = payload.VoterUsers;
                const voterUsersHtml = voterUsers.map(function (user) {
                    return '<p class="fs-caption py2 m0">' + jquery__WEBPACK_IMPORTED_MODULE_2__('<div/>').text(user).html() + '</p>';
                }).join('');
                const htmlStartBody = '<div class="ta-left fs-caption w128 s-tooltip"><p class="fs-body1 mb6">' + __tr(["Reacted with <strong>$reaction$</strong>"], {reaction: $(button).attr('data-name')}, "en", [])
                    + '</p>' + voterUsersHtml;
                const htmlSelfVoter = selected ? '<p class="fs-caption py2 m0">' + __tr(["You"], undefined, "en", []) + '</p>' : '';
                const numberLeftover = reactionCount - (selected ? voterUsers.length + 1 : voterUsers.length);
                const leftoverText = "+ " + numberLeftover + ' ' + __tr(["more"], undefined, "en", []);
                const htmlLeftover = numberLeftover > 0 ? '<p class="fs-caption fw-bold pt2 m0">' + leftoverText + '</p>' : '';
                const htmlEndTag = '</div>';
                const htmlCombined = htmlStartBody + htmlSelfVoter + htmlLeftover + htmlEndTag;
                (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipHtml)($button, htmlCombined, reactionContainerTooltipOptions);
            }
            if (payload) {
                return true;
            }
            (0,_stub_mod__WEBPACK_IMPORTED_MODULE_9__.setTooltipText)($button, __tr(["Loading..."], undefined, "en", []), reactionContainerTooltipOptions);
            return false;
        }
    });
};


/***/ }),

/***/ "./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.mod.ts":
/*!*************************************************************!*\
  !*** ./_Scripts/LegacyJS/full/05_VoteToCloseAndFlag.mod.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   closeAfterLoadListOriginals: () => (/* binding */ closeAfterLoadListOriginals),
/* harmony export */   closeInitDuplicateSubPane: () => (/* binding */ closeInitDuplicateSubPane),
/* harmony export */   close_updateCloseLinkCount: () => (/* binding */ close_updateCloseLinkCount),
/* harmony export */   initVoteToCloseAndFlag: () => (/* binding */ initVoteToCloseAndFlag),
/* harmony export */   showFancyReopenConfirmation: () => (/* binding */ showFancyReopenConfirmation)
/* harmony export */ });
/* harmony import */ var _stackoverflow_stacks_icons_icons__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @stackoverflow/stacks-icons/icons */ "./node_modules/@stackoverflow/stacks-icons/dist/icons.js");
/* harmony import */ var _PartialJS_full_common_99_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../PartialJS/full-common/99_helpers.mod */ "./_Scripts/PartialJS/full-common/99_helpers.mod.ts");
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/* harmony import */ var _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Shared/options.mod */ "./_Scripts/Shared/options.mod.ts");
/* harmony import */ var _Shared_settings_mod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Shared/settings.mod */ "./_Scripts/Shared/settings.mod.ts");
/* harmony import */ var _Shared_svg_utils_mod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Shared/svg-utils.mod */ "./_Scripts/Shared/svg-utils.mod.ts");
/* harmony import */ var _full_common_05_StyleCode_mod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../full-common/05_StyleCode.mod */ "./_Scripts/LegacyJS/full-common/05_StyleCode.mod.js");
/* harmony import */ var _full_common_12_Comments_mod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../full-common/12_Comments.mod */ "./_Scripts/LegacyJS/full-common/12_Comments.mod.js");








var SITE_SPECIFIC_OTHER_ID = 3;
var DATA_LOADED_TIMESTAMP = 'loaded-timestamp';
var _options;
var close_override; // if set, clicks on "it doesn't belong here" will be forwarded to it instead of flag_showCloseDialog; used in mobile
var _postId, _postMenuLink, // could be close or flag, depending on which was clicked
_closePopup, _flagPopup, _lastSubmittedOtherText;
function resetPrivateFields() {
    _postId = _postMenuLink = _closePopup = _flagPopup = _lastSubmittedOtherText = null;
}
function closeExistingDialogs() {
    if (_flagPopup) {
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.closePopups)(_flagPopup);
    }
    if (_closePopup) {
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.closePopups)(_closePopup);
    }
}
function handleCloseOrReopen(bypassReopenConfirmation) {
    var isClosed = _postMenuLink.data('is-closed');
    if (isClosed) {
        reopen_click(_postMenuLink.data('has-active-vote'), bypassReopenConfirmation);
    }
    else {
        close_loadPopup(true);
    }
}
function close($clicked, bypassReopenConfirmation) {
    // start a new close click all fresh and clean
    closeExistingDialogs();
    resetPrivateFields();
    // The close button can live outside of a post menu, so check if it has a post ID before checking the parent post menu.
    _postId = getPostId($clicked);
    _postMenuLink = $clicked;
    // if we need to inject the interstitial modal, do this now. note that it's not needed in the flag path, since we only show it to people who can VtC
    var showInterstitial = _postMenuLink.data("show-interstitial") === true;
    if (showInterstitial) {
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.loadModal)('/questions/close-reopen-explanation-modal')
            .done(function ($modal) {
            _postMenuLink.data('show-interstitial', false);
            $modal.on('popupClosing', function () {
                handleCloseOrReopen(bypassReopenConfirmation);
            });
        })
            .fail(function (error) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(error, { type: 'danger' });
        });
    }
    else {
        handleCloseOrReopen(bypassReopenConfirmation);
    }
}
function showFancyReopenConfirmation(callback) {
    // workaround so webpack will parse options import
    var optionsLocal = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"];
    (0,_PartialJS_full_common_99_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showConfirmModal)({
        title: __tr(["Nominate this question for reopening?"], undefined, "en", []),
        bodyHtml: __tr(["Vote to reopen questions that have been improved or shouldnât have been closed on $siteName$. $startLink$Learn more$endLink$ about reopening questions."], {siteName: optionsLocal.site.name,startLink: '<a href="/help/reopen-questions" target="_blank">',endLink: '</a>'}, "en", []),
        buttonLabel: __tr(["Vote to reopen"], undefined, "en", [])
    }).then(function (confirmed) {
        if (confirmed) {
            callback();
        }
    });
}
// will return the ajax deferred object, so more .done handlers can be added
function close_loadPopup(fadeInPopup) {
    var $popupContainer = getPopupContainer(_postMenuLink);
    var data = {
        loadedTimestamp: _postMenuLink.data(DATA_LOADED_TIMESTAMP)
    };
    if (_options && _options.reviewTaskIdGetter)
        data.reviewTaskId = _options.reviewTaskIdGetter();
    var result = _postMenuLink.loadPopup({
        url: '/flags/questions/{questionId}/close/popup'.formatUnicorn({ questionId: _postId }),
        data: data,
        dontShow: true,
        target: $popupContainer
    })
        .done(function ($popup) {
        _closePopup = $popup;
        _closePopup.appendTo($popupContainer);
        close_initPopup();
        if (_options && _options.closeShowPopup) {
            _options.closeShowPopup(_closePopup, _postMenuLink);
        }
        else if (fadeInPopup) {
            _closePopup.center().fadeIn('fast');
        }
    });
    return result;
}
function close_initPopup() {
    // remove the popups when clicking (x), `popupClose` is guaranteed to only be called once per popup.
    _closePopup.on('popupClose', function () { closeExistingDialogs(); });
    // a selected radio should enable submit and add a border around its parent <li>; could also show a sub-pane
    _closePopup.find('input[type=radio]').closest('li').bind('show-action', function () { close_onAnyRadioClick($(this)); });
    $('#close-question-form').submit(function (e) {
        e.preventDefault();
        close_submitClose();
        return false; // this will be an ajax submit
    });
    $('.js-retract-close-vote').click(function () {
        close_retractCloseVote($(this));
    });
    // links in descriptions should open in a new tab
    $('.action-list a').attr('target', '_blank');
    closeInitDuplicateSubPane();
    close_initSiteSpecificSubPane();
}
function closeInitDuplicateSubPane() {
    var subPane = $('.close-as-duplicate-pane'), txt = subPane.find('.js-duplicate-search-field');
    subPane
        .on('show', function () {
        txt.focus();
        $('#close-question-form .js-popup-submit').enable($('#original-question-id').val());
    })
        .addClass('handles-submit-button-enabling');
    txt.typeWatch({
        highlight: false,
        wait: 750,
        captureLength: -1,
        callback: function () {
            close_searchForOriginal(txt);
        }
    });
}
// todo: make site-specific links open in new tab
function close_initSiteSpecificSubPane() {
    var txt = _closePopup.find('[name=siteSpecificOtherText]'), parent = txt.closest('li'), otherRadio = parent.find('[name=siteSpecificCloseReasonId]'), initialValue = $.trim(txt.val()), ensureNotInitialValue = function () {
        return $.trim(txt.val()) !== initialValue;
    }, isValid = function (isValid) {
        var customValid = isValid && ensureNotInitialValue();
        if (txt.is(":focus")) {
            _closePopup.find('.js-popup-submit').enable(customValid);
        }
    };
    txt.charCounter({
        target: parent.find('.text-counter'),
        min: 30,
        max: 500,
        setIsValid: isValid
    });
    otherRadio.click(function () {
        setTimeout(function () {
            txt.focus();
            var val = txt.val();
            txt.val('').val(val);
        });
    });
    // this happens on mobile - ensure that the radio is selected when focusing the "other" textarea
    txt.focus(function () {
        if (!otherRadio.is(':checked')) {
            otherRadio.attr('checked', 'checked');
        }
    });
}
function close_onAnyRadioClick(li) {
    var radio = li.find('input:radio');
    // do we need to display a sub-pane that's associated with the selected radio value?
    var subPane = _closePopup.find('.popup-subpane').filter(function () {
        // be explicit... some day we'll have to localize subpane titles :(
        var name = radio.data('subpane-name');
        return name && name == $(this).data('subpane-name');
    });
    var submitButton = _closePopup.find('.js-popup-submit');
    if (subPane.length) {
        close_showPane(subPane, $('.popup-active-pane'), true);
        // some sub panes have their own enable/disable logic, which should be hooked up on a "show" event
        if (!subPane.hasClass('handles-submit-button-enabling')) {
            submitButton.disable();
        }
    }
    else {
        submitButton.enable();
    }
}
function close_showPane(paneToShow, paneToHide, addBreadcrumb) {
    // hide any active pane; supports jumping more than one level back from a breadcrumb
    _closePopup.find('.popup-active-pane').removeClass('popup-active-pane').hide();
    _closePopup.find('.popup-title').html(paneToShow.data('title'));
    if (addBreadcrumb) {
        var breadcrumbText = paneToHide.data('breadcrumb') || paneToHide.data('title');
        close_pushTitleBreadcrumb(breadcrumbText, function () {
            close_showPane(paneToHide, paneToShow, false);
        });
    }
    close_clearSelection(paneToShow);
    if (paneToHide.data('clear-input-selector')) {
        paneToHide.find(paneToHide.data('clear-input-selector')).val('');
        var submitButton = _closePopup.find('.js-popup-submit');
        submitButton.attr('disabled', 'disabled');
    }
    paneToShow
        .addClass('popup-active-pane')
        .show()
        .trigger('show')
        .asyncLoad({
        callback: closeAfterLoadListOriginals
    });
}
function close_clearSelection(pane) {
    pane.find('input[type=radio]:checked').removeAttr('checked');
    pane.find('li.action-selected').removeClass('action-selected');
    _closePopup.find('.js-popup-submit').disable();
}
function close_pushTitleBreadcrumb(text, fnRestoreHiddenPane) {
    var $crumbs = _closePopup.find('.js-breadcrumbs');
    var $cancelBtn = _closePopup.find('.js-popup-cancel');
    var $backBtn = _closePopup.find('.js-popup-back');
    var $newCrumb = $('<div class="s-breadcrumbs--item" />').appendTo($crumbs);
    function updateUI() {
        var hasCrumbs = $crumbs.find('.s-breadcrumbs--item').length > 0;
        $crumbs.add($backBtn).toggleClass('d-none', !hasCrumbs);
        $cancelBtn.toggleClass('d-none', hasCrumbs);
        $crumbs.find('.s-breadcrumbs--divider')
            .removeClass('d-none')
            .last().addClass('d-none');
    }
    $backBtn.off('click').click(function () {
        $crumbs.find('.s-breadcrumbs--link').last().click();
    });
    $('<span class="s-breadcrumbs--link c-pointer" tabindex="0" role="button">').text(text).click(function () {
        // remove this crumb and any after it
        $newCrumb.nextAll().addBack().remove();
        updateUI();
        fnRestoreHiddenPane();
    }).appendTo($newCrumb);
    (0,_Shared_svg_utils_mod__WEBPACK_IMPORTED_MODULE_4__.createSvgElement)(_stackoverflow_stacks_icons_icons__WEBPACK_IMPORTED_MODULE_7__.IconArrowRightAltSm).addClass('s-breadcrumbs--divider').appendTo($newCrumb);
    updateUI();
}
function close_pushFlaggingBreadcrumb() {
    close_pushTitleBreadcrumb(__tr(["Flagging"], undefined, "en", []), function () {
        var location = _closePopup.position();
        _flagPopup.css({ top: location.top, left: location.left });
        _closePopup.hide();
        _flagPopup.fadeIn('fast');
        // if we come back from flagging, start at the main close pane
        close_showPane(_closePopup.find('#pane-main'), _closePopup.find('.popup-active-pane'), false);
    });
}
function closeAfterLoadListOriginals(container) {
    var list = container.find('.list-originals');
    if (list.children().length == 0) {
        list.hide();
        return;
    }
    list.show();
    // fetching a list always overwrites the breadcrumb trail
    close_updateDuplicateNavigation(list, true);
    (0,_full_common_05_StyleCode_mod__WEBPACK_IMPORTED_MODULE_5__["default"])();
    // clicking on a item will load the post into the preview
    list.find('.item')
        .click(function () {
        var link = $(this).find(' .post-link > a').addSpinner({ 'padding-left': '3px' }), txt = $(link).closest('.close-as-duplicate-pane').find('.js-duplicate-search-field').val(link.attr('href'));
        close_searchForOriginal(txt, link);
        return false;
    })
        .hover(function () { $(this).toggleClass('hover'); });
}
function close_searchForOriginal(txt, link) {
    var pane = txt.closest('.popup-subpane'), preview = pane.find('.preview'), listContainer = pane.find('.list-container'), errors = pane.find('.search-errors').empty(), hidden = $('#original-question-id'), submit = pane.closest('#popup-close-question').find('.js-popup-submit');
    submit.disable(); // new searches should disable submit
    preview.html('').hide(); // and clear previous results
    if ($.trim(txt.val()).length == 0) {
        return;
    }
    // link will be passed in when we click a question title
    if (!link) {
        pane.find('.search-spinner').addSpinner();
    }
    var data = {
        q: txt.val()
    };
    if (_options && _options.reviewTaskIdGetter)
        data.reviewTaskId = _options.reviewTaskIdGetter();
    $.ajax({
        type: 'GET',
        url: '/posts/popup/close/search-originals/' + $('#popup-close-question').data('questionid'),
        data: data,
        dataType: 'html'
    }).done(function (html) {
        var div = $(html).elementNodesOnly().mathjax();
        // user entered a question url or id; we've been given a lightweight questions/show back
        if (div.hasClass('show-original')) {
            listContainer.hide();
            close_updateDuplicateNavigation(div);
            preview.empty().append(div).show();
            div.find('.question .show-title a').attr('target', '_blank');
            // prevent magic popups on tags
            div.find('.post-tag').addClass('user-tag');
            // store validated original id for use by submit later
            hidden.val(div.find('.question').data('questionid'));
            submit.enable();
        }
        else if (div.hasClass('list-originals')) {
            // search results in a list
            listContainer.empty().append(div).show();
            closeAfterLoadListOriginals(listContainer);
        }
        else {
            throw __tr(["these are not the results you were looking for"], undefined, "en", []);
        }
    }).fail(function (res) {
        var msg = res.responseText && res.responseText.length < 100 ? res.responseText : __tr(["An error occurred while searching; please try again"], undefined, "en", []);
        errors.text(msg);
        submit.disable();
        hidden.val('');
        pane.find('.navi-container .instructions').remove();
    }).always(function () {
        // spinners were added near the context that called this method, i.e. under search box or next to a clicked list link
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.removeSpinner)();
    });
}
function close_updateDuplicateNavigation(hasNaviDiv, empty) {
    var $pane = $('.close-as-duplicate-pane'); // This is not always in a close dialog.
    var container = $pane.find('.original-display .navi-container'), navi = hasNaviDiv.find('.navi'), txt = $pane.find('.js-duplicate-search-field');
    if (empty) {
        // we'll empty when getting a new list of questions
        container.empty();
    }
    else {
        // we have a list and are clicking a question to preview, so we need a way to get back to the list
        var listNav = container.find('.navi');
        if (listNav.length != 1) {
            return;
        }
        // anchor will have the text on it
        listNav.empty();
        // make a link back to the list
        $('<a>')
            .text(listNav.data('abbr'))
            .click(function () {
            listNav
                .html(listNav.data('text'))
                .siblings().remove();
            container.siblings('.preview').hide();
            container.siblings('.list-container').show();
            $('#original-question-id').val('');
            $('#popup-close-question').find('.js-popup-submit').disable();
            $('.close-as-duplicate-pane').find('.search-errors').empty();
            // we saved the previous search text; restore it
            txt.val(listNav.data('search-text')).focus();
        })
            .appendTo(listNav);
    }
    navi
        .data('search-text', txt.val())
        .text(navi.data('text'))
        .prependTo(container);
}
function close_submitClose() {
    var submitButton = _closePopup.find('.js-popup-submit');
    // check this - duplicate textbox makes enter submit regardless
    if (submitButton.attr('disabled'))
        return;
    $('.remaining-votes').addSpinner({ 'position': 'absolute', 'margin': '18px 0 0 3px' });
    submitButton.disable();
    var getSelectedRadio = function (pane, name) {
        return _closePopup.find(pane + ' input[type=radio][name="' + name + '"]:checked');
    };
    if (_options && _options.closeSubmitting && _options.closeSubmitting() === false) {
        closeExistingDialogs();
        return;
    }
    $.ajax({
        type: 'POST',
        url: '/flags/questions/{questionId}/close/add'.formatUnicorn({ questionId: _postId }),
        dataType: 'json',
        data: {
            fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey,
            closeReasonId: getSelectedRadio('#pane-main', 'closeReasonId').val(),
            duplicateOfQuestionId: $('#original-question-id').val(),
            siteSpecificCloseReasonId: getSelectedRadio('.site-specific-pane', 'siteSpecificCloseReasonId').val(),
            belongsOnBaseHostAddress: getSelectedRadio('.migration-pane', 'belongsOnBaseHostAddress').val(),
            siteSpecificOtherText: _closePopup.find('[name=siteSpecificOtherText]').val(),
            siteSpecificOtherCommentId: getSelectedRadio('.site-specific-pane', 'siteSpecificCloseReasonId').data('other-comment-id'),
            originalSiteSpecificOtherText: _closePopup.find('[name="originalSiteSpecificOtherText"]').val()
        }
    }).done(function (json) {
        close_submitComplete(json);
    }).fail(function () {
        showError(_postMenuLink, __tr(["An error occurred; please try again"], undefined, "en", []));
    }).always(function () {
        closeExistingDialogs();
    });
}
function reopen_click(hasActiveVote, bypassReopenConfirmation) {
    if (_postMenuLink.hasClass('is-loading')) {
        return;
    }
    if (hasActiveVote) {
        (0,_PartialJS_full_common_99_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showConfirmModal)({
            title: __tr(["Retract your reopen vote?"], undefined, "en", []),
            bodyHtml: __tr(["You have already voted to reopen this question. Do you want to retract your vote? If you retract, you wonât be able to vote to reopen this question again."], undefined, "en", []),
            buttonLabel: __tr(["Retract reopen vote"], undefined, "en", [])
        }).then(function (confirmed) {
            if (confirmed) {
                reopen_submit('retract');
            }
        });
    }
    else if (bypassReopenConfirmation) {
        reopen_submit('add');
    }
    else {
        showFancyReopenConfirmation(function () { reopen_submit('add'); });
    }
}
function reopen_submit(action) {
    _postMenuLink.addClass('is-loading');
    $.ajax({
        type: 'POST',
        url: '/flags/questions/{questionId}/reopen/{action}'.formatUnicorn({ questionId: _postId, action: action }),
        dataType: 'json',
        data: { fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey }
    }).done(function (json) {
        if (json.Success) {
            _postMenuLink.data('has-active-vote', action === 'add');
        }
        close_submitComplete(json);
    }).fail(function () {
        showError(_postMenuLink, __tr(["An error occurred; please try again"], undefined, "en", []));
    }).always(function () {
        _postMenuLink.removeClass('is-loading');
    });
}
function close_submitComplete(json) {
    // add some helper properties based on how the server interpreted our submission
    json.isClose = json.FlagType == 'QuestionClose';
    json.isRecommendClose = json.FlagType == 'QuestionRecommendClose';
    json.isReopen = json.FlagType == 'QuestionReopen';
    json.verb = json.isRecommendClose ? 'flag' : json.isReopen ? 'reopen' : 'close';
    var closeLink = _postMenuLink;
    // the user originally clicked "flag", then "it doesn't belong here"; the server recorded a regular close vote
    if (json.isClose && _postMenuLink.is('[class*="flag-post-"]')) {
        // should also find id="mobile-close-question-..."
        closeLink = _postMenuLink.parent().find("a[class*='close-question']");
    }
    if (json.Success) {
        close_submitSuccess(json, closeLink);
    }
    else {
        close_submitRejected(json, closeLink);
    }
}
function close_submitSuccess(json, closeLink) {
    // don't do anything; our callback already took over
    if (_options && _options.closeCallback && _options.closeCallback(closeLink, json, json.isRecommendClose)) {
        return;
    }
    // function to refresh without a redirect (i.e. prevent navigation to a migrated question)
    var fnRefreshPreventNavigation = function () {
        var href = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.splitOnLast)(window.location.href, '#')[0], // remove #, if present
        param = 'noredirect=1';
        if (href.indexOf(param) < 0) {
            href += (href.indexOf('?') < 0 ? '?' : '&') + 'noredirect=1';
        }
        window.location.href = href;
    };
    // a close or reopen vote actually changed the question state
    if (json.ResultChangedState) {
        fnRefreshPreventNavigation();
        return;
    }
    // when voting to close as 1) dupe or 2) site-specific -> other, a comment is added; fetch comments so the voter can see it
    if ((json.CloseReason == 'Duplicate' || json.SiteSpecificCloseReasonId == SITE_SPECIFIC_OTHER_ID)
        && closeLink.closest('.mod-post-header').length == 0) { // don't fetch when a mod just did it on the mod queue
        (0,_full_common_12_Comments_mod__WEBPACK_IMPORTED_MODULE_6__.loadAll)(closeLink);
    }
    if (json.Tooltip) {
        closeLink.attr('title', json.Tooltip);
    }
    if (json.Message) {
        close_updateCloseLinkCount(json, closeLink);
        return;
    }
    // all else fails, refresh
    fnRefreshPreventNavigation();
}
/**
 * THIS IS USED IN THE "FIRST POSTS" REVIEW QUEUE
 */
function close_updateCloseLinkCount(json, closeLink) {
    if (json.Message) {
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(json.Message, { useRawHtml: true, transient: json.Message.length < 150 });
    }
    // we need to update the existing count for close and reopen votes
    if (!json.isRecommendClose) {
        // .Count is returned from vote (or flag) to close actions, closeLink could be the "flag" link, make sure to grab the "close" link
        closeLink = closeLink.closest('.js-post-menu').find('.js-close-question-link');
        var countSpan = closeLink.find('.existing-flag-count');
        if (json.Count > 0) {
            // first votes will need to add the span (can't always put it there, since we use css to add the parenthesis)
            if (countSpan.length == 0) {
                closeLink.text(closeLink.text() + ' '); // add whitespace from razor helper or css
                countSpan = $('<span class="existing-flag-count">').appendTo(closeLink);
            }
            countSpan.text(json.Count);
        }
        else if (json.Count === 0 && countSpan) {
            countSpan.remove();
            closeLink.attr("title", __tr(["You retracted your close vote for this question"], undefined, "en", []));
        }
    }
}
function close_submitRejected(json, closeLink) {
    var errorMessage = json.Message;
    if (!errorMessage) {
        switch (json.verb) {
            case 'flag':
                errorMessage = __tr(["A problem occurred when trying to flag"], undefined, "en", []);
                break;
            case 'reopen':
                errorMessage = __tr(["A problem occurred when trying to reopen"], undefined, "en", []);
                break;
            case 'close':
                errorMessage = __tr(["A problem occurred when trying to close"], undefined, "en", []);
                break;
        }
    }
    // don't do anything; our callback already took over
    if (_options && _options.closeErrorCallback && _options.closeErrorCallback(errorMessage)) {
        return;
    }
    showError(closeLink, errorMessage, true);
    if (json.RefreshClient) {
        setTimeout(function () { location.reload(); }, 2500);
    }
}
function close_retractCloseVote(button) {
    if (button.is(':disabled') || !confirm(__tr(["Are you sure? If you retract, you wonât be able to vote to close this question again."], undefined, "en", []))) {
        return;
    }
    button.disable().addSpinnerBefore({ 'position': 'absolute', 'margin': '18px 0 0 -25px' });
    $.ajax({
        type: 'POST',
        url: '/flags/questions/{questionId}/close/retract'.formatUnicorn({ questionId: _postId }),
        dataType: 'json',
        data: { fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey }
    }).done(function (json) {
        close_updateCloseLinkCount(json, _postMenuLink);
    }).fail(function () {
        showError(_postMenuLink, __tr(["An error occurred; please try again"], undefined, "en", []));
    }).always(function () {
        closeExistingDialogs();
    });
}
function flag($clicked) {
    // start a new flag click all fresh and clean
    closeExistingDialogs();
    resetPrivateFields();
    _postId = getPostId($clicked);
    _postMenuLink = $clicked;
    var $popupContainer = getPopupContainer($clicked);
    var data = {
        loadedTimestamp: $clicked.data(DATA_LOADED_TIMESTAMP)
    };
    if (_options && _options.reviewTaskIdGetter)
        data.reviewTaskId = _options.reviewTaskIdGetter();
    $clicked.loadPopup({
        url: '/flags/posts/{postId}/popup'.formatUnicorn({ postId: _postId }),
        loaded: flag_loaded,
        data: data,
        hideDescriptions: false,
        target: $popupContainer,
        subformShow: flag_subformShow,
        dontShow: Boolean(_options && _options.flagShowPopup)
    });
}
;
function flag_loaded(popup) {
    _flagPopup = popup;
    flag_initAttentionSubform();
    // remove the popups when clicking (x), `popupClose` is guaranteed to only be called once per popup.
    _flagPopup.on('popupClose', function () { closeExistingDialogs(); });
    _flagPopup.find('.js-flag-load-close').unbind('click').click(function () {
        if (close_override) {
            close_override(_flagPopup, $(this));
        }
        else {
            flag_showCloseDialog($(this));
        }
    });
    var $form = _flagPopup.find('form');
    var retractFlagType = _Shared_settings_mod__WEBPACK_IMPORTED_MODULE_3__["default"].flags.allowRetractingFlags ? $form.attr("data-showretract") : null;
    $form.submit(function (e) {
        e.preventDefault();
        retractFlagType ? flag_retract(retractFlagType) : flag_submit();
        return false;
    });
    // if a user has already flagged for a specific reason, we'll disable choosing the same reason
    flag_disableActions();
    if (_options && _options.flagShowPopup) {
        _options.flagShowPopup(popup, _postMenuLink);
    }
}
;
function flag_disableActions() {
    _flagPopup.find('.action-list > .disabled-action').each(function () {
        var li = $(this);
        li.find('input[type=radio]').attr('disabled', 'disabled');
        li.find('.action-name').addClass('disabled-button');
    });
}
var flag_initAttentionSubform = function () {
    var submit = _flagPopup.find('.js-popup-submit'), txt = _flagPopup.find('textarea[name="otherText"]'), plagiarizedSrc = _flagPopup.find('input[name="plagiarizedSource"]'), plagiarizedTxt = _flagPopup.find('textarea[name="plagiarizedExplanation"]'), otherRadio = _flagPopup.find('input[value="PostOther"]'), plagiarismRadio = _flagPopup.find('input[value="PlagiarizedContent"]');
    const isValidPlagiarizedSrc = () => {
        return plagiarizedSrc.val().length >= 10;
    };
    const isValidPlagiarizedTxt = () => {
        const length = plagiarizedTxt.val().length;
        return length >= 10 && length <= 500;
    };
    plagiarizedSrc
        .on('keydown', () => {
        submit.enable(isValidPlagiarizedSrc() && isValidPlagiarizedTxt());
    });
    plagiarizedTxt
        .charCounter({
        min: 10,
        max: 500,
        setIsValid: (isValid) => {
            if (plagiarismRadio.is(':checked')) {
                submit.enable(isValid && isValidPlagiarizedSrc());
            }
        },
    });
    txt
        .focus(function () {
        if (!otherRadio.is(':checked')) {
            otherRadio.attr('checked', 'checked');
        }
    })
        .charCounter({ min: 10, max: 500, setIsValid: function (isValid) {
            if (otherRadio.is(':checked')) {
                submit.enable(isValid);
            }
        }
    });
    otherRadio.click(function () { txt.focus(); });
};
var flag_subformShow = function (subform) {
    if (!subform.is('.mod-attention-subform')) {
        return;
    }
    var otherText = subform.find('textarea[name="otherText"]');
    // if the textarea was previously selected, focus it again when showing the subform
    if (subform.find('input[value="PostOther"]:checked').length > 0) {
        otherText.focus();
    }
    else if (subform.find('input:radio:checked').length == 0) {
        subform.closest('.popup').find('.js-popup-submit').disable();
    }
};
var flag_showCloseDialog = function (radioLoadClose) {
    var location = _flagPopup.position();
    var deferred = _flagPopup.fadeOut('fast').promise();
    // only load close popup once
    if (!_closePopup) {
        radioLoadClose.siblings('.action-name').addSpinner({ 'margin': '0 5px' });
        deferred = close_loadPopup(/*fadeInPopup*/ false);
    }
    deferred.done(function () {
        // this needs to happen before dupe UI is clicked, else breadcrumb order is incorrect
        close_pushFlaggingBreadcrumb();
        // take the user directly to the dupe UI if requested
        if (radioLoadClose.is('.js-flag-load-close-duplicate')) {
            _closePopup.find('input[value=Duplicate]').click();
        }
        _closePopup.css({ top: location.top, left: location.left });
        _closePopup.fadeIn('fast');
    });
    // make the user click something again to submit
    _flagPopup.find('.js-popup-submit').disable();
    // if we go back to the flag popup, no radios should be selected or highlighted
    radioLoadClose.removeAttr('checked');
    _flagPopup.find('.action-list li').trigger('hide-action');
};
var flag_retract = function (flagType) {
    flag_sendflag('/flags/posts/{postId}/retract/{flagType}', flagType, '');
};
var flag_submit = function () {
    var otherTextArea = _flagPopup.find('textarea[name="otherText"]');
    var afterSubmit = function (json) {
        // return true if no further callbacks should be executed (if the flag was unsuccessful, give the user another chance!)
        if (!json.Success) {
            if (json.Outcome === 1) { // see: Flag.FlagActionResult.Outcomes: 1 == Warn, 2 == Error
                showWarning(otherTextArea, json.Message, true);
            }
            else {
                showError(_flagPopup.find('.popup-actions'), json.Message, true, true);
            }
            return true;
        }
        closeExistingDialogs();
        return false;
    };
    var flagType = _flagPopup.find('input[name="top-form"]:checked').val(), otherText = '', extraData = null;
    if (flagType == 'PostOther') {
        otherText = otherTextArea.val();
    }
    else if (flagType == 'PlagiarizedContent') {
        otherText = _flagPopup.find('textarea[name="plagiarizedExplanation"]').val();
        extraData = {
            plagiarizedSource: _flagPopup.find('input[name="plagiarizedSource"]').val(),
        };
    }
    var overrideWarning = _lastSubmittedOtherText === otherText;
    _lastSubmittedOtherText = otherText;
    if (_options && _options.flagSubmitting && _options.flagSubmitting() === false) {
        closeExistingDialogs();
        return;
    }
    flag_sendflag('/flags/posts/{postId}/add/{flagType}', flagType, otherText, overrideWarning, afterSubmit, extraData);
};
var flag_sendflag = function (urlStub, flagType, otherText, overrideWarning, afterSubmitCallback, extraData) {
    _flagPopup.find('.js-popup-submit').disable().addClass('is-loading');
    $.ajax({
        type: 'POST',
        url: urlStub.formatUnicorn({ postId: _postId, flagType: flagType }),
        dataType: 'json',
        data: { fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey, otherText: otherText, customData: JSON.stringify(extraData), overrideWarning: overrideWarning }
    })
        .always(function () {
        if (!afterSubmitCallback) {
            closeExistingDialogs();
        }
        _flagPopup.find('.js-popup-submit').enable().removeClass('is-loading');
    })
        .done(function (json) {
        if (afterSubmitCallback && afterSubmitCallback(json)) {
            return;
        }
        if (_options && _options.flagCallback && _options.flagCallback(_postMenuLink, json)) {
            // don't do anything; our callback already took over
            return;
        }
        if (json.ResultChangedState) {
            location.reload();
        }
        else if (json.Message) {
            showError(_postMenuLink, json.Message, json.Success, true);
        }
    })
        .fail(function (res) {
        var msg = res.responseText && res.responseText.length < 100 ? res.responseText : __tr(["An error occurred during flagging"], undefined, "en", []);
        showError(_flagPopup.find('.popup-actions'), msg, true);
    });
};
function showError($source, message, isInformational, useRawHtml = false) {
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(message, { type: isInformational ? 'info' : 'danger', $source: $source, useRawHtml: useRawHtml });
}
function showWarning($source, message, useRawHtml = false) {
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(message, { type: 'warning', $source: $source, useRawHtml: useRawHtml });
}
function getPostId($clicked) {
    return $clicked.attr('data-post-id') || $clicked.closest('.js-post-menu').attr('data-post-id');
}
function getPopupContainer($clicked) {
    // Button is in menu rendered below posts.
    var $postMenuPopupContainer = $clicked.closest('.js-post-menu').find('.js-menu-popup-container');
    if ($postMenuPopupContainer.length > 0) {
        return $postMenuPopupContainer;
    }
    // Button is in flag on admin dashboard.
    var $flagBarCloseContainer = $clicked.closest('.js-post-flag-bar').siblings('.js-post-flag-close-container');
    if ($flagBarCloseContainer.length > 0) {
        return $flagBarCloseContainer;
    }
    // Oof, we give up.  Put it in the button's parent element.
    return $clicked.parent();
}
function initVoteToCloseAndFlag(options) {
    if (!_options) {
        _options = options;
    }
    var closeSelector = '.js-close-question-link', onCloseClick = function (e, bypassReopenConfirmation) {
        e.preventDefault();
        close($(this), !!bypassReopenConfirmation);
    };
    $('body').off('click', closeSelector).on('click', closeSelector, onCloseClick);
    var flagSelector = '.js-flag-post-link', onFlagClick = function (e) {
        e.preventDefault();
        flag($(this));
    };
    $('body').off('click', flagSelector).on('click', flagSelector, onFlagClick);
    // HACK: add when each link was loaded into the page, so we can let the server know how stale the content is
    //       and the server can respond with updated statuses when closing/flagging
    var msSinceEpoch = Date.now();
    $(closeSelector).add(flagSelector).each(function () {
        var $e = $(this);
        if (!$e.data(DATA_LOADED_TIMESTAMP))
            $e.data(DATA_LOADED_TIMESTAMP, msSinceEpoch);
    });
}


/***/ }),

/***/ "./_Scripts/LegacyJS/saves.mod.ts":
/*!****************************************!*\
  !*** ./_Scripts/LegacyJS/saves.mod.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initSaves: () => (/* binding */ initSaves),
/* harmony export */   initUserSaves: () => (/* binding */ initUserSaves)
/* harmony export */ });
/* harmony import */ var _stub_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stub.mod */ "./_Scripts/LegacyJS/stub.mod.js");
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");
/* harmony import */ var _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Shared/options.mod */ "./_Scripts/Shared/options.mod.ts");
/* harmony import */ var _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./full-common/20_Analytics.mod */ "./_Scripts/LegacyJS/full-common/20_Analytics.mod.js");
/* harmony import */ var _stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stackoverflow/stacks */ "@stackoverflow/stacks");
/* harmony import */ var _stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__);





function toggleSelectState($btn, shouldSelect, toolTipText) {
    if (shouldSelect) {
        $btn.attr('aria-pressed', 'true');
        $btn.find('.js-saves-btn-selected').removeClass('d-none');
        $btn.find('.js-saves-btn-unselected').addClass('d-none');
    }
    else {
        $btn.attr('aria-pressed', 'false');
        $btn.find('.js-saves-btn-selected').addClass('d-none');
        $btn.find('.js-saves-btn-unselected').removeClass('d-none');
    }
    if (toolTipText) {
        (0,_stub_mod__WEBPACK_IMPORTED_MODULE_0__.setTooltipText)($btn, toolTipText);
    }
}
function initSavesButtons() {
    $(document).on('click', '.js-saves-btn', function () {
        const $savesBtn = $(this);
        const isSelected = $savesBtn.attr('aria-pressed');
        const postId = $savesBtn.data('post-id');
        submitSave(postId, isSelected === 'true', $(this), (NextTooltip) => toggleSelectState($savesBtn, isSelected === 'false' ? true : false, NextTooltip));
        sendPostClickEvent($savesBtn);
    });
}
function initManageSaveModal() {
    const url = '/posts/save/manage-save';
    $(document).on('change', '.js-save-manage-select', function (e) {
        const createOption = $(this).val();
        const $textbox = $('#save-manage-add-list-textbox');
        if (createOption === "create") {
            $textbox.removeClass('d-none');
            $textbox.find('input').focus();
        }
        else {
            if (!$textbox.hasClass('d-none')) {
                $textbox.addClass('d-none');
            }
        }
    });
    $(document).on('submit', '.js-save-manage-form', function (e) {
        e.preventDefault();
        const $inputBox = $(this).find('#save-manage-add-list-textbox');
        const $inputField = $inputBox.find('input');
        const $selectField = $(this).find('.js-save-manage-select option:selected');
        submitSaveModal($('#save-manage-modal'), url, $inputField, $selectField, true, (newListId) => {
            const $modal = $(this).closest('#save-manage-modal');
            if ($modal.length > 0 && $modal.data('isMoveto')) {
                const userId = $modal.data('userId');
                const postId = $modal.data('postId');
                const selectedListId = $selectField.data('listId');
                const selectedListName = $selectField.data('listName');
                // user has input a new list name
                if ($inputField.length > 0 && $inputField.val().length > 0 && !$inputBox.hasClass('d-none')) {
                    const listName = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.getTextFromHtmlString)($inputField.val());
                    if (newListId) {
                        addListName(newListId.toString(), listName, userId);
                        if ($('.js-saves-lists-posts').data('isAll') === 'True') {
                            updateSavedIn(newListId.toString(), listName, postId, userId);
                        }
                        else {
                            removePost($modal.data('postId'));
                        }
                    }
                    return;
                }
                // when user is on "For later" page, and try to move something to for later, return
                if ($('.js-saves-lists-posts').data('isForlater') === 'True' && $selectField.val() === 'for-later') {
                    return;
                }
                // user has changed select menu to a new value
                if (selectedListId !== $modal.data('listId')) {
                    // when user is on "All saves" page, do not remove post
                    if ($('.js-saves-lists-posts').data('isAll') === 'True') {
                        updateSavedIn(selectedListId, selectedListName, postId, userId);
                    }
                    else {
                        removePost($modal.data('postId'));
                    }
                }
            }
        });
    });
}
function initListActionModal() {
    $(document).on('click', '.js-open-list-modal', function () {
        let modalId = '';
        const action = $(this).data('modalAction');
        if (action == 'Create') {
            modalId = 'create-list-modal';
        }
        else if (action == 'Edit') {
            modalId = 'edit-list-modal';
        }
        Stacks.showModal(document.getElementById(modalId));
    });
    $(document).on('s-modal:shown', '.js-list-action-modal', function () {
        const $input = $(this).find('.js-list-name-input');
        const modalAction = $(this).data('modalAction');
        if ($input.length > 0) {
            $input.focus();
        }
        // render list name after modal opens, so the cursor focuses at the end of the list name
        if (modalAction == "Edit") {
            $input.val($(this).data('listName'));
        }
    });
    $(document).on('submit', '.js-save-edit-list-form', function (e) {
        e.preventDefault();
        const $modal = $(this).closest('.js-list-action-modal');
        const listId = $modal.data('listId');
        const modalType = $modal.data('modalAction');
        const userId = $modal.data('userId');
        const url = `/users/saves/${userId}/${modalType.toLowerCase()}-list`;
        const $inputField = $(this).find('.js-list-name-input');
        submitSaveModal($modal, url, $inputField, null, true, (newListId) => {
            if (modalType === 'Create') {
                addListName(newListId.toString(), (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.getTextFromHtmlString)($inputField.val()), userId);
            }
            else if (modalType === 'Edit') {
                updateListName(listId, (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.getTextFromHtmlString)($inputField.val()));
            }
        });
    });
    $(document).on('s-modal:hidden', '.js-list-action-modal', function () {
        const $modal = $(this).closest('.js-list-action-modal');
        const modalAction = $modal.data('modalAction');
        const $input = $(this).find('.js-list-name-input');
        // clean up user input for next time the modal opens
        if (modalAction == 'Create') {
            $input.val('');
        }
        else if (modalAction == 'Edit') {
            $input.val($(this).data('listName'));
        }
    });
    // for displaying toast message after successfully delete a list and get redirected to "all saves"
    $(window).on('load', function () {
        const userId = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.userId;
        // if not saves page, do not do anything
        if ($('.js-saves-page').length === 0) {
            return;
        }
        const requestUrl = `/users/saves/${userId}/undelete-list`;
        const queryString = new URLSearchParams(window.location.search);
        if (queryString.has('deletedList') && queryString.has('listName')) {
            const listId = queryString.get('deletedList');
            const listName = queryString.get('listName');
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.removeParameterFromQueryString)('deletedList');
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.removeParameterFromQueryString)('listName');
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(__tr(["$listName$ has been deleted from your lists."], {listName}, "en", []), {
                useRawHtml: true,
                actions: [{
                        labelContents: $('<span>').text(__tr(["Undo"], undefined, "en", [])).html(),
                        click: function () {
                            submitUndeleteList(requestUrl, listId);
                        }
                    }],
                type: "success"
            });
        }
    });
    $(document).on('click', '.js-saves-delete-list', function () {
        submitDeleteList($(this));
    });
}
function sendPostClickEvent($savesBtn) {
    const isSelected = $savesBtn.attr('aria-pressed');
    const alreadySaved = isSelected === 'true';
    const postTypeId = $savesBtn.data('post-type-id');
    const privilege = $savesBtn.data('user-privilege-for-post-click');
    _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_3__.track('post.click', {
        item: (alreadySaved ? /*PostClickType.Unsave*/ 19 : /*PostClickType.Save*/ 18),
        priv: privilege,
        post_type: postTypeId
    });
}
function sendFavoritesPopupShowEvent() {
    _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_3__.track('favorite_popup.show', {});
}
function submitDeleteList($deleteBtn) {
    const $modal = $deleteBtn.closest('#edit-list-modal');
    const listId = $modal.data('listId');
    const userId = $modal.data('userId');
    const listName = $modal.data('listName');
    const baseUrl = `/users/saves/${userId}`;
    const deleteUrl = `${baseUrl}/${listId}/delete-list`;
    const redirectUrl = `${baseUrl}/all`;
    $.ajax({
        type: 'DELETE',
        url: deleteUrl,
        data: { fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey },
        dataType: 'json',
        success: function () {
            window.location.href = `${redirectUrl}?deletedList=${listId}&listName=${listName}`;
            Stacks.hideModal($modal.get(0));
        },
        error: function (e) {
            showErrorMessage(e);
        }
    });
}
function submitUndeleteList(url, listId) {
    $.ajax({
        type: 'POST',
        url: url,
        dataType: 'json',
        data: {
            fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey,
            listId
        },
        success: function () {
            window.location.href = `/users/saves/${_Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.userId}/${listId}`;
        },
        error: function (e) {
            showErrorMessage(e);
            window.location.href = `/users/saves/${_Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.userId}/all`;
        }
    });
}
function initActionMenu() {
    $('.js-unsave').click(function () {
        const postId = $(this).data('post-id');
        submitSave(postId, true, $(this), () => removePost(postId));
    });
    $('.js-save-moveto').click(function () {
        const postId = $(this).data('post-id');
        const listId = $(this).data('list-id');
        loadManageSaveModal(postId, listId, true);
    });
    initNoteActionButtons();
}
function loadManageSaveModal(postId, listId, isMoveTo = false) {
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.loadModal)(`/posts/${postId}/open-save-modal?${isMoveTo ? 'isMoveTo=true' : ''}${listId ? '&listId=' + listId : ''}`)
        .fail(() => {
        var messageHtml = $('<span>').text(__tr(["An error occurred"], undefined, "en", [])).html();
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(messageHtml, { type: 'danger' });
    });
}
function updateListName(listId, listName) {
    let sidebarItem;
    let sidebarItemMobile;
    const listHeader = $('.js-saves-list-header');
    const sidebarItems = $('.js-saves-sidebar-item');
    const sidebarItemsMobile = $('.js-saves-sidebar-item-mobile');
    const $editModal = $('#edit-list-modal');
    sidebarItems.each(function () {
        if ($(this).data('listId') == listId) {
            sidebarItem = $(this);
            return;
        }
    });
    sidebarItemsMobile.each(function () {
        if ($(this).data('listId') == listId) {
            sidebarItemMobile = $(this);
            return;
        }
    });
    listHeader.html(listName);
    sidebarItem.find('a').html(listName);
    sidebarItemMobile.text(listName);
    if ($editModal.length > 0) {
        $editModal.attr('data-list-name', listName);
        $editModal.data('list-name', listName);
    }
}
function addListName(listId, listName, userId) {
    const link = `/users/saves/${userId}/${listId}`;
    // add to desktop sidebar
    const $sidebar = $('.js-saves-sidebar-nav');
    const $item = $(`<li class="js-saves-sidebar-item" data-list-id="${listId}"><a class="s-navigation--item" href="${link}">${listName}</a></li>`);
    $sidebar.append($item);
    // add to mobile select menu
    const $mobileSelect = $('.js-saves-sidebar-nav-mobile optgroup');
    const $mobileItem = $(`<option class="js-saves-sidebar-item-mobile" value="${link}" data-list-id="${listId}">${listName}</option>`);
    $mobileSelect.append($mobileItem);
}
function updateSavedIn(listId, listName, postId, userId) {
    const postSummary = $(`.js-saves-post-summary-${postId}`);
    const savedIn = postSummary.find('.js-saved-in');
    savedIn.html(listName);
    savedIn.attr('href', `/users/saves/${userId}/${listId}`);
}
function removePost(postId) {
    const postSummary = $(`.js-saves-post-summary-${postId}`);
    if (postSummary.length > 0) {
        postSummary.remove();
        // adjust saves count for current list
        const savesCount = $('.js-saves-count');
        var currentCount = parseInt(savesCount.data('saves-count'));
        var newCount = currentCount -= 1;
        savesCount.html(__tr(["$savesCount$ saved item","$savesCount$ saved items"], {savesCount: newCount}, "en", ["savesCount"]));
        savesCount.attr('data-saves-count', newCount);
        savesCount.data('saves-count', newCount);
        if (newCount == 0) {
            $('.js-saves-post-list').addClass('d-none');
            $('.js-saves-empty-state').removeClass('d-none');
        }
    }
}
function submitSave(postId, isUndo, submitBtn, onSuccess) {
    const url = `/posts/${postId}/save${isUndo ? '?isUndo=true' : ''}`;
    if (submitBtn) {
        submitBtn.attr('disabled', 'true');
    }
    $.ajax({
        type: 'POST',
        url: url,
        data: { fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey },
        dataType: 'json',
        success: function (data) {
            if (submitBtn) {
                submitBtn.removeAttr('disabled');
            }
            const { NextTooltip = "", ToastMessage = "", IsUndo = false } = data;
            if (onSuccess)
                onSuccess(NextTooltip);
            var toastManageAction = IsUndo ? [] : [{
                    labelContents: $('<span>').text(__tr(["Manage"], undefined, "en", [])).html(),
                    click: function () {
                        loadManageSaveModal(postId);
                    }
                }];
            if (ToastMessage) {
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(ToastMessage, {
                    useRawHtml: true,
                    actions: toastManageAction,
                    type: "success"
                });
            }
        },
        error: function () {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(__tr(["An error occurred"], undefined, "en", []), { type: "danger" });
            if (submitBtn) {
                submitBtn.removeAttr('disabled');
            }
        }
    });
}
function submitSaveModal($modal, url, $listInputField, $selectField, shouldShowToast = true, onSuccess) {
    let postId;
    let listName;
    let listId;
    let privateNote;
    let isCreating;
    const $submitElement = $modal.find('.js-save-manage-submit');
    const $privateNoteField = $modal.find('.js-save-add-note');
    const isCreatingListSelected = $modal.find('.js-save-manage-select').val() === 'create';
    const isListNameFieldFilled = $listInputField.val() && $listInputField.val().length > 0;
    // when "for later" is selected and private note field is empty, no action is required
    if ($selectField && $selectField.val() === "for-later" && $privateNoteField.length > 0 && !$privateNoteField.val()) {
        Stacks.hideModal($modal.get(0));
        return;
    }
    if ($privateNoteField.length > 0) {
        privateNote = $privateNoteField.val();
    }
    if ($selectField) {
        listId = $selectField.data('listId');
    }
    else if ($modal.data('list-id')) {
        listId = $modal.data('list-id');
    }
    const wrapper = $submitElement.closest('.js-save-modal');
    if (wrapper.length > 0 && wrapper.data('postId') !== null) {
        postId = wrapper.data('postId');
    }
    if ($selectField && $selectField.data('listName')) {
        listName = $selectField.data('listName');
    }
    else if (isCreatingListSelected || isListNameFieldFilled) {
        listName = (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.getTextFromHtmlString)($listInputField.val());
        if ($modal.data('modalAction') == null) {
            isCreating = true;
        }
    }
    const data = {
        fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey,
        listName: listName,
        postId: postId,
        listId: listId,
        isCreating: isCreating,
        privateNote: privateNote
    };
    $.ajax({
        type: 'POST',
        url: url,
        data: data,
        dataType: 'json',
        success: function (data) {
            if (shouldShowToast) {
                const { ToastMessage = "" } = data;
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(ToastMessage, { useRawHtml: true, type: "success" });
            }
            const { ListId = 0 } = data;
            Stacks.hideModal($modal.get(0));
            onSuccess(ListId);
        },
        error: function (e) {
            showErrorMessage(e);
        }
    });
}
function showErrorMessage(error) {
    let message;
    const { responseJSON } = error;
    if (typeof (responseJSON) == 'string') {
        message = responseJSON;
    }
    else if (typeof (responseJSON) == 'object') {
        const { ErrorMessage = "" } = responseJSON;
        message = ErrorMessage;
    }
    message = message && message.length > 0 ? message : __tr(["An error occurred."], undefined, "en", []);
    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(message, { type: 'danger' });
}
function initLoginModal() {
    $('.js-saves-btn').click(function () {
        const postId = $(this).data('post-id');
        const $clicked = $(this);
        $.ajax({
            type: 'GET',
            url: `/posts/${postId}/save-anon-modal`,
            dataType: 'html',
            success: function (html) {
                StackExchange.openid.showLoginModal(html, { returnElements: $clicked });
            },
            error: function (e) {
                showErrorMessage(e);
            }
        });
        sendFavoritesPopupShowEvent();
    });
}
var NoteState;
(function (NoteState) {
    NoteState[NoteState["ViewNoNote"] = 0] = "ViewNoNote";
    NoteState[NoteState["ViewNote"] = 1] = "ViewNote";
    NoteState[NoteState["AddingNote"] = 2] = "AddingNote";
    NoteState[NoteState["EditingNote"] = 3] = "EditingNote";
})(NoteState || (NoteState = {}));
function initNoteActionButtons() {
    const userId = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.userId;
    $('.js-saves-post-summary').each((_, element) => {
        var _a;
        // Get all the elements we need to hook up
        const $postSummary = $(element);
        const contextMenuElement = $postSummary.find('[data-controller="s-popover"][aria-controls|=post-menu-saves]').get(0);
        const $addActionButton = $postSummary.find('.js-add-private-note');
        const $editActionButton = $postSummary.find('.js-edit-private-note');
        const $deleteActionButton = $postSummary.find('.js-delete-private-note');
        const $maybeAnswer = $postSummary.find('.s-post-summary--answer');
        const savedPostId = (_a = $maybeAnswer.data('post-id')) !== null && _a !== void 0 ? _a : $postSummary.data('post-id');
        const $noteToEdit = $postSummary.find('.js-saved-post-note');
        const $noteToEditContainer = $noteToEdit.parent();
        const $inlineEditorForm = $postSummary.find('.js-saved-inline-note-editor');
        const $inlineEditorInput = $inlineEditorForm.find('.js-saved-editor-note');
        const $inlineEditorSaveButton = $inlineEditorForm.find('.js-saved-inline-note-editor-save');
        const $inlineEditorCancelButton = $inlineEditorForm.find('.js-saved-inline-note-editor-cancel');
        /*
         * We're going to make a state machine that tracks:
         * - Are we viewing, adding, or editing a note?
         * - Is note we're viewing is empty?
         *
         * (you can post the following Mermaid markup in a GitHub
         * comment to see the state machine visualized)
         *
         *
```mermaid
flowchart TB
    Start(((Start))) --> Exists{Note exists in database?}
    Exists --->|Note does not exist in database| ViewNoNote
    Exists --->|Note exists in database| ViewNote

    subgraph Viewing save without private note
        ViewNoNote((ViewNoNote))
    end

    subgraph Viewing save with private note
        direction TB
        ViewNote((ViewNote))
        DeleteAjaxViewing -. Request error .-> ViewNote
    end
    
    ViewNoNote -->|Add private note...| AddNote
    ViewNote -->|Edit private note...| EditNote
    AddNote -->|Cancel editing| ViewNoNote

    subgraph Adding new private note
        direction TB
        AddNote((AddNote))
        AddNote -->|Save| AddAjax[["POST /users/saves/{id}/add-note/"]]
        AddAjax -. Request error .-> AddNote
    end

    subgraph Editing existing private note
        direction BT
        EditNote((EditNote))
        EditNote -->|Save| EditAjax[["POST /users/saves/{id}/add-note/"]]
        EditAjax -. Request error .-> EditNote
        DeleteAjaxEditing -. Request error .-> EditNote
    end

    EditNote -->|Cancel editing| ViewNote
    AddAjax -. Success, updated save in database .-> ViewNote
    EditAjax -. Success, updated save in database .-> ViewNote

    DeleteAjaxViewing -. Success, deleted from database .-> ViewNoNote
    ViewNote -->|Delete private note...| DeleteAjaxViewing[["POST /users/saves/{id}/delete-note/"]]

    DeleteAjaxEditing -. Success, deleted from database .-> ViewNoNote
    EditNote -->|Delete private note...| DeleteAjaxEditing[["POST /users/saves/{id}/delete-note/"]]
```

         *
         * If you're touching any of this code,
         * please also update the state machine documentation above
         */
        // Initialize state depending on if we have a note already
        let getStateFromCurrentNote = function () {
            return $noteToEdit.text().length > 0 ? NoteState.ViewNote : NoteState.ViewNoNote;
        };
        let state = getStateFromCurrentNote();
        //console.debug(savedPostId, NoteState[state]);
        // Hook up action button events (in the context menu)
        $addActionButton.click(() => {
            (0,_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__.hidePopover)(contextMenuElement);
            startAddingNote();
            //console.debug(savedPostId, NoteState[state]);
        });
        $editActionButton.click(() => {
            (0,_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__.hidePopover)(contextMenuElement);
            startEditingNote();
            $inlineEditorInput.val($noteToEdit.text());
            //console.debug(savedPostId, NoteState[state]);
        });
        $deleteActionButton.click(() => {
            (0,_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__.hidePopover)(contextMenuElement);
            deleteNote($noteToEdit.text());
        });
        // Hook up form actions (inline note editor)
        $inlineEditorForm.submit((event) => {
            event.preventDefault();
            saveNote($inlineEditorInput.val());
        });
        $inlineEditorForm.on('reset', () => {
            saveXHR === null || saveXHR === void 0 ? void 0 : saveXHR.abort();
            closeEditor();
            state = getStateFromCurrentNote();
            state == NoteState.ViewNote ? showNote() : hideNote();
            //console.debug(savedPostId, NoteState[state]);
        });
        let startAddingNote = function () {
            if (state === NoteState.ViewNoNote) {
                openEditor();
                state = NoteState.AddingNote;
                //console.debug(savedPostId, NoteState[state]);
            }
            else {
                throw __tr(["Can't add a new note when a note already exists"], undefined, "en", []);
            }
        };
        let startEditingNote = function () {
            if (state === NoteState.ViewNote) {
                openEditor();
                state = NoteState.EditingNote;
                //console.debug(savedPostId, NoteState[state]);
            }
            else {
                throw __tr(["Canât edit note because this save doesnât have one."], undefined, "en", []);
            }
        };
        let saveXHR = null;
        let saveNote = function (text) {
            if (state === NoteState.AddingNote || state === NoteState.EditingNote) {
                // send the network request to save the note
                saveXHR = $.ajax('/users/saves/' + userId + '/add-note', {
                    method: 'POST',
                    data: {
                        postId: savedPostId,
                        privateNote: text,
                        fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey
                    },
                    beforeSend: () => {
                        deleteXHR === null || deleteXHR === void 0 ? void 0 : deleteXHR.abort();
                        setSaveNoteButtonSpin(ButtonState.Loading);
                        disableForm();
                    },
                    success: (data, textStatus, _) => {
                        // set the note text and make the menu/state reflect that text
                        updateNoteText(text);
                        state = getStateFromCurrentNote();
                        updateMenuVisibility();
                        setSaveNoteButtonSpin(ButtonState.Ready);
                        // reset the editor
                        closeEditor();
                        resetEditor();
                        saveXHR = null;
                        //console.debug(savedPostId, NoteState[state]);
                    },
                    error: (data, textStatus, _) => {
                        showErrorMessage(data);
                        console.error(textStatus);
                        setSaveNoteButtonSpin(ButtonState.Ready);
                        enableForm();
                        saveXHR = null;
                        //console.debug(savedPostId, NoteState[state]);
                    }
                });
            }
            else {
                console.error(__tr(["Canât save note when not adding or editing."], undefined, "en", []));
            }
        };
        let deleteXHR = null;
        let deleteNote = function (noteToDelete) {
            if (state === NoteState.ViewNote || state === NoteState.EditingNote) {
                // send the network request to delete the note
                deleteXHR = $.ajax('/users/saves/' + userId + '/delete-note', {
                    method: 'POST',
                    data: {
                        postId: savedPostId,
                        fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey
                    },
                    beforeSend: () => {
                        saveXHR === null || saveXHR === void 0 ? void 0 : saveXHR.abort();
                        setDeleteActionButtonSpin(ButtonState.Loading);
                    },
                    success: (data, textStatus, _) => {
                        // set the note text and make the menu/state reflect that text
                        updateNoteText(null);
                        state = NoteState.ViewNoNote;
                        updateMenuVisibility();
                        setDeleteActionButtonSpin(ButtonState.Ready);
                        // reset the editor if it happened to be open
                        closeEditor();
                        resetEditor();
                        // show a success toast
                        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(__tr(["Note removed from save."], undefined, "en", []), {
                            transient: true,
                            useRawHtml: true,
                            actions: [{
                                    labelContents: $('<span>').text(__tr(["Undo"], undefined, "en", [])).html(),
                                    click: function () {
                                        state = NoteState.AddingNote;
                                        saveNote(noteToDelete);
                                        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.hideToasts)();
                                    }
                                }],
                        });
                        deleteXHR = null;
                        //console.debug(savedPostId, NoteState[state]);
                    },
                    error: (data, textStatus, _) => {
                        showError(__tr(["There was a problem saving your note. Try again later."], undefined, "en", []));
                        console.error(textStatus);
                        setDeleteActionButtonSpin(ButtonState.Ready);
                        deleteXHR = null;
                        //console.debug(savedPostId, NoteState[state]);
                    }
                });
            }
            else {
                console.error(__tr(["Canât save note when not adding or editing."], undefined, "en", []));
            }
        };
        let resetEditor = function () {
            $inlineEditorForm.trigger('reset');
            setSaveNoteButtonSpin(ButtonState.Ready);
            enableForm();
        };
        let ButtonState;
        (function (ButtonState) {
            ButtonState[ButtonState["Ready"] = 0] = "Ready";
            ButtonState[ButtonState["Loading"] = 1] = "Loading";
            ButtonState[ButtonState["Error"] = 2] = "Error";
        })(ButtonState || (ButtonState = {}));
        let setSaveNoteButtonSpin = function (state) {
            switch (state) {
                case ButtonState.Ready: {
                    $inlineEditorSaveButton.removeClass("is-loading");
                    break;
                }
                case ButtonState.Loading: {
                    $inlineEditorSaveButton.addClass("is-loading");
                }
            }
        };
        let setDeleteActionButtonSpin = function (state) {
            switch (state) {
                case ButtonState.Ready: {
                    $deleteActionButton.removeClass("is-loading");
                    break;
                }
                case ButtonState.Loading: {
                    $deleteActionButton.addClass("is-loading");
                }
            }
        };
        let openEditor = function () {
            enableForm();
            $inlineEditorInput.focus();
            $inlineEditorForm.removeClass('d-none');
            hideNote();
        };
        let enableForm = function () {
            $inlineEditorForm.prop("disabled", false);
            $inlineEditorInput.prop("disabled", false);
            $inlineEditorSaveButton.prop("disabled", false);
            $inlineEditorCancelButton.prop("disabled", false);
        };
        let closeEditor = function () {
            $inlineEditorForm.addClass('d-none');
            disableForm();
        };
        let disableForm = function () {
            $inlineEditorForm.prop("disabled", true);
            $inlineEditorInput.prop("disabled", true);
            $inlineEditorSaveButton.prop("disabled", true);
            $inlineEditorCancelButton.prop("disabled", true);
        };
        let showNote = function () {
            $noteToEditContainer.removeClass('d-none');
        };
        let hideNote = function () {
            $noteToEditContainer.addClass('d-none');
        };
        let showError = function (text) {
            (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_1__.showToast)(text, { type: "danger" });
        };
        let updateMenuVisibility = function () {
            if (state === NoteState.ViewNote || state === NoteState.EditingNote) {
                setAddActionButton(false);
                setEditActionButton(true);
                setDeleteActionButton(true);
            }
            else if (state === NoteState.ViewNoNote || state === NoteState.AddingNote) {
                setAddActionButton(true);
                setEditActionButton(false);
                setDeleteActionButton(false);
            }
        };
        let setAddActionButton = function (visible) {
            if (visible) {
                $addActionButton.removeClass('d-none');
                $addActionButton.prop("disabled", false);
            }
            else {
                $addActionButton.addClass('d-none');
                $addActionButton.prop("disabled", true);
            }
        };
        let setEditActionButton = function (visible) {
            if (visible) {
                $editActionButton.removeClass('d-none');
                $editActionButton.prop("disabled", false);
            }
            else {
                $editActionButton.addClass('d-none');
                $editActionButton.prop("disabled", true);
            }
        };
        let setDeleteActionButton = function (visible) {
            if (visible) {
                $deleteActionButton.removeClass('d-none');
                $deleteActionButton.prop("disabled", false);
            }
            else {
                $deleteActionButton.addClass('d-none');
                $deleteActionButton.prop("disabled", true);
            }
        };
        let updateNoteText = function (text) {
            if (text == null || text.length == 0) {
                $noteToEdit.empty();
                $inlineEditorInput.empty();
                hideNote();
            }
            else {
                $noteToEdit.text(text);
                $inlineEditorInput.val(text);
                showNote();
            }
            state = getStateFromCurrentNote();
        };
    });
}
function dismissSavesLaunchPopover() {
    $('#saves-launch-popover').remove();
    $('#saves-btn').data('controller', 's-tooltip');
    $('#saves-btn').attr('aria-controls', '');
    $.cookie('notice-slp', '1', { path: '/', expires: 30 });
    if (!_Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.isAnonymous) {
        $.post("/saves-launch-popover/dismiss", {
            fkey: _Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.fkey
        });
    }
}
function initSavesLaunchPopover() {
    const questionId = $('.question').data('questionid');
    $('.js-saves-popover-dismiss, .js-saves-popover-link').on('click', function () {
        (0,_stackoverflow_stacks__WEBPACK_IMPORTED_MODULE_4__.hidePopover)(document.getElementById(`saves-btn-${questionId}`));
    });
    $(`#saves-btn-${questionId}`).on('s-popover:hidden', function () {
        dismissSavesLaunchPopover();
    });
}
function initSavedPostClickAnalytics() {
    var savesLinks = $('.js-saves-post-list .s-post-summary--content-title a, .js-saves-post-list .js-post-summary-answer-link');
    savesLinks.click(() => _full_common_20_Analytics_mod__WEBPACK_IMPORTED_MODULE_3__.track('profile_saved_post.click'));
}
// Used on
// /users/saves/{id}/all
// /users/saves/{id}/{list_id}
function initUserSaves() {
    initSavedPostClickAnalytics();
    initListActionModal();
    initManageSaveModal();
    initActionMenu();
}
function initSaves() {
    // we only need to initialize the popover if the element exists on page
    if ($('#saves-launch-popover').length >= 1) {
        initSavesLaunchPopover();
    }
    if (_Shared_options_mod__WEBPACK_IMPORTED_MODULE_2__["default"].user.isRegistered) {
        initSavesButtons();
        initManageSaveModal();
    }
    else {
        initLoginModal();
    }
}


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_OutdatedAnswers.mod.ts":
/*!******************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_OutdatedAnswers.mod.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initAnon: () => (/* binding */ initAnon),
/* harmony export */   openModal: () => (/* binding */ openModal),
/* harmony export */   userVoted: () => (/* binding */ userVoted)
/* harmony export */ });
/* harmony import */ var _99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./99_OutdatedAnswers */ "./_Scripts/PartialJS/full-common/99_OutdatedAnswers.ts");
/* harmony import */ var _99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_99_OutdatedAnswers__WEBPACK_IMPORTED_MODULE_0__);

const initAnon = StackExchange.OutdatedAnswers.initAnon;
const openModal = StackExchange.OutdatedAnswers.openModal;
const userVoted = StackExchange.OutdatedAnswers.userVoted;


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_PostTypeId.mod.ts":
/*!*************************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_PostTypeId.mod.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PostTypeId: () => (/* binding */ PostTypeId)
/* harmony export */ });
var PostTypeId;
(function (PostTypeId) {
    PostTypeId[PostTypeId["Question"] = 1] = "Question";
    PostTypeId[PostTypeId["Answer"] = 2] = "Answer";
    PostTypeId[PostTypeId["Wiki"] = 3] = "Wiki";
    PostTypeId[PostTypeId["TagWikiExcerpt"] = 4] = "TagWikiExcerpt";
    PostTypeId[PostTypeId["TagWiki"] = 5] = "TagWiki";
    PostTypeId[PostTypeId["ModeratorNomination"] = 6] = "ModeratorNomination";
    PostTypeId[PostTypeId["WikiPlaceholder"] = 7] = "WikiPlaceholder";
    PostTypeId[PostTypeId["PrivilegeWiki"] = 8] = "PrivilegeWiki";
    PostTypeId[PostTypeId["Article"] = 9] = "Article";
    PostTypeId[PostTypeId["HelpArticle"] = 10] = "HelpArticle";
    PostTypeId[PostTypeId["Collection"] = 12] = "Collection";
    PostTypeId[PostTypeId["ModeratorQuestionnaireResponse"] = 13] = "ModeratorQuestionnaireResponse";
    PostTypeId[PostTypeId["Announcement"] = 14] = "Announcement";
    PostTypeId[PostTypeId["CollectiveDiscussion"] = 15] = "CollectiveDiscussion";
    PostTypeId[PostTypeId["CollectiveCollection"] = 17] = "CollectiveCollection";
})(PostTypeId || (PostTypeId = {}));


/***/ }),

/***/ "./_Scripts/PartialJS/full-common/99_helpers.mod.ts":
/*!**********************************************************!*\
  !*** ./_Scripts/PartialJS/full-common/99_helpers.mod.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   showConfirmModal: () => (/* binding */ showConfirmModal)
/* harmony export */ });
/* harmony import */ var _99_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./99_helpers */ "./_Scripts/PartialJS/full-common/99_helpers.ts");
/* harmony import */ var _99_helpers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_99_helpers__WEBPACK_IMPORTED_MODULE_0__);

const showConfirmModal = StackExchange.helpers.showConfirmModal;


/***/ }),

/***/ "./_Scripts/PartialJS/full/99_UserFlags.mod.ts":
/*!*****************************************************!*\
  !*** ./_Scripts/PartialJS/full/99_UserFlags.mod.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toggleAccountPreferenceFlags: () => (/* binding */ toggleAccountPreferenceFlags),
/* harmony export */   toggleUserFlags: () => (/* binding */ toggleUserFlags)
/* harmony export */ });
/* harmony import */ var _Shared_options_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Shared/options.mod */ "./_Scripts/Shared/options.mod.ts");

function toggleUserFlags(flags, value, userId) {
    const user = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_0__["default"].user;
    return $.post(`/users/toggle-flag/${flags}/${!!value}`, {
        fkey: user.fkey,
        userId: userId || user.proxiedUserId || user.userId
    }).then(response => !!response.hasFlags);
}
function toggleAccountPreferenceFlags(flags, value, accountId) {
    const user = _Shared_options_mod__WEBPACK_IMPORTED_MODULE_0__["default"].user;
    return $.post(`/account/toggle-preference-flag`, {
        fkey: user.fkey,
        accountId: accountId || user.accountId,
        flag: flags,
        status: value
    }).then(response => !!response.hasFlags);
}
;


/***/ }),

/***/ "./_Scripts/PartialJS/full/definitions/Enums.generated.mod.ts":
/*!********************************************************************!*\
  !*** ./_Scripts/PartialJS/full/definitions/Enums.generated.mod.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccountPreferenceFlags: () => (/* binding */ AccountPreferenceFlags),
/* harmony export */   NotificationFrequencyTypeId: () => (/* binding */ NotificationFrequencyTypeId),
/* harmony export */   UserFlags: () => (/* binding */ UserFlags)
/* harmony export */ });
// ============================================ //
// THIS FILE IS AUTOMATICALLY GENERATED         //
//                                              //
// Changes will be discarded on next compile    //
//                                              //
// To modify this file, make changes to:        //
// _Scripts\PartialJS\full\definitions\Enums.cs //
// ============================================ //
// StackOverflow.Models.NotificationFrequencyTypeId
var NotificationFrequencyTypeId;
(function (NotificationFrequencyTypeId) {
    NotificationFrequencyTypeId[NotificationFrequencyTypeId["None"] = 0] = "None";
    NotificationFrequencyTypeId[NotificationFrequencyTypeId["FifteenMinutes"] = 1] = "FifteenMinutes";
    NotificationFrequencyTypeId[NotificationFrequencyTypeId["Daily"] = 2] = "Daily";
})(NotificationFrequencyTypeId || (NotificationFrequencyTypeId = {}));
// StackOverflow.Models.AccountPreferenceFlags
var AccountPreferenceFlags;
(function (AccountPreferenceFlags) {
    AccountPreferenceFlags[AccountPreferenceFlags["None"] = 0] = "None";
    AccountPreferenceFlags[AccountPreferenceFlags["HideLeftNavigation"] = 1] = "HideLeftNavigation";
    AccountPreferenceFlags[AccountPreferenceFlags["EnableKeyboardShortcuts"] = 2] = "EnableKeyboardShortcuts";
    AccountPreferenceFlags[AccountPreferenceFlags["HideHotNetworkQuestionsSidebar"] = 8] = "HideHotNetworkQuestionsSidebar";
    AccountPreferenceFlags[AccountPreferenceFlags["DisableNewsletterPersonalization"] = 16] = "DisableNewsletterPersonalization";
    AccountPreferenceFlags[AccountPreferenceFlags["DismissFreemiumTeamsCreationCTA"] = 32] = "DismissFreemiumTeamsCreationCTA";
    AccountPreferenceFlags[AccountPreferenceFlags["UnifiedSearchActiveByDefault"] = 64] = "UnifiedSearchActiveByDefault";
    AccountPreferenceFlags[AccountPreferenceFlags["DismissReviewQueueNoticeCampaign"] = 128] = "DismissReviewQueueNoticeCampaign";
    AccountPreferenceFlags[AccountPreferenceFlags["ForYouUnreadOnlyByDefault"] = 256] = "ForYouUnreadOnlyByDefault";
    AccountPreferenceFlags[AccountPreferenceFlags["DismissCollectivesNavbarCTA"] = 512] = "DismissCollectivesNavbarCTA";
    AccountPreferenceFlags[AccountPreferenceFlags["SearchTagNamesOnly"] = 1024] = "SearchTagNamesOnly";
    AccountPreferenceFlags[AccountPreferenceFlags["HideSGPostsOutsideOfStagingGround"] = 2048] = "HideSGPostsOutsideOfStagingGround";
})(AccountPreferenceFlags || (AccountPreferenceFlags = {}));
// StackOverflow.Models.UserFlags
var UserFlags;
(function (UserFlags) {
    UserFlags[UserFlags["None"] = 0] = "None";
    UserFlags[UserFlags["DisableSideNav"] = 1073741824] = "DisableSideNav";
    UserFlags[UserFlags["TeamGuide"] = 1] = "TeamGuide";
    UserFlags[UserFlags["DismissMarkdownEditorHelp"] = 2] = "DismissMarkdownEditorHelp";
    UserFlags[UserFlags["HideLeftNavigation"] = 4] = "HideLeftNavigation";
    UserFlags[UserFlags["DismissMentionsCallout"] = 8] = "DismissMentionsCallout";
    UserFlags[UserFlags["DismissQuestionPageProductBanner"] = 16] = "DismissQuestionPageProductBanner";
    UserFlags[UserFlags["DismissWelcomeModal"] = 32] = "DismissWelcomeModal";
    UserFlags[UserFlags["DismissCloseReopenPrivilegePopover"] = 64] = "DismissCloseReopenPrivilegePopover";
    UserFlags[UserFlags["DismissCloseReopenPrivilegeExplanationModal"] = 128] = "DismissCloseReopenPrivilegeExplanationModal";
    UserFlags[UserFlags["DismissPostReactionIntroPopover"] = 256] = "DismissPostReactionIntroPopover";
    UserFlags[UserFlags["DismissFollowQuestionIntroPopover"] = 512] = "DismissFollowQuestionIntroPopover";
    UserFlags[UserFlags["DismissClosedEditModal"] = 1024] = "DismissClosedEditModal";
    UserFlags[UserFlags["DismissModalForCompletedEditOnClosedQuestion"] = 2048] = "DismissModalForCompletedEditOnClosedQuestion";
    UserFlags[UserFlags["DismissAddAdminNotice"] = 4096] = "DismissAddAdminNotice";
    UserFlags[UserFlags["ShowReviewQueueNotice"] = 8192] = "ShowReviewQueueNotice";
    UserFlags[UserFlags["ReviewQueueNoticeIsForCampaign"] = 16384] = "ReviewQueueNoticeIsForCampaign";
    UserFlags[UserFlags["DismissReviewOnboarding"] = 32768] = "DismissReviewOnboarding";
    UserFlags[UserFlags["ShowNewReviewerOnboarding"] = 65536] = "ShowNewReviewerOnboarding";
    UserFlags[UserFlags["DismissModalForFirstPostQueue"] = 131072] = "DismissModalForFirstPostQueue";
    UserFlags[UserFlags["DismissModalForLateAnswerQueue"] = 262144] = "DismissModalForLateAnswerQueue";
    UserFlags[UserFlags["DismissModalForCloseVoteQueue"] = 524288] = "DismissModalForCloseVoteQueue";
    UserFlags[UserFlags["DismissModalForReopenVoteQueue"] = 1048576] = "DismissModalForReopenVoteQueue";
    UserFlags[UserFlags["DismissModalForTriageQueue"] = 2097152] = "DismissModalForTriageQueue";
    UserFlags[UserFlags["DismissModalForHelperQueue"] = 4194304] = "DismissModalForHelperQueue";
    UserFlags[UserFlags["DismissModalForSuggestedEditQueue"] = 8388608] = "DismissModalForSuggestedEditQueue";
    UserFlags[UserFlags["DismissModalForLowQualityPostQueue"] = 16777216] = "DismissModalForLowQualityPostQueue";
    UserFlags[UserFlags["DismissModalForFirstQuestionsQueue"] = 33554432] = "DismissModalForFirstQuestionsQueue";
    UserFlags[UserFlags["DismissModalForFirstAnswersQueue"] = 67108864] = "DismissModalForFirstAnswersQueue";
    UserFlags[UserFlags["DismissModalForContentHealthQueue"] = 134217728] = "DismissModalForContentHealthQueue";
    UserFlags[UserFlags["IsShareFeedbackDefaultSelf"] = 268435456] = "IsShareFeedbackDefaultSelf";
    UserFlags[UserFlags["DismissNewStagingGroundReviewerNotice"] = 536870912] = "DismissNewStagingGroundReviewerNotice";
    UserFlags[UserFlags["DismissNewStagingGroundAuthorNotice"] = 1073741824] = "DismissNewStagingGroundAuthorNotice";
    UserFlags[UserFlags["CollectivesExploredFeatures"] = -2147483648] = "CollectivesExploredFeatures";
    UserFlags[UserFlags["CollectivesReadBulletin"] = 1] = "CollectivesReadBulletin";
    UserFlags[UserFlags["CollectivesCheckedLeaderboard"] = 2] = "CollectivesCheckedLeaderboard";
    UserFlags[UserFlags["CollectivesLearnedAboutRoles"] = 4] = "CollectivesLearnedAboutRoles";
    UserFlags[UserFlags["CollectivesDiscoveredRecAnswers"] = 8] = "CollectivesDiscoveredRecAnswers";
    UserFlags[UserFlags["CollectivesSeenAll"] = 16] = "CollectivesSeenAll";
})(UserFlags || (UserFlags = {}));


/***/ }),

/***/ "./_Scripts/Shared/helpers.mod.ts":
/*!****************************************!*\
  !*** ./_Scripts/Shared/helpers.mod.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DelayedReaction: () => (/* binding */ DelayedReaction),
/* harmony export */   MagicPopup: () => (/* binding */ MagicPopup),
/* harmony export */   addContainerWithLoadingGraphic: () => (/* binding */ addContainerWithLoadingGraphic),
/* harmony export */   addLightbox: () => (/* binding */ addLightbox),
/* harmony export */   addSpinner: () => (/* binding */ addSpinner),
/* harmony export */   addStacksSpinner: () => (/* binding */ addStacksSpinner),
/* harmony export */   bindOnHashChange_HighlightDestination: () => (/* binding */ bindOnHashChange_HighlightDestination),
/* harmony export */   callOnce: () => (/* binding */ callOnce),
/* harmony export */   closePopups: () => (/* binding */ closePopups),
/* harmony export */   copyTextToClipboard: () => (/* binding */ copyTextToClipboard),
/* harmony export */   disableSubmitButton: () => (/* binding */ disableSubmitButton),
/* harmony export */   enableSubmitButton: () => (/* binding */ enableSubmitButton),
/* harmony export */   encodeHexHtmlEntities: () => (/* binding */ encodeHexHtmlEntities),
/* harmony export */   extractUserId: () => (/* binding */ extractUserId),
/* harmony export */   getLikelyErrorMessage: () => (/* binding */ getLikelyErrorMessage),
/* harmony export */   getRejectedMockXhr: () => (/* binding */ getRejectedMockXhr),
/* harmony export */   getSpinnerImg: () => (/* binding */ getSpinnerImg),
/* harmony export */   getTextFromHtmlString: () => (/* binding */ getTextFromHtmlString),
/* harmony export */   hideToasts: () => (/* binding */ hideToasts),
/* harmony export */   importJQueryUIDatepicker: () => (/* binding */ importJQueryUIDatepicker),
/* harmony export */   loadModal: () => (/* binding */ loadModal),
/* harmony export */   loadTicks: () => (/* binding */ loadTicks),
/* harmony export */   locationReload: () => (/* binding */ locationReload),
/* harmony export */   noDiacritics: () => (/* binding */ noDiacritics),
/* harmony export */   queueStacksPopover: () => (/* binding */ queueStacksPopover),
/* harmony export */   removeMessages: () => (/* binding */ removeMessages),
/* harmony export */   removeParameterFromQueryString: () => (/* binding */ removeParameterFromQueryString),
/* harmony export */   removeSpinner: () => (/* binding */ removeSpinner),
/* harmony export */   sanitizeAndSplitTags: () => (/* binding */ sanitizeAndSplitTags),
/* harmony export */   seReady: () => (/* binding */ seReady),
/* harmony export */   setButtonLoadingDisabled: () => (/* binding */ setButtonLoadingDisabled),
/* harmony export */   showErrorMessage: () => (/* binding */ showErrorMessage),
/* harmony export */   showInfoMessage: () => (/* binding */ showInfoMessage),
/* harmony export */   showMessage: () => (/* binding */ showMessage),
/* harmony export */   showModal: () => (/* binding */ showModal),
/* harmony export */   showStacksNotice: () => (/* binding */ showStacksNotice),
/* harmony export */   showSuccessMessage: () => (/* binding */ showSuccessMessage),
/* harmony export */   showToast: () => (/* binding */ showToast),
/* harmony export */   smoothScrollToTopOfElement: () => (/* binding */ smoothScrollToTopOfElement),
/* harmony export */   splitOnLast: () => (/* binding */ splitOnLast),
/* harmony export */   submitFormOnEnterPress: () => (/* binding */ submitFormOnEnterPress),
/* harmony export */   suggestedTransientTimeout: () => (/* binding */ suggestedTransientTimeout),
/* harmony export */   tagSeparator: () => (/* binding */ tagSeparator),
/* harmony export */   toggleStacksPopover: () => (/* binding */ toggleStacksPopover),
/* harmony export */   updateQueryStringParameter: () => (/* binding */ updateQueryStringParameter)
/* harmony export */ });
// shim module for a bunch of things which currently live in stub.js.
// This file is ripe to be split up
// This is a bit of a hack to get around issues with execution order.
// This file initially had a bunch of re-exports from the StackExchange object, like
// `export const addSpinner = StackExchange.helpers.addSpinner`.
// But sometimes this file gets run before full.js is loaded,
// so the `StackExchange.helpers` object won't have been fully initialised.
// So I'm using this `fwd` function to delay access to the `StackExchange.helpers`
// namespace until the re-export function is called.
// (Generally this happens after `seReady` fires, so after `StackExchange.helpers` has been loaded).
// Once `StackExchange.helpers` has been converted to a module, we won't need to do this.
function fwd(fn) {
    return ((...args) => fn()(...args));
}
const addSpinner = fwd(() => StackExchange.helpers.addSpinner);
const addStacksSpinner = fwd(() => StackExchange.helpers.addStacksSpinner);
const addLightbox = fwd(() => StackExchange.helpers.addLightbox);
const getLikelyErrorMessage = fwd(() => StackExchange.helpers.getLikelyErrorMessage);
const getRejectedMockXhr = fwd(() => StackExchange.helpers.getRejectedMockXhr);
const getSpinnerImg = fwd(() => StackExchange.helpers.getSpinnerImg);
const removeMessages = fwd(() => StackExchange.helpers.removeMessages);
const removeSpinner = fwd(() => StackExchange.helpers.removeSpinner);
const showErrorMessage = fwd(() => StackExchange.helpers.showErrorMessage);
const showInfoMessage = fwd(() => StackExchange.helpers.showInfoMessage);
const showMessage = fwd(() => StackExchange.helpers.showMessage);
const showSuccessMessage = fwd(() => StackExchange.helpers.showSuccessMessage);
const showModal = fwd(() => StackExchange.helpers.showModal);
const loadModal = fwd(() => StackExchange.helpers.loadModal);
const showToast = fwd(() => StackExchange.helpers.showToast);
const hideToasts = fwd(() => StackExchange.helpers.hideToasts);
const suggestedTransientTimeout = fwd(() => StackExchange.helpers.suggestedTransientTimeout);
const toggleStacksPopover = fwd(() => StackExchange.helpers.toggleStacksPopover);
const queueStacksPopover = fwd(() => StackExchange.helpers.queueStacksPopover);
const submitFormOnEnterPress = fwd(() => StackExchange.helpers.submitFormOnEnterPress);
const updateQueryStringParameter = fwd(() => StackExchange.helpers.updateQueryStringParameter);
const DelayedReaction = fwd(() => StackExchange.helpers.DelayedReaction);
const closePopups = fwd(() => StackExchange.helpers.closePopups);
const showStacksNotice = fwd(() => StackExchange.helpers.showStacksNotice);
const removeParameterFromQueryString = fwd(() => StackExchange.helpers.removeParameterFromQueryString);
const enableSubmitButton = fwd(() => StackExchange.helpers.enableSubmitButton);
const disableSubmitButton = fwd(() => StackExchange.helpers.disableSubmitButton);
const loadTicks = fwd(() => StackExchange.helpers.loadTicks);
const encodeHexHtmlEntities = fwd(() => StackExchange.helpers.encodeHexHtmlEntities);
const bindOnHashChange_HighlightDestination = fwd(() => StackExchange.helpers.bindOnHashChange_HighlightDestination);
const MagicPopup = fwd(() => StackExchange.helpers.MagicPopup);
const copyTextToClipboard = fwd(() => StackExchange.helpers.copyTextToClipboard);
/**
 * Removes diacritics from a string, eg. "Ã°Ã¸Ä" to "dog"
 * @param source The source string to transform.
 */
const noDiacritics = fwd(() => StackExchange.helpers.noDiacritics);
/**
 * Identifies the tag separator used by a string, for use with String.prototype.split.  The logic closely follows the logic of Tag.ToArray but is more liberal in its concept of a separator.
 * @param tagQuery A sequence of tags separated by "+", space, "|", ",", or ";"
 */
const tagSeparator = fwd(() => StackExchange.helpers.tagSeparator);
/**
 * Splits a sequence of tags into an array, removing or sanitizing invalid characters and illegal tags.
 * @param tags A sequence of tags separated by any supported separator.
 * @param allowWildcards If true, wildcards will not be stripped from the output tags.
 * @param allowOperators If true, the operators "or", "and", and "not" will not be removed from tags.  It will also not sanitize out duplicate instances of the same tag.
 * @param allowUpperCase If true, upper case characters will not be converted to lower case.
 */
const sanitizeAndSplitTags = fwd(() => StackExchange.helpers.sanitizeAndSplitTags);
/**
 * A Promise which resolves once our shared JS code is loaded.
 * Mostly you'll want to wait for this promise in your entry point scripts
 */
const seReady = new Promise(resolve => {
    StackExchange.ready(resolve);
});
/**
 * Reloads the current URL, like the Refresh button
 */
function locationReload() { window.location.reload(); }
const importJQueryUIDatepicker = async function (locale) {
    if (locale !== 'en') {
        return await __webpack_require__("./node_modules/jquery-ui/ui/i18n lazy recursive ^\\.\\/datepicker\\-.*\\.js$")(`./datepicker-${locale}.js`);
    }
    return await Promise.all(/*! import() */[__webpack_require__.e("defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js"), __webpack_require__.e("node_modules_jquery-ui_ui_version_js")]).then(__webpack_require__.t.bind(__webpack_require__, /*! jquery-ui/ui/widgets/datepicker.js */ "./node_modules/jquery-ui/ui/widgets/datepicker.js", 23));
};
// Extracts the userId from a user profile url
function extractUserId(searchText) {
    const profileUrlRegex = /\/users\/([\d]+)(\/.*)?$/i;
    const m = searchText.match(profileUrlRegex);
    return +(m ? m[1] : searchText);
}
// Toggles button loading/disabled status
function setButtonLoadingDisabled($btn, isLoadingDisabled) {
    $btn.toggleClass('is-loading', isLoadingDisabled).prop('disabled', isLoadingDisabled);
}
function addContainerWithLoadingGraphic($parentDiv) {
    $parentDiv.html(`<div class="s-spinner s-spinner__lg m-auto my12"><div class="v-visible-sr">${__tr(["Loadingâ¦"], undefined, "en", [])}</div></div>`);
    $parentDiv.toggleClass("d-none", false);
}
function smoothScrollToTopOfElement($elemToScroll, includeOffsetAndOuter, scrollMs = 300) {
    var _a, _b;
    // https://stackoverflow.com/a/12749875/51
    const scrollY = $elemToScroll
        ? ((_a = $elemToScroll.position()) === null || _a === void 0 ? void 0 : _a.top) +
            (includeOffsetAndOuter ? ((_b = $elemToScroll.offset()) === null || _b === void 0 ? void 0 : _b.top) + $elemToScroll.outerHeight(true) : 0)
        : 0;
    $([document.documentElement, document.body]).animate({
        scrollTop: scrollY
    }, scrollMs);
}
// TODO this lives in stub.js - we should remove it from there eventually
function splitOnLast(str, splitOn) {
    /// <summary>
    /// Returns an array containing this string after it's been split at the last occurrence of 'splitOn'.
    /// If 'splitOn' does not occur, the resulting array will contain only one element, this string.
    /// </summary>
    /// <param name="splitOn" type="String">a string to find in this string</param>
    /// <example>
    /// "test".splitOnLast("?")         => ["test"]
    /// "test?me".splitOnLast("?")      => ["test", "?me"]
    /// "test?me?the".splitOnLast('?')  => ["test?me", "?the"]
    /// </example>
    var i = str.lastIndexOf(splitOn);
    return i < 0 ? [str] : [str.substring(0, i), str.substring(i)];
}
// extract text html strings, remove html tags if there are any
function getTextFromHtmlString(str) {
    return $(`<div>${str}</div>`).text();
}
/***
 * Returns a function that will only be executed a single time
 * @param fn callback to be executed
 */
function callOnce(fn) {
    let done = false;
    return function (...args) {
        if (!done) {
            done = true;
            return fn.apply(this, args);
        }
    };
}


/***/ }),

/***/ "./_Scripts/Shared/options.mod.ts":
/*!****************************************!*\
  !*** ./_Scripts/Shared/options.mod.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _modules_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules.mod */ "./_Scripts/modules.mod.ts");

const options = (0,_modules_mod__WEBPACK_IMPORTED_MODULE_0__.getArgs)("Shared/options.mod.ts").options;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (options);


/***/ }),

/***/ "./_Scripts/Shared/settings.mod.ts":
/*!*****************************************!*\
  !*** ./_Scripts/Shared/settings.mod.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _modules_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules.mod */ "./_Scripts/modules.mod.ts");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_modules_mod__WEBPACK_IMPORTED_MODULE_0__.getArgs)("Shared/settings.mod.ts").settings);


/***/ }),

/***/ "./_Scripts/Shared/svg-utils.mod.ts":
/*!******************************************!*\
  !*** ./_Scripts/Shared/svg-utils.mod.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSvgElement: () => (/* binding */ createSvgElement)
/* harmony export */ });
/**
 * Transforms an SVG string into a jQuery element with extensions to mimic the c# Svg helper
 * @param svg - the svg string to transform
 */
function createSvgElement(svg) {
    const $svg = $(svg);
    $svg.extend({
        With(classes) {
            return $(this).clone().addClass(classes);
        },
        WithAttr(args) {
            const clone = $(this).clone();
            clone.attr(args);
            return clone;
        },
    });
    return $svg;
}


/***/ }),

/***/ "./_Scripts/comments/comments-active.mod.ts":
/*!**************************************************!*\
  !*** ./_Scripts/comments/comments-active.mod.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommentUiFlag: () => (/* binding */ CommentUiFlag),
/* harmony export */   SECommentDeletedEvent: () => (/* binding */ SECommentDeletedEvent),
/* harmony export */   configureFlagModal: () => (/* binding */ configureFlagModal),
/* harmony export */   isSECustomEvent: () => (/* binding */ isSECustomEvent),
/* harmony export */   loadFlagCommentModal: () => (/* binding */ loadFlagCommentModal),
/* harmony export */   postUndeleteComment: () => (/* binding */ postUndeleteComment),
/* harmony export */   submitCommentVote: () => (/* binding */ submitCommentVote)
/* harmony export */ });
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");

function CommentUiFlag($comment, commentId, postUi) {
    if (StackExchange.options.inReadOnly) {
        return;
    }
    const $commentFlag = $comment.find(".js-comment-flag");
    const $returnElements = $commentFlag.addAtEnd($comment.next().find('.js-comment-flag')).addAtEnd(postUi.jCommentsLinkContainer.find('.js-add-link, .js-show-link'));
    const onSuccess = (params) => CommentUiUpdateFlagButtons({ $comment, $commentFlag, postUi, commentId, ...params });
    $commentFlag.addSpinnerAfter({ 'height': '4px' });
    loadFlagCommentModal(commentId, { returnElements: $returnElements })
        .done(function ($modal) { configureFlagModal({ $modal, commentId, onSuccess }); })
        .fail(function (message) {
        $commentFlag.parent().showErrorMessage(message);
    })
        .always(function () {
        (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.removeSpinner)();
    });
}
function CommentUiUpdateFlagButtons({ $comment, $commentFlag, postUi, commentId, response, submitType }) {
    if (response.ResultChangedState) { // flag caused a deletion
        $comment.remove();
        postUi.jDiv.trigger('comment:deleted', [+commentId]);
        return;
    }
    const ACTIVE_CLASS = 'fc-red-400';
    const INACTIVE_CLASS = 'fc-black-225';
    const ENABLED_CLASS = 'c-pointer';
    const pressed = submitType === "add";
    const enabled = !pressed || StackExchange.settings.flags.allowRetractingCommentFlags;
    const title = pressed && enabled
        ? __tr(["You have flagged this comment (click to review your flag)"], undefined, "en", [])
        : pressed
            ? __tr(["You have already flagged this comment"], undefined, "en", [])
            : __tr(["Flag this comment for serious problems or moderator attention"], undefined, "en", []);
    $comment.find('.comment-voting').toggleClass('d-none', pressed);
    $commentFlag
        .toggleClass(ACTIVE_CLASS, pressed)
        .toggleClass(INACTIVE_CLASS, !pressed)
        .toggleClass(ENABLED_CLASS, enabled)
        .attr('aria-pressed', String(pressed))
        .prop('disabled', !enabled)
        .prop('title', title);
}
function loadFlagCommentModal(commentId, modalOptions) {
    return (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.loadModal)(`/flags/comments/${commentId}/popup`, modalOptions);
}
function configureFlagModal({ $modal, commentId, onSuccess }) {
    const $options = $modal.find('input[name="comment-flag-type"]');
    const $submitButton = $modal.find('.js-modal-submit');
    const $form = $modal.find('form');
    const submitType = $form.data("submittype");
    const isAdd = submitType === "add";
    const isRetract = submitType === "retract";
    let lastSubmittedOtherText = "";
    function updateState(focusTextarea) {
        if (isAdd) {
            let submitEnabled = false;
            $options.each(function () {
                const $option = $(this);
                const $commentContainer = $option.closest('.js-comment-flag-option').find('.js-required-comment');
                const comment = $commentContainer.find('textarea').val() || "";
                const checked = $option.is(':checked');
                $commentContainer.toggleClass('d-none', !checked);
                if (checked &&
                    ($commentContainer.length == 0 || (comment.length >= 6 && comment.length <= 500))) {
                    submitEnabled = true;
                }
                if (focusTextarea) {
                    $commentContainer.find('textarea').focus();
                }
            });
            $submitButton.enable(submitEnabled);
        }
    }
    // links in descriptions should open in a new tab
    $modal.find('.js-comment-flag-option a').attr('target', '_blank');
    // Wire up state machine and text validator.
    $modal.find('.js-required-comment').each(function () {
        $(this).find('textarea').charCounter({
            min: 6, max: 500,
            setIsValid: function () { updateState(false); },
            target: $(this).find('.js-input-message'),
        });
    });
    $options.click(function () { updateState(true); });
    updateState(false);
    $form.submit(function (e) {
        e.preventDefault();
        const $checkedFlag = $options.filter(':checked');
        const flagTypeId = $checkedFlag.val();
        const flagComment = $checkedFlag.closest('.js-comment-flag-option').find('.js-required-comment textarea').val() || '';
        const overrideWarning = flagComment === lastSubmittedOtherText;
        lastSubmittedOtherText = flagComment;
        $submitButton.addClass('is-loading');
        if (isAdd) {
            $.ajax({
                type: 'POST',
                url: `/flags/comments/${commentId}/add/${flagTypeId}`,
                data: { fkey: StackExchange.options.user.fkey, otherText: flagComment, overrideWarning: overrideWarning },
                dataType: 'json'
            })
                .done(function (json) {
                if (!json.Success) {
                    let opts = { closeOthers: false };
                    if (json.Outcome === 1)
                        opts.type = "warning";
                    $submitButton.removeClass('is-loading').parent().showErrorMessage(json.Message || __tr(["An error occurred during flagging"], undefined, "en", []), opts);
                    return;
                }
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.closePopups)($modal, 'submit');
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showToast)(__tr(["Thanks for flagging! We take your reports seriously."], undefined, "en", []), { type: 'success', transientTimeout: 3000 });
                if (onSuccess) {
                    onSuccess({ response: json, submitType });
                }
            })
                .fail(function (res) {
                let error = res.responseText;
                if (!error || error.indexOf("<html") >= 0) // <- YSOD?
                    error = __tr(["An error occurred during flagging"], undefined, "en", []);
                $submitButton.removeClass('is-loading').parent().showErrorMessage(error, { transient: res.status == 409, closeOthers: false }); // fade away throttle errors
            });
        }
        else if (isRetract) { // is a revert flag call
            $.ajax({
                type: 'POST',
                url: `/flags/comments/${commentId}/retract/${flagTypeId}`,
                data: { fkey: StackExchange.options.user.fkey, otherText: flagComment, overrideWarning: overrideWarning },
                dataType: 'json'
            })
                .done(function (json) {
                if (!json.Success) {
                    (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showToast)(json.Message || __tr(["An error occurred during flagging"], undefined, "en", []), { type: 'danger', $parent: $modal });
                    return;
                }
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.closePopups)($modal, 'submit');
                (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.showToast)(__tr(["The comment flag has been successfully retracted."], undefined, "en", []), { type: 'success', transientTimeout: 3000 });
                if (onSuccess)
                    onSuccess({ response: json, submitType });
            })
                .fail(function (res) {
                let error = res.responseText;
                if (!error || error.indexOf("<html") >= 0) // <- YSOD?
                    error = __tr(["An error occurred during retraction of flag"], undefined, "en", []);
                $submitButton.removeClass('is-loading').parent().showErrorMessage(error, { transient: res.status == 409, closeOthers: false }); // fade away throttle errors
            });
        }
    });
    $modal.focus();
}
function submitCommentVote(commentId, voteTypeId, additionalParams = {}, loaderFn = $.ajax) {
    if (StackExchange.options.inReadOnly)
        return;
    const params = { "fkey": StackExchange.options.user.fkey, ...additionalParams };
    const options = {
        type: "POST",
        url: '/posts/comments/' + commentId + '/vote/' + voteTypeId,
        dataType: "json",
        data: params
    };
    return loaderFn(options);
}
function postUndeleteComment(postId, commentId) {
    return $.ajax({
        type: 'POST',
        url: `/admin/posts/${postId}/comments/${commentId}/undelete`,
        dataType: 'html',
        data: { fkey: StackExchange.options.user.fkey }
    });
}
/**
 * User-defined Type Guard check for native custom events.
 *
 * Prefer this duck-typing approach over `event instanceof ...`
 * because instanceof returns false across different contexts.
 *
 * For example, the same class may be defined multiple times across
 * JS bundles which instanceof checks return false negatives for.
 */
function isSECustomEvent(obj) {
    if (obj == undefined)
        return false;
    const hasEventType = typeof obj.type === "string" && Boolean(obj.type);
    const hasEventDetail = Boolean(obj.detail);
    return hasEventType && hasEventDetail;
}
class SECommentDeletedEvent extends Event {
    constructor(detail) {
        super(SECommentDeletedEvent.type, { bubbles: true });
        this.detail = detail;
    }
}
SECommentDeletedEvent.type = "comment:deleted";


/***/ }),

/***/ "./_Scripts/comments/comments-tab-completer.mod.ts":
/*!*********************************************************!*\
  !*** ./_Scripts/comments/comments-tab-completer.mod.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeName: () => (/* binding */ normalizeName)
/* harmony export */ });
/* harmony import */ var _Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Shared/helpers.mod */ "./_Scripts/Shared/helpers.mod.ts");

function normalizeName(s) {
    return (0,_Shared_helpers_mod__WEBPACK_IMPORTED_MODULE_0__.noDiacritics)(s.replace(/ /g, "").toLowerCase());
}


/***/ }),

/***/ "./_Scripts/modules.mod.ts":
/*!*********************************!*\
  !*** ./_Scripts/modules.mod.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getArgs: () => (/* binding */ getArgs),
/* harmony export */   getArgsList: () => (/* binding */ getArgsList)
/* harmony export */ });
/**
 * Returns the arguments set by a call to `JavaScriptHelper.Args` on the backend.
 * This function's argument should be the relative file path to the TypeScript
 * file.
 *
 * The file path should be everything __after__ `StackOverflow/_Scripts/`.
 * Or, use the magic `__filename` variable that is set by Webpack's `DefinePlugin`.
 *
 * @param tsFilePath - Use the magic `__filename` variable
 * @returns The args which were set by a call to `JavaScriptHelper.Args` on the backend.
 *
 * @example
 * In your Razor file, call `JavaScriptHelper.Args`:
 * ```csharp
 * @JavaScriptHelper.Args("my-module", new { foo = 123, bar = "bar" });
 * ```
 * Then, in `my-module.ts`:
 * ```ts
 * interface Args {
 *     foo: number;
 *     bar: string;
 * }
 * const args = getArgs<Args>(__filename);
 * // args = { foo: 123, bar: "bar" }
 * ```
 */
function getArgs(tsFilePath) {
    const args = getArgsList(tsFilePath);
    assertNotMissing(args, tsFilePath);
    assertNotMultiple(args, tsFilePath);
    return args[0];
}
/**
 * Like getArgs(), but returns an array of args,
 * one for each JavaScriptHelper.Args() call.
 * Won't throw if you have 0 or >1 JSHelper.Args items.
 * (You should probably call getArgs instead.)
 */
function getArgsList(tsFilePath) {
    const $el = getArgsElement(tsFilePath);
    return $el.toArray().map(e => JSON.parse($(e).text()));
}
function getArgsElement(tsFilePath) {
    const url = tsFilePath.replace(/\.(t|j)sx?/, '');
    const selector = `script[type="application/json"][data-role="module-args"][data-module-name="${url}"]`;
    return $(selector);
}
function assertNotMissing(args, moduleName) {
    if (args.length === 0) {
        throw `Couldn't find args for module "${moduleName}". Did you forget to call @JavaScriptHelper.Args?`;
    }
}
function assertNotMultiple(args, moduleName) {
    if (args.length > 1) {
        throw `Found too many instances of args for module "${moduleName}". Did you call @JavaScriptHelper.Args too many times?`;
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/controllers/arrow_key_navigation_controller.mod.ts":
/*!*************************************************************************************!*\
  !*** ./_Scripts/modules/general/controllers/arrow_key_navigation_controller.mod.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArrowKeyNavigationController)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");

const { Base } = (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.buildController)("se-arrow-key-navigation")
    .withTargets("navigableElement" // each html element tagged with this target wil be traversible with up/down arrows
)
    .withValues({
    loops: Boolean, // if set to true the list will loop from top to bottom and vice-a-versa when using arrow keys to traverse it. This is mutually exclusive with the exit options
})
    .build();
class ArrowKeyNavigationController extends Base {
    constructor() {
        super(...arguments);
        this.currentIndex = 0;
        this.focusedItem = null;
    }
    navigableElementTargetConnected(element) {
        element.addEventListener("focus", this.handleElementFocused.bind(this, element));
        element.addEventListener("blur", this.handleElementBlurred.bind(this));
    }
    navigableElementTargetDisconnected(element) {
        element.removeEventListener("focus", this.handleElementFocused.bind(this, element));
        element.removeEventListener("blur", this.handleElementBlurred.bind(this));
    }
    connect() {
        this.currentIndex = 0;
        document.addEventListener("keydown", this.handleKeyDown.bind(this));
    }
    disconnect() {
        this.currentIndex = 0;
        document.removeEventListener("keydown", this.handleKeyDown.bind(this));
    }
    handleKeyDown(event) {
        if (this.focusedItem) {
            if (event.key === "ArrowUp") {
                this.selectPreviousItem();
            }
            else if (event.key === "ArrowDown") {
                this.selectNextItem();
            }
        }
    }
    selectNextItem() {
        if (this.loopsValue) {
            this.currentIndex =
                (this.currentIndex + 1) % this.navigableElementTargets.length;
        }
        else if (this.currentIndex <
            this.navigableElementTargets.length - 1) {
            this.currentIndex++;
        }
        this.navigableElementTargets[this.currentIndex].focus();
    }
    selectPreviousItem() {
        if (this.loopsValue) {
            this.currentIndex =
                (this.currentIndex - 1 + this.navigableElementTargets.length) %
                    this.navigableElementTargets.length;
        }
        else if (this.currentIndex > 0) {
            this.currentIndex--;
        }
        this.navigableElementTargets[this.currentIndex].focus();
    }
    handleElementFocused(el) {
        this.focusedItem = el;
        this.navigableElementTargets.forEach((item, index) => {
            if (el === item && this.currentIndex != index) {
                this.currentIndex = index;
            }
        });
    }
    handleElementBlurred() {
        this.focusedItem = null;
    }
}


/***/ }),

/***/ "./_Scripts/modules/general/index.mod.ts":
/*!***********************************************!*\
  !*** ./_Scripts/modules/general/index.mod.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   registerAllGeneralControllers: () => (/* binding */ registerAllGeneralControllers)
/* harmony export */ });
/* harmony import */ var _shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/controller-builder */ "./_Scripts/modules/shared/controller-builder/index.ts");
/* harmony import */ var _controllers_arrow_key_navigation_controller_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controllers/arrow_key_navigation_controller.mod */ "./_Scripts/modules/general/controllers/arrow_key_navigation_controller.mod.ts");
/* harmony import */ var _controllers_character_counter_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controllers/character_counter_controller */ "./_Scripts/modules/general/controllers/character_counter_controller.ts");
/* harmony import */ var _controllers_delayed_popover_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controllers/delayed_popover_controller */ "./_Scripts/modules/general/controllers/delayed_popover_controller.ts");
/* harmony import */ var _controllers_dismiss_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./controllers/dismiss_controller */ "./_Scripts/modules/general/controllers/dismiss_controller.ts");
/* harmony import */ var _controllers_draggable_sort_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controllers/draggable_sort_controller */ "./_Scripts/modules/general/controllers/draggable_sort_controller.ts");
/* harmony import */ var _controllers_follow_post_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controllers/follow_post_controller */ "./_Scripts/modules/general/controllers/follow_post_controller.ts");
/* harmony import */ var _controllers_nav_prevention_controller__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./controllers/nav_prevention_controller */ "./_Scripts/modules/general/controllers/nav_prevention_controller.ts");








function registerAllGeneralControllers() {
    (0,_shared_controller_builder__WEBPACK_IMPORTED_MODULE_0__.registerControllers)([
        _controllers_arrow_key_navigation_controller_mod__WEBPACK_IMPORTED_MODULE_1__["default"],
        _controllers_character_counter_controller__WEBPACK_IMPORTED_MODULE_2__["default"],
        _controllers_delayed_popover_controller__WEBPACK_IMPORTED_MODULE_3__["default"],
        _controllers_dismiss_controller__WEBPACK_IMPORTED_MODULE_4__["default"],
        _controllers_draggable_sort_controller__WEBPACK_IMPORTED_MODULE_5__["default"],
        _controllers_nav_prevention_controller__WEBPACK_IMPORTED_MODULE_7__["default"],
        _controllers_follow_post_controller__WEBPACK_IMPORTED_MODULE_6__["default"],
    ], "se-");
}


/***/ }),

/***/ "./_Scripts/modules/shared/controller-builder/lib/blessings/values.mod.ts":
/*!********************************************************************************!*\
  !*** ./_Scripts/modules/shared/controller-builder/lib/blessings/values.mod.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayOf: () => (/* binding */ arrayOf),
/* harmony export */   objectOfShape: () => (/* binding */ objectOfShape)
/* harmony export */ });
function arrayOf() {
    return Array;
}
function objectOfShape() {
    return Object;
}


/***/ }),

/***/ "./_Scripts/modules/shared/controller-builder/lib/controller-builder.mod.ts":
/*!**********************************************************************************!*\
  !*** ./_Scripts/modules/shared/controller-builder/lib/controller-builder.mod.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayOf: () => (/* reexport safe */ _blessings_values_mod__WEBPACK_IMPORTED_MODULE_1__.arrayOf),
/* harmony export */   buildController: () => (/* binding */ buildController),
/* harmony export */   objectOfShape: () => (/* reexport safe */ _blessings_values_mod__WEBPACK_IMPORTED_MODULE_1__.objectOfShape)
/* harmony export */ });
/* harmony import */ var _tools_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools.mod */ "./_Scripts/modules/shared/controller-builder/lib/tools.mod.ts");
/* harmony import */ var _blessings_values_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blessings/values.mod */ "./_Scripts/modules/shared/controller-builder/lib/blessings/values.mod.ts");
var __setFunctionName = (undefined && undefined.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};


/** Given the intended name under which the controller will be registered,
 * return a controller builder object. Call `.withTargets`, `.withValues`,
 * and/or `.withClasses` to define targets, values, and classes as intended
 * (see the Stimulus 2.0.0 documentation for details).
 *
 * Outlets also work, but with a twist: You don't pass a string, but a
 * controller class that was created with this builder, and you can only
 * pass one at a time:
 *
 * ```
 * .withOutlet(SomeController)
 * .withOutlet(OtherController)
 * ```
 *
 * Note that this requires that the controllers were registered under the
 * names that you passed to `buildController`. All outlet properties will
 * be typed with the correct instance and element type.
 *
 * If you use `.withValues({arr: Array, obj: Object})`, you will not have
 * any typing information for `this.arrValue` and `this.objValue`. In order
 * to say "this value is an array with a specific element type" or "this
 * object has a specfic interfact", you can use the `arrayOf` and
 * `objectOfShape` helpers export by this file:
 *
 * ```
 * .withValues({
 *   arr: arrayOf<number>(),    // this.arrValue is of type number[]
 *   obj: objectOfShape<User>() // this.objValue is of type User
 * })
 * ```
 *
 * Note that this doesn't validate anything at runtime; it's your responsibility
 * to make sure that the data attributes on the element have matching content.
 *
 * You can also call `.withElementType<HTMLFooBarElement>()` to specify that
 * your controller's `this.element` will be of the given type. Note that this
 * is not validated at runtime either; it's your repsonsibility to ensure that this
 * controller is only attached to elements of the correct type. This matches
 * Stimulus 3 behavior.
 *
 * The calls should be chained on the return value of the respective preceding
 * call.
 *
 * A `.withXYZ()` call adds additional blessings (that's what Stimulus calls them),
 * so you can call them multiple times. Note that that does not work with
 * `.withElementType()`.
 *
 * Finally call `.build()` on the result, which will give you the base class
 * constructor from which you can inherit to build your controller implementation,
 * and a function called `stimulusCallback` which is a decorator that you should
 * put as a decorator on any notification method that you expect Stimulus to call.
 * The decorator is not required for it to be called (Stimulus doesn't care),
 * but it enforces at compile time that the method name is an actual function
 * that Stimulus would call, and that the signature is correct.
 *
 * The static properties (`targets` etc.) have already been set on the `Base`,
 * and the magic properties (`hasFooTargets` etc.) are known to the TypeScript
 * compiler.
 *
 * ```
 * const { Base, stimulusCallback } = buildController("my-controller")
 *     .withTargets("foo")
 *     .withValues({bar: string})
 *     .build();
 *
 * class MyController extends Base {
 *   connect() {
 *     console.log(this.fooTarget.innerText, this.barValue);
 *   }
 *
 *   @stimulusCallback
 *   barValueChanged(newValue: string) {
 *     ...
 *   }
 * }
 * ```
 */
function buildController(name) {
    return builder(name, [], {}, [], []);
}
function builder(name, targets, values, classes, outlets) {
    return {
        withTargets: (...newTargets) => {
            return builder(name, [...targets, ...newTargets], values, classes, outlets);
        },
        withValues: (newValues) => {
            return builder(name, targets, { ...values, ...newValues }, classes, outlets);
        },
        withClasses: (...newClasses) => {
            return builder(name, targets, values, [...classes, ...newClasses], outlets);
        },
        withElementType: () => {
            // This is a pure typing change, it doesn't make any difference at runtime.
            return builder(name, targets, values, classes, outlets);
        },
        withOutlet: (newOutlet) => {
            return builder(name, targets, values, classes, [
                ...outlets,
                newOutlet.controllerName,
            ]);
        },
        build: () => {
            var _a;
            return ({
                Base: (_a = class extends StimulusControllerConstructor {
                    },
                    __setFunctionName(_a, "Base"),
                    _a.controllerName = name,
                    _a.targets = targets,
                    _a.values = values,
                    _a.classes = classes,
                    _a.outlets = outlets,
                    _a),
                stimulusCallback: _tools_mod__WEBPACK_IMPORTED_MODULE_0__.noop,
            });
        },
    };
}
// Stacks doesn't current expose Stimulus, but we need the controller
// constructor to inherit from (and we don't want to import from stimulus,
// since that would bundle the whole thing, which is a waste because it's
// already available on the client). So we use Stacks.createController()
// to create a controller, which is a subclass of StacksController, which
// is a subclass of the real stimulus controller, and grab the correct
// contructor from the prototype chain
const StimulusControllerConstructor = (function () {
    const customConstructor = Stacks.createController({});
    const customController = new customConstructor({});
    const customControllerProto = Object.getPrototypeOf(customController);
    const stacksControllerProto = Object.getPrototypeOf(customControllerProto);
    const stimulusControllerProto = Object.getPrototypeOf(stacksControllerProto);
    return stimulusControllerProto.constructor;
})();


/***/ }),

/***/ "./_Scripts/modules/shared/controller-builder/lib/tools.mod.ts":
/*!*********************************************************************!*\
  !*** ./_Scripts/modules/shared/controller-builder/lib/tools.mod.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   noop: () => (/* binding */ noop)
/* harmony export */ });
function noop() {
    return;
}


/***/ }),

/***/ "./_Scripts/post/PostMenu.mod.ts":
/*!***************************************!*\
  !*** ./_Scripts/post/PostMenu.mod.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initPostMenu: () => (/* binding */ initPostMenu)
/* harmony export */ });
/**
 * Displays error reasons when users can't edit a post
 */
function attachPostMenuEditOnErrorClickHandler() {
    $(document).on('click', '.js-post-menu .js-error-click', function () {
        var $this = $(this);
        $this.closest('.js-post-menu').showErrorMessage($this.data('error-message'));
        return false;
    });
}
function initPostMenu() {
    attachPostMenuEditOnErrorClickHandler();
}


/***/ }),

/***/ "./_Scripts/site-includes/index.mod.ts":
/*!*********************************************!*\
  !*** ./_Scripts/site-includes/index.mod.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ load)
/* harmony export */ });
/* harmony import */ var _modules_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules.mod */ "./_Scripts/modules.mod.ts");

/**
 * Download the JS modules identified by the current site's JsModuleIncludes sitesetting
 * */
async function load() {
    // prevent double initialisation in the case that this
    // module has been included in multiple entrypoints on a single page.
    // Shouldn't happen after js modules transition is complete
    if (window.siteIncludesLoaded) {
        return Promise.resolve([]);
    }
    window.siteIncludesLoaded = true;
    const args = (0,_modules_mod__WEBPACK_IMPORTED_MODULE_0__.getArgsList)("site-includes/index.mod.ts");
    return Promise.all(args.map(x => {
        // dynamic import: download+execute modules from the current folder
        // (site-includes) whose names match the moduleName in the args.
        //
        // Webpack parses the import() statement and creates
        // chunks for each module matching the pattern (namely files in the current folder).
        // https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import
        return __webpack_require__("./_Scripts/site-includes lazy recursive ^\\.\\/.*\\.mod$ exclude: index")(`./${x.moduleName}.mod`);
    }));
}


/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AchievementsSm.svg":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AchievementsSm.svg ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconAchievementsSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M11 2V1H3v1H0v3c0 1.6 1.4 3 3 3 0 0 .5 2 3 2v1H4s-1 1.5-1 2h8c0-.4-1-2-1-2H8v-1c2.5 0 3-2 3-2 1.6-.2 3-1.4 3-3V2h-3ZM3 6c-.5 0-1-.5-1-1V4h1v2Zm9-1c0 .5-.5 1-1 1V4h1v1ZM7 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Alert.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Alert.svg ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlert\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7.95 2.71c.58-.94 1.52-.94 2.1 0l7.69 12.58c.58.94.15 1.71-.96 1.71H1.22C.1 17-.32 16.23.26 15.29L7.95 2.71ZM8 6v5h2V6H8Zm0 7v2h2v-2H8Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertCircle.svg":
/*!********************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertCircle.svg ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlertCircle\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8ZM8 4v6h2V4H8Zm0 8v2h2v-2H8Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertSm.svg":
/*!****************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/AlertSm.svg ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlertSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5.97 1.7c.57-.94 1.5-.93 2.05 0l5.73 9.59c.57.94.12 1.71-.98 1.71H1.22c-1.1 0-1.54-.77-.97-1.71L5.97 1.7ZM6 4v5h2V4H6Zm0 6v2h2v-2H6Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Checkmark.svg":
/*!******************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Checkmark.svg ***!
  \******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmark\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 4.41 14.59 3 6 11.59 2.41 8 1 9.41l5 5 10-10Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Clear.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Clear.svg ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconClear\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 4.41 13.59 3 9 7.59 4.41 3 3 4.41 7.59 9 3 13.59 4.41 15 9 10.41 13.59 15 15 13.59 10.41 9 15 4.41Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ClearSm.svg":
/*!****************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ClearSm.svg ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconClearSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M12 3.41 10.59 2 7 5.59 3.41 2 2 3.41 5.59 7 2 10.59 3.41 12 7 8.41 10.59 12 12 10.59 8.41 7 12 3.41Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/DevTo.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/DevTo.svg ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconDevTo\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#010101\" d=\"M15 1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2h12Zm-3 5.02h-1.18l1.4 5.24c.36.86 1.16 1.1 1.65.13l.06-.13 1.39-5.24h-1.18l-1.07 4.12L12 6.02Zm-1.96 0H7.75a.72.72 0 0 0-.7.65l-.01.1v4.53c0 .37.29.67.65.7l.1.01h2.25v-1.07H8.1V9.26h1.18V8.19H8.1v-1.1h1.93V6.02Zm-5.32 0H3v5.99h1.68c1.33 0 1.75-1.03 1.75-1.71V7.73c0-.68-.43-1.71-1.71-1.71Zm.06 1.12a.7.7 0 0 1 .42.16c.14.1.21.26.21.47v2.52c0 .21-.07.37-.2.47a.7.7 0 0 1-.43.16h-.63V7.14h.63Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Facebook.svg":
/*!*****************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Facebook.svg ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconFacebook\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#4167B2\" d=\"M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H3Zm6.55 16v-6.2H7.46V8.4h2.09V6.61c0-2.07 1.26-3.2 3.1-3.2.88 0 1.64.07 1.87.1v2.16h-1.29c-1 0-1.19.48-1.19 1.18V8.4h2.39l-.31 2.42h-2.08V17h-2.5Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/HelpSm.svg":
/*!***************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/HelpSm.svg ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconHelpSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 1C3.74 1 1 3.77 1 7c0 3.26 2.77 6 6 6 3.27 0 6-2.73 6-6s-2.73-6-6-6Zm1.06 9.06c-.02.63-.48 1.02-1.1 1-.57-.02-1.03-.43-1.01-1.06.02-.63.5-1.04 1.08-1.02.6.02 1.05.45 1.03 1.08Zm.73-3.07-.47.3c-.2.15-.36.36-.44.6a3.6 3.6 0 0 0-.08.65c0 .04-.03.14-.16.14h-1.4c-.14 0-.16-.09-.16-.13-.01-.5.11-.99.36-1.42A4.6 4.6 0 0 1 7.7 6.07c.15-.1.21-.21.3-.33.18-.2.28-.47.28-.74.01-.67-.53-1.14-1.18-1.14-.9 0-1.18.7-1.18 1.46H4.2c0-1.17.31-1.92.98-2.36a3.5 3.5 0 0 1 1.83-.44c.88 0 1.58.16 2.2.62.58.42.88 1.02.88 1.82 0 .5-.17.9-.43 1.24-.15.2-.44.47-.86.79h-.01Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/IndustrySm.svg":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/IndustrySm.svg ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconIndustrySm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2h3a1 1 0 0 1 1 1v8H2V2Zm2 1v2h2V3H4Zm2 3H4v2h2V6Zm0 3H4v2h2V9Zm2-3v2h2V6H8Zm2 3H8v2h2V9Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Link.svg":
/*!*************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Link.svg ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconLink\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7.22 11.83a6 6 0 0 0 1.62.85l.61-1.8a4.1 4.1 0 1 1 4.04-.8l1.26 1.42a6 6 0 1 0-7.53.33Zm3.43-5.6a6 6 0 0 0-1.6-.87L8.4 7.15a4.1 4.1 0 1 1-4.05.73L3.12 6.43a6 6 0 1 0 7.53-.2Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/People.svg":
/*!***************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/People.svg ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconPeople\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M17 14c0 .44-.45 1-1 1H9a1 1 0 0 1-1-1H2c-.54 0-1-.56-1-1 0-2.63 3-4 3-4s.23-.4 0-1c-.84-.62-1.06-.59-1-3 .06-2.42 1.37-3 2.5-3s2.44.58 2.5 3c.06 2.41-.16 2.38-1 3-.23.59 0 1 0 1s1.55.71 2.42 2.09c.78-.72 1.58-1.1 1.58-1.1s.23-.4 0-1c-.84-.61-1.06-.58-1-3 .06-2.41 1.37-3 2.5-3s2.44.59 2.5 3c.05 2.42-.16 2.39-1 3-.23.6 0 1 0 1s3 1.38 3 4Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ShareSm.svg":
/*!****************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/ShareSm.svg ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconShareSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5 1H3a2 2 0 0 0-2 2v8c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V9h-2v2H3V3h2V1Zm2 0h6v6h-2V4.5L6.5 9 5 7.5 9.5 3H7V1Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingDown.svg":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingDown.svg ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m11 14 2.29-2.29L10.5 9l-3 3L1 5.5 2.5 4l5 5 3-3 4.21 4.29L17 8v6h-6Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingNone.svg":
/*!*********************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingNone.svg ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingNone\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 8V5L1 9l4 4v-3h8v3l4-4-4-4v3H5Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingUp.svg":
/*!*******************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/TrendingUp.svg ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingUp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m11 4 2.29 2.29L10.5 9l-3-3L1 12.5 2.5 14l5-5 3 3 4.21-4.29L17 10V4h-6Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Twitter.svg":
/*!****************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/Twitter.svg ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconTwitter\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#2AA3EF\" d=\"M17 4.04c-.59.26-1.22.44-1.88.52a3.3 3.3 0 0 0 1.44-1.82c-.64.37-1.34.64-2.09.79a3.28 3.28 0 0 0-5.6 2.99A9.3 9.3 0 0 1 2.12 3.1a3.28 3.28 0 0 0 1.02 4.38 3.28 3.28 0 0 1-1.49-.4v.03a3.29 3.29 0 0 0 2.64 3.22 3.34 3.34 0 0 1-1.48.06 3.29 3.29 0 0 0 3.07 2.28 6.58 6.58 0 0 1-4.85 1.36 9.33 9.33 0 0 0 5.04 1.47c6.04 0 9.34-5 9.34-9.33v-.42a6.63 6.63 0 0 0 1.63-1.7L17 4.04Z\"/></svg>";

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/UndoSm.svg":
/*!***************************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/lib/Icon/UndoSm.svg ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "<svg aria-hidden=\"true\" class=\"svg-icon iconUndoSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2.76 2.76A6 6 0 1 1 1.09 8h1.93A4.1 4.1 0 1 0 4.1 4.1L6 6H1V1l1.76 1.76Z\"/></svg>";

/***/ }),

/***/ "@stackoverflow/stacks":
/*!*************************!*\
  !*** external "Stacks" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = window["Stacks"];

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = window["jQuery"];

/***/ }),

/***/ "./node_modules/@stackoverflow/stacks-icons/dist/icons.js":
/*!****************************************************************!*\
  !*** ./node_modules/@stackoverflow/stacks-icons/dist/icons.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IconAccessibility: () => (/* binding */ IconAccessibility),
/* harmony export */   IconAchievements: () => (/* binding */ IconAchievements),
/* harmony export */   IconAchievementsLg: () => (/* binding */ IconAchievementsLg),
/* harmony export */   IconAchievementsSm: () => (/* binding */ IconAchievementsSm),
/* harmony export */   IconAlert: () => (/* binding */ IconAlert),
/* harmony export */   IconAlertCircle: () => (/* binding */ IconAlertCircle),
/* harmony export */   IconAlertCircleSm: () => (/* binding */ IconAlertCircleSm),
/* harmony export */   IconAlertSm: () => (/* binding */ IconAlertSm),
/* harmony export */   IconAnswer: () => (/* binding */ IconAnswer),
/* harmony export */   IconAnswerEs: () => (/* binding */ IconAnswerEs),
/* harmony export */   IconAnswerPt: () => (/* binding */ IconAnswerPt),
/* harmony export */   IconAnswerRu: () => (/* binding */ IconAnswerRu),
/* harmony export */   IconApprove: () => (/* binding */ IconApprove),
/* harmony export */   IconArchive: () => (/* binding */ IconArchive),
/* harmony export */   IconArchiveAlt: () => (/* binding */ IconArchiveAlt),
/* harmony export */   IconArchiveAltSm: () => (/* binding */ IconArchiveAltSm),
/* harmony export */   IconArchiveSm: () => (/* binding */ IconArchiveSm),
/* harmony export */   IconArrowDoubleDown: () => (/* binding */ IconArrowDoubleDown),
/* harmony export */   IconArrowDoubleUp: () => (/* binding */ IconArrowDoubleUp),
/* harmony export */   IconArrowDown: () => (/* binding */ IconArrowDown),
/* harmony export */   IconArrowDownAlt: () => (/* binding */ IconArrowDownAlt),
/* harmony export */   IconArrowDownLg: () => (/* binding */ IconArrowDownLg),
/* harmony export */   IconArrowDownLong: () => (/* binding */ IconArrowDownLong),
/* harmony export */   IconArrowDownSm: () => (/* binding */ IconArrowDownSm),
/* harmony export */   IconArrowLeft: () => (/* binding */ IconArrowLeft),
/* harmony export */   IconArrowLeftAlt: () => (/* binding */ IconArrowLeftAlt),
/* harmony export */   IconArrowLeftAltSm: () => (/* binding */ IconArrowLeftAltSm),
/* harmony export */   IconArrowLeftSm: () => (/* binding */ IconArrowLeftSm),
/* harmony export */   IconArrowRight: () => (/* binding */ IconArrowRight),
/* harmony export */   IconArrowRightAlt: () => (/* binding */ IconArrowRightAlt),
/* harmony export */   IconArrowRightAltSm: () => (/* binding */ IconArrowRightAltSm),
/* harmony export */   IconArrowRightSm: () => (/* binding */ IconArrowRightSm),
/* harmony export */   IconArrowUp: () => (/* binding */ IconArrowUp),
/* harmony export */   IconArrowUpAlt: () => (/* binding */ IconArrowUpAlt),
/* harmony export */   IconArrowUpDown: () => (/* binding */ IconArrowUpDown),
/* harmony export */   IconArrowUpDownSm: () => (/* binding */ IconArrowUpDownSm),
/* harmony export */   IconArrowUpLg: () => (/* binding */ IconArrowUpLg),
/* harmony export */   IconArrowUpLong: () => (/* binding */ IconArrowUpLong),
/* harmony export */   IconArrowUpSm: () => (/* binding */ IconArrowUpSm),
/* harmony export */   IconAsterisk: () => (/* binding */ IconAsterisk),
/* harmony export */   IconAsteriskSm: () => (/* binding */ IconAsteriskSm),
/* harmony export */   IconBadge: () => (/* binding */ IconBadge),
/* harmony export */   IconBadgeSm: () => (/* binding */ IconBadgeSm),
/* harmony export */   IconBalloon: () => (/* binding */ IconBalloon),
/* harmony export */   IconBell: () => (/* binding */ IconBell),
/* harmony export */   IconBellSm: () => (/* binding */ IconBellSm),
/* harmony export */   IconBold: () => (/* binding */ IconBold),
/* harmony export */   IconBook: () => (/* binding */ IconBook),
/* harmony export */   IconBookmark: () => (/* binding */ IconBookmark),
/* harmony export */   IconBookmarkAlt: () => (/* binding */ IconBookmarkAlt),
/* harmony export */   IconBriefcase: () => (/* binding */ IconBriefcase),
/* harmony export */   IconBriefcaseSm: () => (/* binding */ IconBriefcaseSm),
/* harmony export */   IconBullhorn: () => (/* binding */ IconBullhorn),
/* harmony export */   IconBullhornSm: () => (/* binding */ IconBullhornSm),
/* harmony export */   IconCake: () => (/* binding */ IconCake),
/* harmony export */   IconCalendar: () => (/* binding */ IconCalendar),
/* harmony export */   IconChair: () => (/* binding */ IconChair),
/* harmony export */   IconCheckmark: () => (/* binding */ IconCheckmark),
/* harmony export */   IconCheckmarkLg: () => (/* binding */ IconCheckmarkLg),
/* harmony export */   IconCheckmarkSm: () => (/* binding */ IconCheckmarkSm),
/* harmony export */   IconCheckmarkVerified: () => (/* binding */ IconCheckmarkVerified),
/* harmony export */   IconCheckmarkVerifiedSm: () => (/* binding */ IconCheckmarkVerifiedSm),
/* harmony export */   IconClap: () => (/* binding */ IconClap),
/* harmony export */   IconClear: () => (/* binding */ IconClear),
/* harmony export */   IconClearSm: () => (/* binding */ IconClearSm),
/* harmony export */   IconClock: () => (/* binding */ IconClock),
/* harmony export */   IconCode: () => (/* binding */ IconCode),
/* harmony export */   IconCodeSnippet: () => (/* binding */ IconCodeSnippet),
/* harmony export */   IconCodeblock: () => (/* binding */ IconCodeblock),
/* harmony export */   IconCodeblockAlt: () => (/* binding */ IconCodeblockAlt),
/* harmony export */   IconCoins: () => (/* binding */ IconCoins),
/* harmony export */   IconCollection: () => (/* binding */ IconCollection),
/* harmony export */   IconColumns: () => (/* binding */ IconColumns),
/* harmony export */   IconComputer: () => (/* binding */ IconComputer),
/* harmony export */   IconConfluence: () => (/* binding */ IconConfluence),
/* harmony export */   IconCopy: () => (/* binding */ IconCopy),
/* harmony export */   IconCreditCard: () => (/* binding */ IconCreditCard),
/* harmony export */   IconCrosshairs: () => (/* binding */ IconCrosshairs),
/* harmony export */   IconCurrency: () => (/* binding */ IconCurrency),
/* harmony export */   IconDevTo: () => (/* binding */ IconDevTo),
/* harmony export */   IconDiff: () => (/* binding */ IconDiff),
/* harmony export */   IconDiscord: () => (/* binding */ IconDiscord),
/* harmony export */   IconDocument: () => (/* binding */ IconDocument),
/* harmony export */   IconDocumentAlt: () => (/* binding */ IconDocumentAlt),
/* harmony export */   IconDownload: () => (/* binding */ IconDownload),
/* harmony export */   IconDownloadSm: () => (/* binding */ IconDownloadSm),
/* harmony export */   IconDropbox: () => (/* binding */ IconDropbox),
/* harmony export */   IconEllipsisHorizontal: () => (/* binding */ IconEllipsisHorizontal),
/* harmony export */   IconEllipsisVertical: () => (/* binding */ IconEllipsisVertical),
/* harmony export */   IconEye: () => (/* binding */ IconEye),
/* harmony export */   IconEyeOff: () => (/* binding */ IconEyeOff),
/* harmony export */   IconEyeOffSm: () => (/* binding */ IconEyeOffSm),
/* harmony export */   IconEyeSm: () => (/* binding */ IconEyeSm),
/* harmony export */   IconEyes: () => (/* binding */ IconEyes),
/* harmony export */   IconFaceFrown: () => (/* binding */ IconFaceFrown),
/* harmony export */   IconFaceJoy: () => (/* binding */ IconFaceJoy),
/* harmony export */   IconFaceMindBlown: () => (/* binding */ IconFaceMindBlown),
/* harmony export */   IconFaceNeutral: () => (/* binding */ IconFaceNeutral),
/* harmony export */   IconFaceSad: () => (/* binding */ IconFaceSad),
/* harmony export */   IconFaceShocked: () => (/* binding */ IconFaceShocked),
/* harmony export */   IconFaceSmile: () => (/* binding */ IconFaceSmile),
/* harmony export */   IconFacebook: () => (/* binding */ IconFacebook),
/* harmony export */   IconFemale: () => (/* binding */ IconFemale),
/* harmony export */   IconFigma: () => (/* binding */ IconFigma),
/* harmony export */   IconFilter: () => (/* binding */ IconFilter),
/* harmony export */   IconFire: () => (/* binding */ IconFire),
/* harmony export */   IconFireSm: () => (/* binding */ IconFireSm),
/* harmony export */   IconFitness: () => (/* binding */ IconFitness),
/* harmony export */   IconFlag: () => (/* binding */ IconFlag),
/* harmony export */   IconFlagGermany: () => (/* binding */ IconFlagGermany),
/* harmony export */   IconFlagSm: () => (/* binding */ IconFlagSm),
/* harmony export */   IconFlagUnitedKingdom: () => (/* binding */ IconFlagUnitedKingdom),
/* harmony export */   IconFlagUnitedStates: () => (/* binding */ IconFlagUnitedStates),
/* harmony export */   IconFloat: () => (/* binding */ IconFloat),
/* harmony export */   IconFood: () => (/* binding */ IconFood),
/* harmony export */   IconFour: () => (/* binding */ IconFour),
/* harmony export */   IconFourLg: () => (/* binding */ IconFourLg),
/* harmony export */   IconGear: () => (/* binding */ IconGear),
/* harmony export */   IconGearSm: () => (/* binding */ IconGearSm),
/* harmony export */   IconGitHub: () => (/* binding */ IconGitHub),
/* harmony export */   IconGitLab: () => (/* binding */ IconGitLab),
/* harmony export */   IconGlobe: () => (/* binding */ IconGlobe),
/* harmony export */   IconGoogle: () => (/* binding */ IconGoogle),
/* harmony export */   IconGoogleDrive: () => (/* binding */ IconGoogleDrive),
/* harmony export */   IconGrabber: () => (/* binding */ IconGrabber),
/* harmony export */   IconGrabberVertical: () => (/* binding */ IconGrabberVertical),
/* harmony export */   IconGraph: () => (/* binding */ IconGraph),
/* harmony export */   IconGrid: () => (/* binding */ IconGrid),
/* harmony export */   IconHamburger: () => (/* binding */ IconHamburger),
/* harmony export */   IconHandNice: () => (/* binding */ IconHandNice),
/* harmony export */   IconHandPointRight: () => (/* binding */ IconHandPointRight),
/* harmony export */   IconHandRock: () => (/* binding */ IconHandRock),
/* harmony export */   IconHandsTogether: () => (/* binding */ IconHandsTogether),
/* harmony export */   IconHandshake: () => (/* binding */ IconHandshake),
/* harmony export */   IconHeader: () => (/* binding */ IconHeader),
/* harmony export */   IconHealth: () => (/* binding */ IconHealth),
/* harmony export */   IconHeart: () => (/* binding */ IconHeart),
/* harmony export */   IconHelp: () => (/* binding */ IconHelp),
/* harmony export */   IconHelpSm: () => (/* binding */ IconHelpSm),
/* harmony export */   IconHistory: () => (/* binding */ IconHistory),
/* harmony export */   IconHome: () => (/* binding */ IconHome),
/* harmony export */   IconHorizontalRule: () => (/* binding */ IconHorizontalRule),
/* harmony export */   IconHundred: () => (/* binding */ IconHundred),
/* harmony export */   IconImage: () => (/* binding */ IconImage),
/* harmony export */   IconInbox: () => (/* binding */ IconInbox),
/* harmony export */   IconInboxSm: () => (/* binding */ IconInboxSm),
/* harmony export */   IconIndent: () => (/* binding */ IconIndent),
/* harmony export */   IconIndustry: () => (/* binding */ IconIndustry),
/* harmony export */   IconIndustrySm: () => (/* binding */ IconIndustrySm),
/* harmony export */   IconInfo: () => (/* binding */ IconInfo),
/* harmony export */   IconInfoSm: () => (/* binding */ IconInfoSm),
/* harmony export */   IconInstagram: () => (/* binding */ IconInstagram),
/* harmony export */   IconInternational: () => (/* binding */ IconInternational),
/* harmony export */   IconInternationalSm: () => (/* binding */ IconInternationalSm),
/* harmony export */   IconItalic: () => (/* binding */ IconItalic),
/* harmony export */   IconJira: () => (/* binding */ IconJira),
/* harmony export */   IconKey: () => (/* binding */ IconKey),
/* harmony export */   IconKeySm: () => (/* binding */ IconKeySm),
/* harmony export */   IconLaptop: () => (/* binding */ IconLaptop),
/* harmony export */   IconLaunchPad: () => (/* binding */ IconLaunchPad),
/* harmony export */   IconLightbulb: () => (/* binding */ IconLightbulb),
/* harmony export */   IconLightbulbAlt: () => (/* binding */ IconLightbulbAlt),
/* harmony export */   IconLightbulbSm: () => (/* binding */ IconLightbulbSm),
/* harmony export */   IconLink: () => (/* binding */ IconLink),
/* harmony export */   IconLinkSm: () => (/* binding */ IconLinkSm),
/* harmony export */   IconLinkedIn: () => (/* binding */ IconLinkedIn),
/* harmony export */   IconLocation: () => (/* binding */ IconLocation),
/* harmony export */   IconLocationSm: () => (/* binding */ IconLocationSm),
/* harmony export */   IconLock: () => (/* binding */ IconLock),
/* harmony export */   IconLockSm: () => (/* binding */ IconLockSm),
/* harmony export */   IconMail: () => (/* binding */ IconMail),
/* harmony export */   IconMailOpen: () => (/* binding */ IconMailOpen),
/* harmony export */   IconMailOpenSm: () => (/* binding */ IconMailOpenSm),
/* harmony export */   IconMailSm: () => (/* binding */ IconMailSm),
/* harmony export */   IconMarkdown: () => (/* binding */ IconMarkdown),
/* harmony export */   IconMarkdownPreview: () => (/* binding */ IconMarkdownPreview),
/* harmony export */   IconMedal: () => (/* binding */ IconMedal),
/* harmony export */   IconMerge: () => (/* binding */ IconMerge),
/* harmony export */   IconMessage: () => (/* binding */ IconMessage),
/* harmony export */   IconMessageCompose: () => (/* binding */ IconMessageCompose),
/* harmony export */   IconMicroscope: () => (/* binding */ IconMicroscope),
/* harmony export */   IconMicrosoft: () => (/* binding */ IconMicrosoft),
/* harmony export */   IconMicrosoftTeams: () => (/* binding */ IconMicrosoftTeams),
/* harmony export */   IconMigrate: () => (/* binding */ IconMigrate),
/* harmony export */   IconMilestone: () => (/* binding */ IconMilestone),
/* harmony export */   IconMinus: () => (/* binding */ IconMinus),
/* harmony export */   IconMinusSm: () => (/* binding */ IconMinusSm),
/* harmony export */   IconModerator: () => (/* binding */ IconModerator),
/* harmony export */   IconModeratorSm: () => (/* binding */ IconModeratorSm),
/* harmony export */   IconMoney: () => (/* binding */ IconMoney),
/* harmony export */   IconNotInterested: () => (/* binding */ IconNotInterested),
/* harmony export */   IconNotInterestedSm: () => (/* binding */ IconNotInterestedSm),
/* harmony export */   IconOkta: () => (/* binding */ IconOkta),
/* harmony export */   IconOne: () => (/* binding */ IconOne),
/* harmony export */   IconOneLg: () => (/* binding */ IconOneLg),
/* harmony export */   IconOpenSource: () => (/* binding */ IconOpenSource),
/* harmony export */   IconOrderedList: () => (/* binding */ IconOrderedList),
/* harmony export */   IconOutdent: () => (/* binding */ IconOutdent),
/* harmony export */   IconPaperclip: () => (/* binding */ IconPaperclip),
/* harmony export */   IconPeak: () => (/* binding */ IconPeak),
/* harmony export */   IconPencil: () => (/* binding */ IconPencil),
/* harmony export */   IconPencilSm: () => (/* binding */ IconPencilSm),
/* harmony export */   IconPeople: () => (/* binding */ IconPeople),
/* harmony export */   IconPeopleSm: () => (/* binding */ IconPeopleSm),
/* harmony export */   IconPerson: () => (/* binding */ IconPerson),
/* harmony export */   IconPhone: () => (/* binding */ IconPhone),
/* harmony export */   IconPlaceholder: () => (/* binding */ IconPlaceholder),
/* harmony export */   IconPlaceholderLg: () => (/* binding */ IconPlaceholderLg),
/* harmony export */   IconPlaceholderSm: () => (/* binding */ IconPlaceholderSm),
/* harmony export */   IconPlay: () => (/* binding */ IconPlay),
/* harmony export */   IconPlus: () => (/* binding */ IconPlus),
/* harmony export */   IconPlusOne: () => (/* binding */ IconPlusOne),
/* harmony export */   IconPlusSm: () => (/* binding */ IconPlusSm),
/* harmony export */   IconPromoteDemote: () => (/* binding */ IconPromoteDemote),
/* harmony export */   IconPromoted: () => (/* binding */ IconPromoted),
/* harmony export */   IconPromotedSm: () => (/* binding */ IconPromotedSm),
/* harmony export */   IconQuestion: () => (/* binding */ IconQuestion),
/* harmony export */   IconQuestionEs: () => (/* binding */ IconQuestionEs),
/* harmony export */   IconQuestionPt: () => (/* binding */ IconQuestionPt),
/* harmony export */   IconQuestionRu: () => (/* binding */ IconQuestionRu),
/* harmony export */   IconQuote: () => (/* binding */ IconQuote),
/* harmony export */   IconRedact: () => (/* binding */ IconRedact),
/* harmony export */   IconRedactSm: () => (/* binding */ IconRedactSm),
/* harmony export */   IconRefresh: () => (/* binding */ IconRefresh),
/* harmony export */   IconRefreshSm: () => (/* binding */ IconRefreshSm),
/* harmony export */   IconRelocation: () => (/* binding */ IconRelocation),
/* harmony export */   IconRelocationSm: () => (/* binding */ IconRelocationSm),
/* harmony export */   IconRemote: () => (/* binding */ IconRemote),
/* harmony export */   IconRemoteSm: () => (/* binding */ IconRemoteSm),
/* harmony export */   IconReply: () => (/* binding */ IconReply),
/* harmony export */   IconReplySm: () => (/* binding */ IconReplySm),
/* harmony export */   IconReputation: () => (/* binding */ IconReputation),
/* harmony export */   IconReputationSm: () => (/* binding */ IconReputationSm),
/* harmony export */   IconReviewQueue: () => (/* binding */ IconReviewQueue),
/* harmony export */   IconRichText: () => (/* binding */ IconRichText),
/* harmony export */   IconRss: () => (/* binding */ IconRss),
/* harmony export */   IconRuler: () => (/* binding */ IconRuler),
/* harmony export */   IconSOS: () => (/* binding */ IconSOS),
/* harmony export */   IconSave: () => (/* binding */ IconSave),
/* harmony export */   IconSchool: () => (/* binding */ IconSchool),
/* harmony export */   IconSchoolSm: () => (/* binding */ IconSchoolSm),
/* harmony export */   IconScreenFull: () => (/* binding */ IconScreenFull),
/* harmony export */   IconScreenNormal: () => (/* binding */ IconScreenNormal),
/* harmony export */   IconSearch: () => (/* binding */ IconSearch),
/* harmony export */   IconSearchSm: () => (/* binding */ IconSearchSm),
/* harmony export */   IconShare: () => (/* binding */ IconShare),
/* harmony export */   IconShareAlt: () => (/* binding */ IconShareAlt),
/* harmony export */   IconShareSm: () => (/* binding */ IconShareSm),
/* harmony export */   IconShield: () => (/* binding */ IconShield),
/* harmony export */   IconShieldSm: () => (/* binding */ IconShieldSm),
/* harmony export */   IconShieldXSm: () => (/* binding */ IconShieldXSm),
/* harmony export */   IconSkull: () => (/* binding */ IconSkull),
/* harmony export */   IconSlack: () => (/* binding */ IconSlack),
/* harmony export */   IconSmartPhone: () => (/* binding */ IconSmartPhone),
/* harmony export */   IconSmileyAdd: () => (/* binding */ IconSmileyAdd),
/* harmony export */   IconSpeechBubble: () => (/* binding */ IconSpeechBubble),
/* harmony export */   IconSpeechBubbleError: () => (/* binding */ IconSpeechBubbleError),
/* harmony export */   IconSpeechBubbleQuestion: () => (/* binding */ IconSpeechBubbleQuestion),
/* harmony export */   IconSpeechBubbleRight: () => (/* binding */ IconSpeechBubbleRight),
/* harmony export */   IconSpeechBubbleRightSm: () => (/* binding */ IconSpeechBubbleRightSm),
/* harmony export */   IconSpeechBubbleRightStar: () => (/* binding */ IconSpeechBubbleRightStar),
/* harmony export */   IconSpeechBubbleRightStarSm: () => (/* binding */ IconSpeechBubbleRightStarSm),
/* harmony export */   IconSpeechBubbleSm: () => (/* binding */ IconSpeechBubbleSm),
/* harmony export */   IconStackExchange: () => (/* binding */ IconStackExchange),
/* harmony export */   IconStar: () => (/* binding */ IconStar),
/* harmony export */   IconStarHalf: () => (/* binding */ IconStarHalf),
/* harmony export */   IconStarHalfSm: () => (/* binding */ IconStarHalfSm),
/* harmony export */   IconStarSm: () => (/* binding */ IconStarSm),
/* harmony export */   IconStarVerified: () => (/* binding */ IconStarVerified),
/* harmony export */   IconStarVerifiedSm: () => (/* binding */ IconStarVerifiedSm),
/* harmony export */   IconStrikethrough: () => (/* binding */ IconStrikethrough),
/* harmony export */   IconStroller: () => (/* binding */ IconStroller),
/* harmony export */   IconSubway: () => (/* binding */ IconSubway),
/* harmony export */   IconSync: () => (/* binding */ IconSync),
/* harmony export */   IconSyncSm: () => (/* binding */ IconSyncSm),
/* harmony export */   IconTIL: () => (/* binding */ IconTIL),
/* harmony export */   IconTable: () => (/* binding */ IconTable),
/* harmony export */   IconTack: () => (/* binding */ IconTack),
/* harmony export */   IconTackSm: () => (/* binding */ IconTackSm),
/* harmony export */   IconTada: () => (/* binding */ IconTada),
/* harmony export */   IconTag: () => (/* binding */ IconTag),
/* harmony export */   IconTagSm: () => (/* binding */ IconTagSm),
/* harmony export */   IconTags: () => (/* binding */ IconTags),
/* harmony export */   IconTagsSm: () => (/* binding */ IconTagsSm),
/* harmony export */   IconTheme: () => (/* binding */ IconTheme),
/* harmony export */   IconThree: () => (/* binding */ IconThree),
/* harmony export */   IconThreeLg: () => (/* binding */ IconThreeLg),
/* harmony export */   IconThumbsDown: () => (/* binding */ IconThumbsDown),
/* harmony export */   IconThumbsUp: () => (/* binding */ IconThumbsUp),
/* harmony export */   IconTool: () => (/* binding */ IconTool),
/* harmony export */   IconTrash: () => (/* binding */ IconTrash),
/* harmony export */   IconTrashSm: () => (/* binding */ IconTrashSm),
/* harmony export */   IconTrendingDown: () => (/* binding */ IconTrendingDown),
/* harmony export */   IconTrendingNone: () => (/* binding */ IconTrendingNone),
/* harmony export */   IconTrendingUp: () => (/* binding */ IconTrendingUp),
/* harmony export */   IconTwitter: () => (/* binding */ IconTwitter),
/* harmony export */   IconTwo: () => (/* binding */ IconTwo),
/* harmony export */   IconTwoLg: () => (/* binding */ IconTwoLg),
/* harmony export */   IconUndo: () => (/* binding */ IconUndo),
/* harmony export */   IconUndoSm: () => (/* binding */ IconUndoSm),
/* harmony export */   IconUnflag: () => (/* binding */ IconUnflag),
/* harmony export */   IconUnflagSm: () => (/* binding */ IconUnflagSm),
/* harmony export */   IconUnlock: () => (/* binding */ IconUnlock),
/* harmony export */   IconUnlockSm: () => (/* binding */ IconUnlockSm),
/* harmony export */   IconUnorderedList: () => (/* binding */ IconUnorderedList),
/* harmony export */   IconUnsync: () => (/* binding */ IconUnsync),
/* harmony export */   IconUnsyncSm: () => (/* binding */ IconUnsyncSm),
/* harmony export */   IconUntrash: () => (/* binding */ IconUntrash),
/* harmony export */   IconUntrashSm: () => (/* binding */ IconUntrashSm),
/* harmony export */   IconVK: () => (/* binding */ IconVK),
/* harmony export */   IconVacation: () => (/* binding */ IconVacation),
/* harmony export */   IconWand: () => (/* binding */ IconWand),
/* harmony export */   IconWave: () => (/* binding */ IconWave),
/* harmony export */   IconYandex: () => (/* binding */ IconYandex)
/* harmony export */ });
const IconAccessibility = "<svg aria-hidden=\"true\" class=\"svg-icon iconAccessibility\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16.5 5c-2.61.7-4.67 1-7.5 1s-4.89-.3-7.5-1L1 7c1.86.5 3 .83 5 1v9h2v-6h2v6h2V8c2-.17 3.14-.5 5-1l-.5-2ZM9 5a2 2 0 0 0 2-2 2 2 0 0 0-2-2 2 2 0 0 0-2 2c0 1.1.9 2 2 2Z\"/></svg>";
const IconAchievements = "<svg aria-hidden=\"true\" class=\"svg-icon iconAchievements\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 2V1H3v1H0v4c0 1.6 1.4 3 3 3v1c.4 1.5 3 2.6 5 3v2H5s-1 1.5-1 2h10c0-.4-1-2-1-2h-3v-2c2-.4 4.6-1.5 5-3V9c1.6-.2 3-1.4 3-3V2h-3ZM3 7c-.5 0-1-.5-1-1V4h1v3Zm8.4 2.5L9 8 6.6 9.4l1-2.7L5 5h3l1-2.7L10 5h2.8l-2.3 1.8 1 2.7h-.1ZM16 6c0 .5-.5 1-1 1V4h1v2Z\"/></svg>";
const IconAchievementsLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconAchievementsLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M29 4H7v2H3a1 1 0 0 0-1 1v6a5 5 0 0 0 5 5 8 8 0 0 0 8 8h1v3h-3c-1.66 0-4 1.34-4 3v1h18v-1c0-1.66-2.34-3-4-3h-3v-3h1a8 8 0 0 0 8-8 5 5 0 0 0 5-5V7a1 1 0 0 0-1-1h-4V4Zm3 9a3 3 0 0 1-3 3V8h3v5ZM7 16a3 3 0 0 1-3-3V8h3v8Zm11.38-8.33 1.33 4.08c.05.17.2.28.38.28h4.29c.38 0 .55.5.23.72l-3.47 2.52a.4.4 0 0 0-.14.45l1.32 4.08a.4.4 0 0 1-.61.45l-3.47-2.52a.4.4 0 0 0-.48 0l-3.47 2.52a.4.4 0 0 1-.61-.45L15 15.72a.4.4 0 0 0-.14-.45l-3.47-2.52a.4.4 0 0 1 .23-.72h4.3a.4.4 0 0 0 .37-.28l1.33-4.08a.4.4 0 0 1 .76 0Z\"/></svg>";
const IconAchievementsSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconAchievementsSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M11 2V1H3v1H0v3c0 1.6 1.4 3 3 3 0 0 .5 2 3 2v1H4s-1 1.5-1 2h8c0-.4-1-2-1-2H8v-1c2.5 0 3-2 3-2 1.6-.2 3-1.4 3-3V2h-3ZM3 6c-.5 0-1-.5-1-1V4h1v2Zm9-1c0 .5-.5 1-1 1V4h1v1ZM7 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z\"/></svg>";
const IconAlert = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlert\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7.95 2.71c.58-.94 1.52-.94 2.1 0l7.69 12.58c.58.94.15 1.71-.96 1.71H1.22C.1 17-.32 16.23.26 15.29L7.95 2.71ZM8 6v5h2V6H8Zm0 7v2h2v-2H8Z\"/></svg>";
const IconAlertCircle = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlertCircle\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8ZM8 4v6h2V4H8Zm0 8v2h2v-2H8Z\"/></svg>";
const IconAlertCircleSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlertCircleSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 13c-3.23 0-6-2.74-6-6 0-3.23 2.74-6 6-6 3.27 0 6 2.73 6 6s-2.73 6-6 6ZM6 3v5h2V3H6Zm0 6v2h2V9H6Z\"/></svg>";
const IconAlertSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconAlertSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5.97 1.7c.57-.94 1.5-.93 2.05 0l5.73 9.59c.57.94.12 1.71-.98 1.71H1.22c-1.1 0-1.54-.77-.97-1.71L5.97 1.7ZM6 4v5h2V4H6Zm0 6v2h2v-2H6Z\"/></svg>";
const IconAnswer = "<svg aria-hidden=\"true\" class=\"svg-icon iconAnswer\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14 15H3c-1.09 0-2-.91-2-2V4c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v14l-3-3Zm-1.02-3L9.82 4H8.14l-3.06 8h1.68l.65-1.79h3.15l.69 1.79h1.73Zm-2.93-3.12H7.9l1.06-2.92 1.09 2.92Z\"/></svg>";
const IconAnswerEs = "<svg aria-hidden=\"true\" class=\"svg-icon iconAnswerEs\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.02 7.73c.42 0 .74-.1.97-.31.22-.21.34-.5.34-.88s-.11-.67-.33-.9c-.21-.2-.54-.32-.99-.32H7.7v2.41h1.33ZM3 15h11l3 3V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v9c0 1.09.91 2 2 2Zm4.69-5.93v2.95H6.03V3.98h2.98c.95 0 1.69.21 2.2.64.52.42.77 1.02.77 1.79 0 .55-.12 1-.36 1.37-.23.37-.59.66-1.07.88l1.74 3.28v.08H10.5L9 9.07H7.68Z\"/></svg>";
const IconAnswerPt = "<svg aria-hidden=\"true\" class=\"svg-icon iconAnswerPt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.02 7.73c.42 0 .74-.1.97-.31.22-.21.34-.5.34-.88s-.11-.67-.33-.9c-.21-.2-.54-.32-.99-.32H7.7v2.41h1.33ZM3 15h11l3 3V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v9c0 1.09.91 2 2 2Zm4.69-5.93v2.95H6.03V3.98h2.98c.95 0 1.69.21 2.2.64.52.42.77 1.02.77 1.79 0 .55-.12 1-.36 1.37-.23.37-.59.66-1.07.88l1.74 3.28v.08H10.5L9 9.07H7.68Z\"/></svg>";
const IconAnswerRu = "<svg aria-hidden=\"true\" class=\"svg-icon iconAnswerRu\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.78 5.9c-.3-.44-.73-.66-1.3-.66-.55 0-.97.22-1.28.65-.3.43-.45 1.06-.45 1.9v.4c0 .81.15 1.45.45 1.9.3.45.73.68 1.3.68.56 0 .98-.22 1.28-.65.3-.44.45-1.08.45-1.91v-.4c0-.84-.15-1.48-.45-1.91ZM3 15h11l3 3V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v9c0 1.09.91 2 2 2Zm8.5-4.74a3.15 3.15 0 0 1-3 1.87 3.2 3.2 0 0 1-3-1.85 4.73 4.73 0 0 1-.43-2.05v-.4c0-.8.14-1.49.42-2.09a3.19 3.19 0 0 1 3-1.87 3.24 3.24 0 0 1 2.99 1.87c.29.6.43 1.3.43 2.08v.36c0 .8-.14 1.49-.42 2.08Z\"/></svg>";
const IconApprove = "<svg aria-hidden=\"true\" class=\"svg-icon iconApprove\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#5EBA7D\" d=\"M9 17A8 8 0 1 0 9 1a8 8 0 0 0 0 16Zm.25-3.45a1 1 0 0 1-.73.5c-.32 0-.62-.06-.85-.29l-3-3a1 1 0 0 1 1.44-1.38l2.05 2 3.56-6.28c.27-.47.89-.65 1.36-.38.47.27.65.89.38 1.36l-4.21 7.47Z\"/></svg>";
const IconArchive = "<svg aria-hidden=\"true\" class=\"svg-icon iconArchive\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2H3ZM2 5h14v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5Zm4 3a1 1 0 0 0 1 1h4a1 1 0 1 0 0-2H7a1 1 0 0 0-1 1Z\"/></svg>";
const IconArchiveAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconArchiveAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1a2 2 0 0 0-2 2v1h16V3a2 2 0 0 0-2-2H3ZM2 5v10c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V5h-2v10H4V5H2Zm5 2a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H7Z\"/></svg>";
const IconArchiveAltSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArchiveAltSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M0 3c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2H0Zm1 1v7c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V4h-2v7H3V4H1Zm4 2a1 1 0 0 0 0 2h4a1 1 0 0 0 0-2H5Z\"/></svg>";
const IconArchiveSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArchiveSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M1 3c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2H1Zm11 1H2v7c0 1.1.9 2 2 2h6a2 2 0 0 0 2-2V4ZM4.5 6h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1Z\"/></svg>";
const IconArrowDoubleDown = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDoubleDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m16.01 9.43-7 7-7-7 1.41-1.41 5.6 5.59L14.6 8l1.41 1.42v.01Zm0-5-7 7-7-7 1.41-1.41 5.6 5.59L14.6 3l1.41 1.42v.01Z\"/></svg>";
const IconArrowDoubleUp = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDoubleUp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m16.01 13.62-1.4 1.4L9 9.45l-5.59 5.59-1.4-1.41 7-7 7 7v-.01Zm0-5-1.4 1.4L9 4.45l-5.59 5.59-1.4-1.41 7-7 7 7v-.01Z\"/></svg>";
const IconArrowDown = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 6h16l-8 8-8-8Z\"/></svg>";
const IconArrowDownAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDownAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m16.01 7.43-1.4-1.41L9 11.6 3.42 6l-1.4 1.42 7 7 7-7Z\"/></svg>";
const IconArrowDownLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDownLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M2 11h32L18 27 2 11Z\"/></svg>";
const IconArrowDownLong = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDownLong\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1a1 1 0 0 1 1 1v11.93l3.38-2.7a1 1 0 0 1 1.24 1.56l-5 4a1 1 0 0 1-1.24 0l-5-4a1 1 0 1 1 1.24-1.56L8 13.93V2a1 1 0 0 1 1-1Z\"/></svg>";
const IconArrowDownSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowDownSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M3 5h8L7 9 3 5Z\"/></svg>";
const IconArrowLeft = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowLeft\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M12 17V1L4 9l8 8Z\"/></svg>";
const IconArrowLeftAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowLeftAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10.58 16 12 14.59 6.4 9 12 3.41 10.57 2l-7 7 7 7Z\"/></svg>";
const IconArrowLeftAltSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowLeftAltSm\" width=\"13\" height=\"14\"  viewBox=\"0 0 13 14\"><path  d=\"M9.24 9.38 8 10.62 4.38 7 8 3.38l1.24 1.24L6.86 7l2.38 2.38Z\"/></svg>";
const IconArrowLeftSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowLeftSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M9 11V3L5 7l4 4Z\"/></svg>";
const IconArrowRight = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowRight\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 17V1l8 8-8 8Z\"/></svg>";
const IconArrowRightAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowRightAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M6.41 2 5 3.41 10.59 9 5 14.59 6.41 16l7-7-7-7Z\"/></svg>";
const IconArrowRightAltSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowRightAltSm\" width=\"13\" height=\"14\"  viewBox=\"0 0 13 14\"><path  d=\"m4.38 4.62 1.24-1.24L9.24 7l-3.62 3.62-1.24-1.24L6.76 7 4.38 4.62Z\"/></svg>";
const IconArrowRightSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowRightSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5 11V3l4 4-4 4Z\"/></svg>";
const IconArrowUp = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 12h16L9 4l-8 8Z\"/></svg>";
const IconArrowUpAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m16.01 10.62-1.4 1.4L9 6.45l-5.59 5.59-1.4-1.41 7-7 7 7Z\"/></svg>";
const IconArrowUpDown = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m9 1 7 7H2l7-7Zm0 16 7-7H2l7 7Z\"/></svg>";
const IconArrowUpDownSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpDownSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m7 2 4 4H3l4-4Zm0 10 4-4H3l4 4Z\"/></svg>";
const IconArrowUpLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M2 25h32L18 9 2 25Z\"/></svg>";
const IconArrowUpLong = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpLong\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 17a1 1 0 0 1-1-1V4.08l-3.38 2.7a1 1 0 0 1-1.24-1.56l5-4a1 1 0 0 1 1.24 0l5 4a1 1 0 1 1-1.24 1.56L10 4.08V16a1 1 0 0 1-1 1Z\"/></svg>";
const IconArrowUpSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconArrowUpSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M3 9h8L7 5 3 9Z\"/></svg>";
const IconAsterisk = "<svg aria-hidden=\"true\" class=\"svg-icon iconAsterisk\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M2.32 11.83 6.95 9 2.32 6.17c-.3-.15-.41-.5-.24-.77l.5-.8a.65.65 0 0 1 .85-.2l4.55 2.98-.1-5.8c0-.32.28-.58.62-.58h1c.34 0 .62.26.61.57l-.09 5.8 4.55-2.97c.3-.16.68-.07.85.2l.5.8c.17.27.06.62-.24.77L11.05 9l4.63 2.83c.3.15.41.5.24.77l-.5.8a.65.65 0 0 1-.85.2l-4.55-2.98.1 5.8c0 .32-.28.58-.62.58h-1c-.34 0-.62-.26-.61-.57l.09-5.8-4.55 2.97a.65.65 0 0 1-.85-.2l-.5-.8c-.17-.27-.06-.62.24-.77Z\"/></svg>";
const IconAsteriskSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconAsteriskSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M1.52 9.03 4.95 7 1.52 4.97c-.3-.15-.41-.5-.24-.77l.5-.8a.65.65 0 0 1 .85-.2l3.35 2.18-.1-3.8c0-.32.28-.58.62-.58h1c.34 0 .62.26.61.57l-.09 3.8 3.35-2.17c.3-.16.68-.07.85.2l.5.8c.17.27.06.62-.24.77L9.05 7l3.43 2.03c.3.15.41.5.24.77l-.5.8a.65.65 0 0 1-.85.2L8.02 8.62l.1 3.8c0 .32-.28.58-.62.58h-1c-.34 0-.62-.26-.61-.57l.09-3.8-3.35 2.17a.65.65 0 0 1-.85-.2l-.5-.8c-.17-.27-.06-.62.24-.77Z\"/></svg>";
const IconBadge = "<svg aria-hidden=\"true\" class=\"svg-icon iconBadge\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 4a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H3Zm3 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z\"/></svg>";
const IconBadgeSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconBadgeSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 4c-.55 0-1 .52-1 1.17v4.66c0 .65.45 1.17 1 1.17h10c.55 0 1-.52 1-1.17V5.17C13 4.52 12.55 4 12 4H2Zm2.5 5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z\"/></svg>";
const IconBalloon = "<svg aria-hidden=\"true\" class=\"svg-icon iconBalloon\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  fill-opacity=\".4\" d=\"M10.26 17h-.2a3.61 3.61 0 0 1-3.61-3.61.5.5 0 1 1 1 0A2.61 2.61 0 0 0 10.06 16h.2a2.61 2.61 0 0 0 2.61-2.82 3.62 3.62 0 0 1 3.61-3.4.5.5 0 0 1 .5.5.51.51 0 0 1-.5.5 2.61 2.61 0 0 0-2.61 2.61c0 .07-.02.14-.05.2A3.61 3.61 0 0 1 10.26 17Z\"/><path fill=\"#F75D37\" d=\"M6.94 1.23c2.69 0 4.87 2.8 4.87 5.49 0 2.48-1.81 5.95-4.21 6.48.03.4-.24.71-.63.71-.36 0-.68-.35-.63-.7-2.41-.49-4.28-4-4.28-6.49 0-2.72 2.19-5.49 4.88-5.49Zm-.09 2.62a.5.5 0 1 0-.7-.7l-2 2a.5.5 0 1 0 .7.7l2-2Z\"/></svg>";
const IconBell = "<svg aria-hidden=\"true\" class=\"svg-icon iconBell\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 13v1H2v-1l.73-.58c.77-.77.81-3.55 1.19-5.42C4.69 3.23 8 2 8 2a1 1 0 0 1 1-1 1 1 0 0 1 1 1s3.39 1.23 4.16 5c.38 1.88.42 4.66 1.19 5.42l.66.58H16Zm-7 4a2 2 0 0 0 2-2H7a2 2 0 0 0 2 2Z\"/></svg>";
const IconBellSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconBellSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 1a1 1 0 0 0-1 1C3.65 3.17 3.37 5.33 3.14 7.15 2.97 8.42 2.83 9.53 2 10v1h10v-1c-.83-.47-.97-1.58-1.14-2.85C10.63 5.33 10.35 3.17 8 2a1 1 0 0 0-1-1Zm1 12a1 1 0 0 0 1-1H5a1 1 0 0 0 1 1h2Z\"/></svg>";
const IconBold = "<svg aria-hidden=\"true\" class=\"svg-icon iconBold\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M13 6c0-1.5-1.57-3-3.5-3H4v12h6.25c1.79 0 3.25-1.71 3.25-3.5 0-1.3-.9-2.48-2-3 .83-.58 1.5-1 1.5-2.5ZM6.5 5H9a1.5 1.5 0 0 1 0 3H6.5V5Zm3 8h-3v-3h3a1.5 1.5 0 1 1 0 3Z\"/></svg>";
const IconBook = "<svg aria-hidden=\"true\" class=\"svg-icon iconBook\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M2 3c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a1 1 0 1 0 0 2h1v-1h4v1h5a2 2 0 0 0 2-2v1a2 2 0 0 1-2 2H9v2l-2-1-2 1v-2H4a2 2 0 0 1-2-2V3Z\"/></svg>";
const IconBookmark = "<svg aria-hidden=\"true\" class=\"svg-icon iconBookmark\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 17V3c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v14l-6-4-6 4Z\"/></svg>";
const IconBookmarkAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconBookmarkAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m9 10.6 4 2.66V3H5v10.26l4-2.66ZM3 17V3c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v14l-6-4-6 4Z\"/></svg>";
const IconBriefcase = "<svg aria-hidden=\"true\" class=\"svg-icon iconBriefcase\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v1h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V7c0-1.1.9-2 2-2h1V4Zm7 0H6v1h6V4Z\"/></svg>";
const IconBriefcaseSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconBriefcaseSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M4 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h.5c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5h-7A1.5 1.5 0 0 1 2 10.5v-5C2 4.67 2.67 4 3.5 4H4V3Zm5 1V3H5v1h4Z\"/></svg>";
const IconBullhorn = "<svg aria-hidden=\"true\" class=\"svg-icon iconBullhorn\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#F7AA6D\" d=\"M16 1a1 1 0 0 0-1 1v.38L5.3 6A2 2 0 0 0 4 7.9v2.22a2 2 0 0 0 1 1.74v1.65a3.5 3.5 0 0 0 6.87.95L15 15.63V16a1 1 0 1 0 2 0V2a1 1 0 0 0-1-1ZM6.6 12.47l3.76 1.42a1.9 1.9 0 0 1-3.76-.39v-1.03Z\"/><path fill=\"#C02D2E\" d=\"M2 6a1 1 0 0 0-1 1v4a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Z\"/></svg>";
const IconBullhornSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconBullhornSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path fill=\"#F7AA6D\" d=\"M12 1a1 1 0 0 0-1 1v.47l-6.95 2.2A1.5 1.5 0 0 0 3 6.1v1.8c0 .64.4 1.2 1 1.41v1.19a2.5 2.5 0 0 0 4.97.39l2.03.64V12a1 1 0 1 0 2 0V2a1 1 0 0 0-1-1ZM5 9.63l3 .95a1.5 1.5 0 0 1-3-.08v-.87Z\"/><path fill=\"#C02D2E\" d=\"M1 5.5a.5.5 0 0 1 1 0v3a.5.5 0 0 1-1 0v-3Z\"/></svg>";
const IconCake = "<svg aria-hidden=\"true\" class=\"svg-icon iconCake\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 4.5a1.5 1.5 0 0 0 1.28-2.27L9 0 7.72 2.23c-.14.22-.22.48-.22.77 0 .83.68 1.5 1.5 1.5Zm3.45 7.5-.8-.81-.81.8c-.98.98-2.69.98-3.67 0l-.8-.8-.82.8c-.49.49-1.14.76-1.83.76-.55 0-1.3-.17-1.72-.46V15c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2v-2.7c-.42.28-1.17.45-1.72.45-.69 0-1.34-.27-1.83-.76Zm1.3-5H10V5H8v2H4.25C3 7 2 8 2 9.25v.9c0 .81.91 1.47 1.72 1.47.39 0 .77-.14 1.03-.42l1.61-1.6 1.6 1.6a1.5 1.5 0 0 0 2.08 0l1.6-1.6 1.6 1.6c.28.28.64.43 1.03.43.81 0 1.73-.67 1.73-1.48v-.9C16 8.01 15 7 13.75 7Z\"/></svg>";
const IconCalendar = "<svg aria-hidden=\"true\" class=\"svg-icon iconCalendar\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14 2h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h1V0h2v2h6V0h2v2ZM3 6v9h12V6H3Zm2 2h2v2H5V8Zm0 3h2v2H5v-2Zm3 0h2v2H8v-2Zm3 0h2v2h-2v-2Zm0-3h2v2h-2V8ZM8 8h2v2H8V8Z\"/></svg>";
const IconChair = "<svg aria-hidden=\"true\" class=\"svg-icon iconChair\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10 8h2.87c.66 0 1.17-.47 1.13-1.04l-.31-5.05c-.08-.5-.55-.91-1.17-.91H5.45c-.59 0-1.1.4-1.14.9l-.3 5.06C3.95 7.53 4.46 8 5.12 8H8v1H4.56C3.71 9 3 9.46 3 10s.71 1 1.56 1H8v2.1c-.96.2-1.88.67-2.65 1.41a1 1 0 1 0 1.03.52 4.67 4.67 0 0 1 5.23 0 1 1 0 1 0 1.05-.52A5.26 5.26 0 0 0 10 13.1V11h3.44c.85 0 1.56-.43 1.56-1 0-.54-.71-1-1.56-1H10V8Z\"/></svg>";
const IconCheckmark = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmark\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 4.41 14.59 3 6 11.59 2.41 8 1 9.41l5 5 10-10Z\"/></svg>";
const IconCheckmarkLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmarkLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"m6 14 8 8L30 6v8L14 30l-8-8v-8Z\"/></svg>";
const IconCheckmarkSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmarkSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M13 3.41 11.59 2 5 8.59 2.41 6 1 7.41l4 4 8-8Z\"/></svg>";
const IconCheckmarkVerified = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmarkVerified\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.85.9a1.13 1.13 0 0 0-1.7 0l-.51.58c-.3.35-.79.48-1.23.33l-.72-.25a1.13 1.13 0 0 0-1.48.85l-.15.76c-.09.45-.44.8-.9.9l-.75.14c-.67.13-1.07.83-.85 1.48l.25.72c.15.44.02.92-.33 1.23l-.58.5a1.13 1.13 0 0 0 0 1.71l.58.5c.35.3.48.8.33 1.23l-.25.72c-.22.65.18 1.35.85 1.48l.76.15c.45.1.8.44.9.9l.14.75c.13.67.83 1.08 1.48.85l.72-.24c.44-.15.92-.02 1.23.32l.5.58c.45.52 1.26.52 1.71 0l.5-.58c.3-.34.8-.47 1.23-.32l.72.24c.65.23 1.35-.18 1.48-.85l.15-.75c.1-.46.44-.8.9-.9l.75-.15c.67-.13 1.08-.83.85-1.48l-.24-.72c-.15-.44-.02-.92.32-1.22l.58-.5c.52-.46.52-1.27 0-1.72l-.58-.5c-.34-.3-.47-.79-.32-1.23l.24-.72a1.13 1.13 0 0 0-.85-1.48l-.75-.15c-.46-.09-.8-.44-.9-.9l-.15-.75a1.13 1.13 0 0 0-1.48-.85l-.72.25c-.44.15-.92.02-1.22-.33L9.86.9ZM12.6 5 14 6.41l-7 7-3-3L5.41 9 7 10.59 12.59 5Z\"/></svg>";
const IconCheckmarkVerifiedSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconCheckmarkVerifiedSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7.82.84a1.16 1.16 0 0 0-1.64 0l-.9.88c-.2.21-.5.33-.8.34H3.22c-.64 0-1.15.52-1.16 1.16v1.26c0 .3-.13.6-.34.8l-.88.9a1.16 1.16 0 0 0 0 1.64l.88.9c.21.2.33.5.34.8v1.26c0 .64.52 1.15 1.16 1.15l1.26.01c.3 0 .6.12.8.34l.9.88c.45.45 1.18.45 1.64 0l.9-.88c.2-.22.5-.34.8-.34h1.26a1.16 1.16 0 0 0 1.15-1.16l.01-1.26c0-.3.12-.6.34-.8l.88-.9c.45-.46.45-1.19 0-1.64l-.88-.9c-.22-.2-.34-.5-.34-.8V3.22a1.17 1.17 0 0 0-1.16-1.16H9.52c-.3 0-.6-.13-.8-.34l-.9-.88Zm-1.9 9.44L3.28 7.65l1.27-1.27L5.9 7.74l3.81-3.81L11 5.2l-5.1 5.08Z\"/></svg>";
const IconClap = "<svg aria-hidden=\"true\" class=\"svg-icon iconClap\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M12.5 3a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 1 0v2a.5.5 0 0 1-.5.5ZM14 4.5c0-.28.22-.5.5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5Zm-.35-1.85a.5.5 0 0 0 .7.7l1.5-1.5a.5.5 0 0 0-.7-.7l-1.5 1.5Z\" opacity=\".4\"/><path fill=\"#FFC166\" d=\"M2.58 8.69c.33.45.73.8 1.15 1.06L5.8 6c.17-.29.4-.56.68-.74.44-.28.99-.26 1.4-.02h.02c.32-.04 1.6-.06 2.73-.08a41.5 41.5 0 0 0 1.77-.04c.49-.04.68-.3.65-.75-.02-.46-.44-.65-.9-.6l-6.76.36c-.05.01-.1-.07-.07-.11l1.03-1.36c.3-.4.16-.97-.21-1.26a.87.87 0 0 0-1.25.13C4.3 2.26 3.74 3 3.19 3.76c-1.08 1.47-1.83 3.29-.61 4.93Zm10.1.41h-.75c.11-.23.18-.47.17-.73 0-.19-.06-.37-.15-.53l.73.01c.41.03.68.35.68.6 0 .24-.23.66-.68.65ZM10.9 7.15l2.6-.02a.66.66 0 0 0 .6-.77c-.08-.41-.47-.64-.87-.64l-2.66.04c.35.37.48.9.33 1.4ZM5.52 17c-2.04 0-3.15-1.78-3.7-3.52a53.2 53.2 0 0 1-.77-2.7c-.15-.46.14-.94.63-1.07.47-.13 1 .1 1.15.58l.47 1.63c.02.06.11.06.14 0l3.01-5.54c.24-.4.6-.73.97-.54.4.2.47.54.25 1.02-.08.18-.33.66-.63 1.22-.51.96-1.15 2.16-1.26 2.49-.01.04-.03.21.08.29.1.07.28-.06.3-.09l2.71-4.14c.2-.34.63-.66.98-.48.34.18.46.6.26.93L7.37 11.2c-.02.03-.14.32.05.43.19.12.4-.04.42-.07L10.2 8.3c.27-.31.51-.51.9-.32.34.18.33.61.06.97-.45.6-.8 1.13-1.16 1.64-.4.58-.8 1.15-1.28 1.8-.02.03-.13.23 0 .37.12.13.27 0 .27 0l1.9-2.3c.23-.3.48-.42.8-.25.28.14.22.58.09.8-.53.91-1.2 1.72-1.86 2.53C8.75 14.94 7.55 17 5.52 17Z\"/></svg>";
const IconClear = "<svg aria-hidden=\"true\" class=\"svg-icon iconClear\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 4.41 13.59 3 9 7.59 4.41 3 3 4.41 7.59 9 3 13.59 4.41 15 9 10.41 13.59 15 15 13.59 10.41 9 15 4.41Z\"/></svg>";
const IconClearSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconClearSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M12 3.41 10.59 2 7 5.59 3.41 2 2 3.41 5.59 7 2 10.59 3.41 12 7 8.41 10.59 12 12 10.59 8.41 7 12 3.41Z\"/></svg>";
const IconClock = "<svg aria-hidden=\"true\" class=\"svg-icon iconClock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8Zm0-2c3.27 0 6-2.73 6-6s-2.73-6-6-6-6 2.73-6 6 2.73 6 6 6ZM8 5h1.01L9 9.36l3.22 2.1-.6.93L8 10V5Z\"/></svg>";
const IconCode = "<svg aria-hidden=\"true\" class=\"svg-icon iconCode\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M8 4.41 6.59 3l-6 6 6 6L8 13.59 3.41 9 8 4.41Zm2 0L11.41 3l6 6-6 6L10 13.59 14.59 9 10 4.41Z\"/></svg>";
const IconCodeSnippet = "<svg aria-hidden=\"true\" class=\"svg-icon iconCodeSnippet\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 2c0-1.1.9-2 2-2h11a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V2Zm7.06 2.91L8.65 3.64 4.8 7.5l3.97 3.95 1.29-1.36-2.6-2.59 2.6-2.59Zm2.17-1.24-1.27 1.24 2.59 2.59-2.6 2.59 1.28 1.27L16.1 7.5l-3.86-3.83Z\"/><path  d=\"M2 3a2 2 0 0 0-2 2v10a3 3 0 0 0 3 3h10a2 2 0 0 0 2-2H4a2 2 0 0 1-2-2V3Z\" opacity=\".4\"/></svg>";
const IconCodeblock = "<svg aria-hidden=\"true\" class=\"svg-icon iconCodeblock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 3c0-1.1.9-2 2-2h10l4 4v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3Zm9.71 2-1.4 1.41L11.88 9 9.3 11.59 10.71 13l4-4-4-4Zm-2 1.41L7.31 5l-4 4 4 4 1.4-1.41L6.12 9l2.6-2.59Z\"/></svg>";
const IconCodeblockAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconCodeblockAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.26 6.41 10.49 5 14 9l-3.5 4-1.24-1.41L11.53 9 9.26 6.41ZM7.5 5l1.24 1.41L6.47 9l2.27 2.59L7.51 13 4 9l3.5-4ZM3 1h10l4 4v10a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2Zm0 2v12h12V5.83L12.17 3H3Z\"/></svg>";
const IconCoins = "<svg aria-hidden=\"true\" class=\"svg-icon iconCoins\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M17 6.29c0-.29-.2-.41-.36-.29a6.15 6.15 0 0 1-6.28.01c-.16-.12-.36.03-.36.29v1.07C10 8.14 11.5 9 13.5 9S17 8.14 17 7.37V6.29Zm.03 4c0-.29-.2-.41-.36-.29a6.26 6.26 0 0 1-6.31-.02c-.16-.12-.36.04-.36.29v1.07c0 .77 1.53 1.66 3.53 1.66 2 0 3.5-.87 3.5-1.64v-1.07ZM16.67 14c.16-.11.36 0 .36.29v1.07c0 .77-1.5 1.64-3.5 1.64S10 16.15 10 15.38v-1.07c0-.25.2-.4.36-.29a6.1 6.1 0 0 0 6.31-.02ZM8 14.29c0-.29-.2-.4-.36-.29a6.06 6.06 0 0 1-6.28.02c-.16-.11-.36.04-.36.29v1.07C1 16.15 2.5 17 4.5 17S8 16.15 8 15.36v-1.07Z\"/><path fill=\"#FFA836\" d=\"M13.49 1.15c-2 0-3.49.98-3.49 1.85 0 .84 1.5 1.84 3.5 1.84S17 3.84 17 3c0-.87-1.51-1.85-3.51-1.85Zm-9 8.01c-2 0-3.49.97-3.49 1.84 0 .87 1.47 1.87 3.47 1.87S8 11.87 8 11c0-.87-1.51-1.84-3.51-1.84Z\"/></svg>";
const IconCollection = "<svg aria-hidden=\"true\" class=\"svg-icon iconCollection\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 3a2 2 0 0 0-2 2v7c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm0 2.5c0-.28.22-.5.5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5ZM5.5 8h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1 0-1ZM5 11.5c0-.28.22-.5.5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5Z\"/><path  d=\"M15.09 15H4.74A2.75 2.75 0 0 1 2 12.23V4.9c-.61.59-1 1.42-1 2.34v5.5C1 14.54 2.45 16 4.24 16h8.5c.92 0 1.76-.38 2.35-1Z\" opacity=\".4\"/></svg>";
const IconColumns = "<svg aria-hidden=\"true\" class=\"svg-icon iconColumns\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 16h4V2H1v14Zm6 0h4V2H7v14Zm6 0V2h4v14h-4Z\"/></svg>";
const IconComputer = "<svg aria-hidden=\"true\" class=\"svg-icon iconComputer\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 4c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2h-4l1 2v1H6v-1l1-2H3a2 2 0 0 1-2-2V4Zm2 7h12V4H3v7Z\"/></svg>";
const IconConfluence = "<svg aria-hidden=\"true\" class=\"svg-icon iconConfluence\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"url(#Confluencea)\" d=\"m1.58 12.74-.5.83a.5.5 0 0 0 .16.7l3.31 2.03a.5.5 0 0 0 .7-.17l.5-.82c1.3-2.17 2.62-1.9 5-.77l3.28 1.56a.51.51 0 0 0 .69-.25l1.57-3.56a.5.5 0 0 0-.25-.67 399 399 0 0 1-3.3-1.57C8.26 7.88 4.47 8.02 1.57 12.74Z\"/><path fill=\"url(#Confluenceb)\" d=\"m16.42 4.65.5-.83a.5.5 0 0 0-.16-.7L13.45 1.1a.5.5 0 0 0-.73.16l-.49.82c-1.3 2.17-2.63 1.9-5 .77L3.96 1.28a.5.5 0 0 0-.69.26L1.7 5.1a.5.5 0 0 0 .25.67c.7.32 2.07.97 3.3 1.57 4.48 2.17 8.27 2.02 11.17-2.7Z\"/><defs><linearGradient id=\"Confluencea\" x1=\"16.2\" x2=\"6.19\" y1=\"17.34\" y2=\"11.58\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#0050D3\"/><stop offset=\".94\" stop-color=\"#007FFC\"/><stop offset=\"1\" stop-color=\"#0082FF\"/></linearGradient><linearGradient id=\"Confluenceb\" x1=\"1.79\" x2=\"11.81\" y1=\".02\" y2=\"5.77\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#0050D3\"/><stop offset=\".94\" stop-color=\"#007FFC\"/><stop offset=\"1\" stop-color=\"#0082FF\"/></linearGradient></defs></svg>";
const IconCopy = "<svg aria-hidden=\"true\" class=\"svg-icon iconCopy\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M5 6c0-1.09.91-2 2-2h4.5L15 7.5V15c0 1.09-.91 2-2 2H7c-1.09 0-2-.91-2-2V6Zm6-1.25V8h3.25L11 4.75Z\"/><path  d=\"M10 1a2 2 0 0 1 2 2H6a2 2 0 0 0-2 2v9a2 2 0 0 1-2-2V4a3 3 0 0 1 3-3h5Z\" opacity=\".4\"/></svg>";
const IconCreditCard = "<svg aria-hidden=\"true\" class=\"svg-icon iconCreditCard\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 3h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2Zm0 6v4h12V9H3Zm0-3h12V5H3v1Z\"/></svg>";
const IconCrosshairs = "<svg aria-hidden=\"true\" class=\"svg-icon iconCrosshairs\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 12a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM9 0a1 1 0 0 0-1 1v1.07A7 7 0 0 0 2.07 8H1a1 1 0 1 0 0 2h1.07A7 7 0 0 0 8 15.93V17a1 1 0 1 0 2 0v-1.07A7 7 0 0 0 15.93 10H17a1 1 0 1 0 0-2h-1.07A7 7 0 0 0 10 2.07V1a1 1 0 0 0-1-1Zm5 9A5 5 0 1 1 4 9a5 5 0 0 1 10 0Z\"/></svg>";
const IconCurrency = "<svg aria-hidden=\"true\" class=\"svg-icon iconCurrency\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#5FBA7D\" d=\"M13.92 3H4c.07-.6.62-1.05 1.22-1h7.48c.6-.05 1.15.4 1.22 1Zm.57 1c.6-.05 1.15.4 1.22 1H2.29c.07-.6.6-1.04 1.2-1h11ZM1 7h16a1.14 1.14 0 0 0-1.22-1H2.22c-.6-.05-1.15.4-1.22 1Zm1.5 1C1.67 8 1 8.67 1 9.5v5c0 .83.67 1.5 1.5 1.5h13c.83 0 1.5-.67 1.5-1.5v-5c0-.83-.67-1.5-1.5-1.5h-13ZM5 15a3 3 0 1 1 0-6h8a3 3 0 1 1 0 6H5Z\"/><path fill=\"var(--black-600)\" d=\"M9 13.9a1.9 1.9 0 1 0 0-3.8 1.9 1.9 0 0 0 0 3.8Z\"/></svg>";
const IconDevTo = "<svg aria-hidden=\"true\" class=\"svg-icon iconDevTo\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#010101\" d=\"M15 1a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2h12Zm-3 5.02h-1.18l1.4 5.24c.36.86 1.16 1.1 1.65.13l.06-.13 1.39-5.24h-1.18l-1.07 4.12L12 6.02Zm-1.96 0H7.75a.72.72 0 0 0-.7.65l-.01.1v4.53c0 .37.29.67.65.7l.1.01h2.25v-1.07H8.1V9.26h1.18V8.19H8.1v-1.1h1.93V6.02Zm-5.32 0H3v5.99h1.68c1.33 0 1.75-1.03 1.75-1.71V7.73c0-.68-.43-1.71-1.71-1.71Zm.06 1.12a.7.7 0 0 1 .42.16c.14.1.21.26.21.47v2.52c0 .21-.07.37-.2.47a.7.7 0 0 1-.43.16h-.63V7.14h.63Z\"/></svg>";
const IconDiff = "<svg aria-hidden=\"true\" class=\"svg-icon iconDiff\" width=\"12\" height=\"18\"  viewBox=\"0 0 12 18\"><path  d=\"M5 1h2v4h4v2H7v4H5V7H1V5h4V1Zm6 14H1v2h10v-2Z\"/></svg>";
const IconDiscord = "<svg aria-hidden=\"true\" class=\"svg-icon iconDiscord\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#5865F2\" d=\"M15.24 3.14A14.84 14.84 0 0 0 11.57 2c-.02 0-.04 0-.05.03-.16.28-.34.65-.46.94a13.7 13.7 0 0 0-4.12 0c-.12-.3-.3-.66-.46-.94A.06.06 0 0 0 6.42 2a14.8 14.8 0 0 0-3.69 1.16A15.2 15.2 0 0 0 .1 13.45a14.93 14.93 0 0 0 4.5 2.27c.02 0 .04 0 .06-.02.34-.48.65-.97.92-1.5a.06.06 0 0 0-.04-.08 9.83 9.83 0 0 1-1.4-.67.06.06 0 0 1 0-.1l.27-.21a.06.06 0 0 1 .06-.01 10.64 10.64 0 0 0 9.05 0h.06l.28.23c.03.02.03.07 0 .1-.46.25-.92.48-1.41.66a.06.06 0 0 0-.03.08c.27.52.57 1.02.91 1.5.02.02.04.02.07.02a14.88 14.88 0 0 0 4.52-2.32 15.1 15.1 0 0 0-2.68-10.26Zm-9.22 8.22c-.9 0-1.62-.82-1.62-1.82s.71-1.81 1.62-1.81c.9 0 1.63.82 1.61 1.81 0 1-.71 1.82-1.61 1.82Zm5.98 0c-.9 0-1.62-.82-1.62-1.82s.71-1.81 1.62-1.81c.9 0 1.63.82 1.61 1.81 0 1-.7 1.82-1.61 1.82Z\"/></svg>";
const IconDocument = "<svg aria-hidden=\"true\" class=\"svg-icon iconDocument\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 3a2 2 0 0 1 2-2h6l4 4v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3Zm7-1.5V6h4.5L10 1.5Z\"/></svg>";
const IconDocumentAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconDocumentAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 3a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h7a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5Zm2 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0Zm-2 4.5c0-.28.22-.5.5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5Zm.5 1.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1 0-1ZM5 14.5c0-.28.22-.5.5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5Z\"/><path  d=\"M5.9 2h6.35A2.75 2.75 0 0 1 15 4.75v9.35c.62-.6 1-1.43 1-2.35v-7.5C16 2.45 14.54 1 12.75 1h-4.5c-.92 0-1.75.38-2.35 1Z\" opacity=\".4\"/></svg>";
const IconDownload = "<svg aria-hidden=\"true\" class=\"svg-icon iconDownload\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 7h-4V2a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v5H2l7 7 7-7ZM2 15v2h14v-2H2Z\"/></svg>";
const IconDownloadSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconDownloadSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M12.5 5H9V1H5v4H1.5L7 10.5 12.5 5ZM1 11v2h12v-2H1Z\"/></svg>";
const IconDropbox = "<svg aria-hidden=\"true\" class=\"svg-icon iconDropbox\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#0061FF\" d=\"M4.55 1.77.09 4.6l4.46 2.83L9 4.61l4.45 2.83 4.46-2.83-4.46-2.84L9 4.6 4.55 1.77Zm0 11.35L.09 10.28l4.46-2.84L9 10.28l4.45-2.84 4.46 2.84-4.46 2.84L9 10.28l-4.45 2.84ZM9 16.9l-4.45-2.84L9 11.22l4.45 2.84L9 16.9Z\"/></svg>";
const IconEllipsisHorizontal = "<svg aria-hidden=\"true\" class=\"svg-icon iconEllipsisHorizontal\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M3.5 10a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3ZM12 8.5a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0Z\"/></svg>";
const IconEllipsisVertical = "<svg aria-hidden=\"true\" class=\"svg-icon iconEllipsisVertical\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M7 4.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Zm0 5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0ZM8.5 13a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3Z\"/></svg>";
const IconEye = "<svg aria-hidden=\"true\" class=\"svg-icon iconEye\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.06 3C4 3 1 9 1 9s3 6 8.06 6C14 15 17 9 17 9s-3-6-7.94-6ZM9 13a4 4 0 1 1 0-8 4 4 0 0 1 0 8Zm0-2a2 2 0 0 0 2-2 2 2 0 0 0-2-2 2 2 0 0 0-2 2 2 2 0 0 0 2 2Z\"/></svg>";
const IconEyeOff = "<svg aria-hidden=\"true\" class=\"svg-icon iconEyeOff\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m5.02 9.44-2.22 2.2C1.63 10.25 1 9 1 9s3-6 8.06-6c.75 0 1.46.14 2.12.38L9.5 5.03a4.01 4.01 0 0 0-4.48 4.41Zm2.03 3.05A3.99 3.99 0 0 0 13 9c0-.73-.2-1.41-.54-2l-1.51 1.54a2 2 0 0 1-2.38 2.42l-1.52 1.53Zm7.11-7.22A14.8 14.8 0 0 1 17 9s-3 6-7.94 6c-1.31 0-2.48-.4-3.5-1l-1.97 2L2 14.41 14.59 2 16 3.41l-1.84 1.86Z\"/></svg>";
const IconEyeOffSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconEyeOffSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M3.52 7.38 1.58 9.26A12.38 12.38 0 0 1 0 7s2.63-5.14 7.05-5.14c.66 0 1.28.12 1.86.32L7.44 3.6a3.48 3.48 0 0 0-3.92 3.78ZM5.3 9.99c.5.28 1.1.44 1.71.44 1.94 0 3.5-1.53 3.5-3.43 0-.62-.17-1.21-.47-1.72L8.7 6.6a1.73 1.73 0 0 1-2.08 2.07L5.29 10Zm6.23-6.19A12.7 12.7 0 0 1 14 7s-2.63 5.14-6.95 5.14A6.1 6.1 0 0 1 4 11.3L2.27 13l-1.4-1.36L11.9 1l1.23 1.2-1.6 1.6Z\"/></svg>";
const IconEyeSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconEyeSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7.05 2C2.63 2 0 7.5 0 7.5S2.63 13 7.05 13C11.38 13 14 7.5 14 7.5S11.37 2 7.05 2ZM7 11.17A3.59 3.59 0 0 1 3.5 7.5 3.6 3.6 0 0 1 7 3.83c1.94 0 3.5 1.65 3.5 3.67A3.57 3.57 0 0 1 7 11.17Zm0-1.84c.97 0 1.75-.81 1.75-1.83S7.97 5.67 7 5.67s-1.75.81-1.75 1.83S6.03 9.33 7 9.33Z\"/></svg>";
const IconEyes = "<svg aria-hidden=\"true\" class=\"svg-icon iconEyes\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#888\" d=\"M9.5 3.44A4.5 4.5 0 0 0 1 5.5v8a4.5 4.5 0 0 0 8.5 2.06A4.5 4.5 0 0 0 18 13.5v-8a4.5 4.5 0 0 0-8.5-2.06ZM9 5.5v8a3.5 3.5 0 1 1-7 0v-8a3.5 3.5 0 1 1 7 0Zm1 8v-8a3.5 3.5 0 1 1 7 0v8a3.5 3.5 0 1 1-7 0Z\" opacity=\".4\"/><path fill=\"#8E8E8E\" d=\"M5.5 2A3.5 3.5 0 0 1 9 5.5v8a3.5 3.5 0 1 1-7 0v-8A3.5 3.5 0 0 1 5.5 2Zm8 0A3.5 3.5 0 0 1 17 5.5v8a3.5 3.5 0 1 1-7 0v-8A3.5 3.5 0 0 1 13.5 2Z\" opacity=\".1\"/><path fill=\"var(--black-600)\" d=\"M4.44 10.44A1.5 1.5 0 0 1 7 11.5v2a1.5 1.5 0 0 1-3 0v-2c0-.4.16-.78.44-1.06Zm8 0A1.5 1.5 0 0 1 15 11.5v2a1.5 1.5 0 1 1-3 0v-2c0-.4.16-.78.44-1.06Z\"/></svg>";
const IconFaceFrown = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceFrown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M5.65 5c-.37 0-.64.35-.65.7v.55C5 7.1 5.6 7.97 6.5 8c.91 0 1.52-.9 1.5-1.75v-.54c0-.36-.27-.72-.66-.71H5.65Zm7.22 6.64A4.7 4.7 0 0 0 9.02 10a4.7 4.7 0 0 0-3.86 1.64c-.25.33-.24 1.11 0 1.43.22.32.59.42.96.42 1.9-.15 3.8-.15 5.7 0 .38.05.77-.11.98-.4.25-.3.29-1.1.07-1.45ZM10.66 5h1.7c.33 0 .63.33.64.7v.55c.02.85-.59 1.73-1.5 1.75-.9-.03-1.5-.9-1.5-1.75v-.54c0-.36.28-.72.66-.71Z\"/></svg>";
const IconFaceJoy = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceJoy\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M7.35 8A.71.71 0 0 0 8 7.28v-.9C8 5.5 7.35 4.6 6.48 4.6 5.56 4.6 5 5.5 5 6.39v.89c-.02.36.29.7.65.72h1.7Zm5.07 2c-2.27.26-4.55.26-6.82 0-.83-.1-1.45.8-1.09 1.55A5.06 5.06 0 0 0 9 14c1.92 0 3.6-.87 4.52-2.46a1.1 1.1 0 0 0-1.1-1.54Zm-.07-2h-1.7a.71.71 0 0 1-.65-.72v-.89c0-.89.58-1.79 1.48-1.79.87 0 1.52.9 1.52 1.78v.9c.02.36-.29.7-.65.72Z\"/></svg>";
const IconFaceMindBlown = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceMindBlown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFAA3B\" d=\"M1.06 8a8 8 0 1 0 15.88 0H16l-1 .5-1-.5h-1.5l-1.5.5L9 8l-.5.5-1-.5H6l-1 .5-.5-.5h-1l-.5.5L2 8h-.94Z\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M3.5 8h.41a11.5 11.5 0 0 0 10.38 7A8 8 0 0 1 1.06 8H2l1 .5.5-.5Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M6.07 14.68a.7.7 0 0 0 .67.28c1.5-.16 3.01-.16 4.51 0a.71.71 0 0 0 .67-.28.7.7 0 0 0 .06-.72A3.23 3.23 0 0 0 9 12.36a3.3 3.3 0 0 0-3 1.6.7.7 0 0 0 .07.72Z\"/><path fill=\"#F75D37\" d=\"M7.36 4.37c.18.23.4.42.68.55a2.19 2.19 0 0 0 1.95 0c.26-.13.48-.31.65-.53.15.93.36 2.29.36 2.61 0 .5-4 .5-4 0 0-.32.21-1.7.36-2.63Z\"/><path fill=\"#FFC166\" d=\"M15.33 2.43a2.8 2.8 0 0 0-1.73-.53c-.06-.4-.28-.76-.64-1.05-.35-.26-.8-.44-1.27-.5-.49-.06-.98 0-1.42.16A2.9 2.9 0 0 0 8.4.08c-.39.05-.75.17-1.06.36A3.04 3.04 0 0 0 6.02.37c-.8.13-1.48.6-1.72 1.2-.11.27-.13.55-.07.83-.77.07-1.47.45-1.8.99-.6.98.26 2.4 1.6 2.6.97.14 2.13-.15 2.63-.79.22-.27.33-.58.34-.9.21.26.5.47.86.62a2.92 2.92 0 0 0 2.28 0c.35-.15.64-.37.85-.63.04.43.27.83.65 1.14a2.93 2.93 0 0 0 3.03.25c.81-.42 1.42-1.42 1.32-2.16-.05-.41-.28-.8-.66-1.09Z\" opacity=\".67\"/><path fill=\"#FFC166\" d=\"M7.4 2c1.19 0 2.3-.2 3.26-.55.9 1.2 2.88 2.13 5.32 2.44A2.61 2.61 0 0 1 13.1 6a2.68 2.68 0 0 1-1.45-.56A1.65 1.65 0 0 1 11 4.3c-.2.26-.5.48-.85.63a2.92 2.92 0 0 1-2.28 0A2.21 2.21 0 0 1 7 4.3c0 .32-.12.63-.34.9-.5.64-1.66.93-2.62.78-1.35-.2-2.22-1.6-1.6-2.6a2.36 2.36 0 0 1 1.79-.98 1.4 1.4 0 0 1 .1-.88c.9.3 1.95.48 3.07.48Z\" opacity=\".78\"/><path fill=\"#F75D37\" d=\"M11.09 3.47a7.43 7.43 0 0 1-5.43.05c-1 .27-2.17.44-3.42.47-.06.88.71 1.83 1.8 2 .96.14 2.12-.15 2.62-.79.22-.27.33-.58.34-.9.21.26.5.47.86.62a2.92 2.92 0 0 0 2.28 0c.35-.15.64-.37.85-.63.04.43.27.83.65 1.14a2.93 2.93 0 0 0 3.03.25c.35-.18.66-.47.9-.8a11.57 11.57 0 0 1-4.48-1.4Z\" opacity=\".52\"/><circle cx=\"11\" cy=\"10.5\" r=\"1.35\" fill=\"var(--black-600)\"/><circle cx=\"7\" cy=\"10.5\" r=\"1.35\" fill=\"var(--black-600)\"/><circle cx=\"3.5\" cy=\"6.5\" r=\".5\"  opacity=\".6\"/><circle cx=\"14.5\" cy=\".5\" r=\".5\"  opacity=\".6\"/><circle cx=\"14.5\" cy=\"6.5\" r=\".5\"  opacity=\".6\"/><circle cx=\"16.5\" cy=\"4.5\" r=\".5\"  opacity=\".6\"/><circle cx=\"3.5\" cy=\".5\" r=\".5\"  opacity=\".6\"/><circle cx=\"1.5\" cy=\"3.5\" r=\".5\"  opacity=\".6\"/></svg>";
const IconFaceNeutral = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceNeutral\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M6.5 8a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm-5.25 2a1.25 1.25 0 1 0 0 2.5h5.5a1.25 1.25 0 1 0 0-2.5h-5.5Z\"/></svg>";
const IconFaceSad = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceSad\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M6.5 8a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm6.05 3.05a6.56 6.56 0 0 0-7.1 0c-.35.24-.52.73-.42 1.16.15.6.82.99 1.38.63a4.78 4.78 0 0 1 5.12 0 .93.93 0 0 0 1.32-.34c.27-.47.15-1.14-.3-1.45ZM13 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"/></svg>";
const IconFaceShocked = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceShocked\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M6.5 7.55c.86 0 1.56-.7 1.56-1.55a1.56 1.56 0 0 0-3.12 0c0 .86.7 1.55 1.56 1.55ZM9 14.62A2.56 2.56 0 1 0 9 9.5a2.56 2.56 0 0 0 0 5.12ZM13.06 6a1.56 1.56 0 0 1-3.12 0 1.56 1.56 0 0 1 3.12 0Z\"/></svg>";
const IconFaceSmile = "<svg aria-hidden=\"true\" class=\"svg-icon iconFaceSmile\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"#FFAA3B\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M8.41 17a10 10 0 0 1 .38-15.75c.1-.08.2-.16.28-.25a8 8 0 0 0-.66 16Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M6.5 8a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm2.6 6a7.37 7.37 0 0 1-4.79-2.06 1.1 1.1 0 0 1 0-1.54c.42-.51 1.15-.51 1.67-.1.31.3 3.23 2.88 6.14 0a1.06 1.06 0 0 1 1.57.1 1.1 1.1 0 0 1 0 1.54C12.13 13.38 10.56 14 9.1 14ZM13 6.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"/></svg>";
const IconFacebook = "<svg aria-hidden=\"true\" class=\"svg-icon iconFacebook\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#4167B2\" d=\"M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H3Zm6.55 16v-6.2H7.46V8.4h2.09V6.61c0-2.07 1.26-3.2 3.1-3.2.88 0 1.64.07 1.87.1v2.16h-1.29c-1 0-1.19.48-1.19 1.18V8.4h2.39l-.31 2.42h-2.08V17h-2.5Z\"/></svg>";
const IconFemale = "<svg aria-hidden=\"true\" class=\"svg-icon iconFemale\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M4 6a5 5 0 0 0 4 4.9V13H6v2h2v2h2v-2h2v-2h-2v-2.1A5 5 0 1 0 4 6Zm8 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"/></svg>";
const IconFigma = "<svg aria-hidden=\"true\" class=\"svg-icon iconFigma\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#0ACF83\" d=\"M5.5 17A2.5 2.5 0 0 0 8 14.5V12H5.5a2.5 2.5 0 0 0 0 5Z\"/><path fill=\"#A259FF\" d=\"M3 8.5A2.5 2.5 0 0 1 5.5 6H8v5H5.5A2.5 2.5 0 0 1 3 8.5Z\"/><path fill=\"#F24E1E\" d=\"M3 2.5A2.5 2.5 0 0 1 5.5 0H8v5H5.5A2.5 2.5 0 0 1 3 2.5Z\"/><path fill=\"#FF7262\" d=\"M9 0h2.5a2.5 2.5 0 0 1 0 5H9V0Z\"/><path fill=\"#1ABCFE\" d=\"M14 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z\"/></svg>";
const IconFilter = "<svg aria-hidden=\"true\" class=\"svg-icon iconFilter\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M2 4h14v2H2V4Zm2 4h10v2H4V8Zm8 4H6v2h6v-2Z\"/></svg>";
const IconFire = "<svg aria-hidden=\"true\" class=\"svg-icon iconFire\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FF6700\" d=\"M13.18 9c-.8.33-1.46.6-1.97 1.3A9.21 9.21 0 0 0 10 13.89a10 10 0 0 0 1.32-.8 2.53 2.53 0 0 1-.63 2.91h.78a3 3 0 0 0 1.66-.5 4.15 4.15 0 0 0 1.26-1.61c.4-.96.47-1.7.55-2.73.05-1.24-.1-2.49-.46-3.68a2 2 0 0 1-.4.91 2.1 2.1 0 0 1-.9.62Z\" opacity=\".6\"/><path fill=\"#EF2E2E\" d=\"M10.4 12.11a7.1 7.1 0 0 1 .78-1.76c.3-.47.81-.8 1.37-1.08 0 0-.05-3.27-1.55-5.27-1.5-2-3.37-2.75-4.95-2.61 0 0 4.19 2.94 1.18 5.67-2.14 1.92-3.64 3.81-3.1 5.94a4.14 4.14 0 0 0 3.1 3 4.05 4.05 0 0 1 1.08-3.89C9.42 10.92 8 9.79 8 9.79c.67.02 1.3.28 1.81.72a2 2 0 0 1 .58 1.6Z\"/></svg>";
const IconFireSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconFireSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M6.21 0c.68 1.84.34 2.87-.43 3.65-.82.89-2.13 1.55-3.03 2.84C1.55 8.22 1.33 12.01 5.7 13c-1.83-.98-2.22-3.82-.25-5.59-.5 1.72.45 2.82 1.62 2.42 1.16-.4 1.92.45 1.9 1.41-.02.66-.26 1.22-.95 1.53A4.72 4.72 0 0 0 12 8.07c0-2.4-2.11-2.72-1.04-4.74-1.27.11-1.7.96-1.58 2.32.08.92-.85 1.53-1.55 1.13-.56-.35-.55-1-.05-1.5C8.82 4.22 9.24 1.81 6.21.01L6.2 0h.01Z\"/></svg>";
const IconFitness = "<svg aria-hidden=\"true\" class=\"svg-icon iconFitness\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15.57 9.86 17 8.43 15.57 7 12 10.57 7.43 6 11 2.43 9.57 1 8.14 2.43 6.71 1 4.57 3.14 3.14 1.71 1.71 3.14l1.43 1.43L1 6.71l1.43 1.43L1 9.57 2.43 11 6 7.43 10.57 12 7 15.57 8.43 17l1.43-1.43L11.29 17l2.14-2.14 1.43 1.43 1.43-1.43-1.43-1.43L17 11.29l-1.43-1.43Z\"/></svg>";
const IconFlag = "<svg aria-hidden=\"true\" class=\"svg-icon iconFlag\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 2v14h2v-6h3.6l.4 1h6V3H9.5L9 2H3Z\"/></svg>";
const IconFlagGermany = "<svg aria-hidden=\"true\" class=\"svg-icon iconFlagGermany\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 5c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v2H1V5Z\"/><path fill=\"#D00\" d=\"M1 7h16v4H1z\"/><path fill=\"#FFCE00\" d=\"M1 11h16v2a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-2Z\"/></svg>";
const IconFlagSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconFlagSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 2v10h2V8h2.6L7 9h4V3H7.5L7 2H2Z\"/></svg>";
const IconFlagUnitedKingdom = "<svg aria-hidden=\"true\" class=\"svg-icon iconFlagUnitedKingdom\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><rect width=\"16\" height=\"12\" x=\"1\" y=\"3\" fill=\"#3F51B5\" rx=\"2\"/><path fill=\"#FEFEFE\" d=\"M7 5.28 4.08 3H3a2 2 0 0 0-.89.2L7 7H5.39L1.34 3.88l.02-.02a2 2 0 0 0-.3.65L4.31 7H1v1h7V3H7v2.28ZM1 11v-1h7v5H7v-3.14L2.9 15a2 2 0 0 1-.8-.21L7 11H5.38l-4.03 3.11A2 2 0 0 1 1 13v-.33L3.14 11H1Zm9 4h1v-2.3l2.95 2.3H15a2 2 0 0 0 .9-.22L11 11h1.64l4.02 3.1c.13-.18.23-.4.28-.62L13.71 11H17v-1h-7v5Zm1-12v3.15L15.11 3c.29.02.55.1.8.22L11 7h1.64l4.02-3.1A2 2 0 0 1 17 5v.33L14.86 7H17v1h-7V3h1Z\"/><path fill=\"#E53935\" d=\"M10 3H8v5H1v2h7v5h2v-5h7V8h-7V3Zm-7.89.2a2 2 0 0 0-.75.66l-.02.02L5.4 7H7v-.02L2.11 3.21Zm-.77 10.91a2 2 0 0 0 .76.68L7 11H5.38l-4.03 3.11Zm15.32-.01a2 2 0 0 1-.76.68L11 11h1.64l4.02 3.1ZM12.64 7l4.02-3.1a2 2 0 0 0-.76-.68L11 7h1.64Z\"/></svg>";
const IconFlagUnitedStates = "<svg aria-hidden=\"true\" class=\"svg-icon iconFlagUnitedStates\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><rect width=\"16\" height=\"12\" x=\"1\" y=\"3\" fill=\"#FEFEFE\" rx=\"2\"/><path fill=\"#0B327C\" d=\"M1 5c0-1.1.9-2 2-2h6v5H1V5Z\"/><path fill=\"red\" d=\"M17 5H9v1h8V5Zm-2-2H9v1h7.73A2 2 0 0 0 15 3Zm2 4H9v1h8V7Zm0 2v1H1V9h16Zm0 2v1H1v-1h16Zm-.27 3a2 2 0 0 0 .27-.99V13H1c0 .36.1.7.27 1h15.46Z\"/></svg>";
const IconFloat = "<svg aria-hidden=\"true\" class=\"svg-icon iconFloat\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#AFAFAF\" d=\"M11 6V1.08c-1.3-.16-2.7-.16-4 0V6a14.1 14.1 0 0 1 4 0ZM1.08 7H6a14.11 14.11 0 0 0 0 4H1.08c-.16-1.3-.16-2.7 0-4Zm15.84 0H12a14.1 14.1 0 0 1 0 4h4.92c.16-1.34.16-2.67 0-4ZM7 16.92V12c1.33.19 2.67.19 4 0v4.92c-1.34.16-2.7.16-4 0Z\" opacity=\".4\"/><path fill=\"#F75D37\" d=\"M7 5.51c-.3.18-.6.4-.85.64a4.4 4.4 0 0 0-.64.85H1.26A8 8 0 0 1 7 1.26v4.25ZM12.45 7c-.34-.6-.85-1.1-1.45-1.45V1.26A8 8 0 0 1 16.74 7h-4.29Zm0 4c-.34.6-.85 1.1-1.45 1.45v4.29A8 8 0 0 0 16.74 11h-4.29Zm-6.9 0c.34.6.85 1.1 1.45 1.45v4.29A8 8 0 0 1 1.26 11h4.29Z\"/></svg>";
const IconFood = "<svg aria-hidden=\"true\" class=\"svg-icon iconFood\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7 7h1V1h2v6c0 1.7-1.33 2.9-3 3v7H5v-7c-1.67-.1-3-1.3-3-3V1h2v6h1V1h2v6Zm5 3V4.2C12 2.8 13.8 1 16 1v16h-2v-7h-2Z\"/></svg>";
const IconFour = "<svg aria-hidden=\"true\" class=\"svg-icon iconFour\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M11.03 11.98h1.29v1.85h-1.29V16H9v-2.17H4.1L4 12.12l4.75-7.5h2.28v7.36Zm-4.77 0H9V7.7l-.38.26-2.36 4.02ZM16.25 15a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\" opacity=\".2\"/><path  d=\"M9.03 10.98h1.29v1.85H9.03V15H7v-2.17H2.1L2 11.12l4.75-8.03h2.28V11Zm-4.77 0H7V6.6l-.38.26-2.36 4.13ZM14.25 14a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\"/></svg>";
const IconFourLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconFourLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M22 24h2.98v4H22v3.97h-3.92V28h-10l-.2-3.88 9.7-15.15H22V24Zm-9.52-.15h5.6v-8.66l-.76.52-4.84 8.14ZM31 30a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\" opacity=\".2\"/><path  d=\"M19 22.06h3V26h-3v4.16h-4.04V26h-10l-.21-3.67 9.7-16.17H19v15.9Zm-9.65 0h5.61v-8.85l-.77.52-4.84 8.33ZM29 28a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\"/></svg>";
const IconGear = "<svg aria-hidden=\"true\" class=\"svg-icon iconGear\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m14.53 6.3.28.67C17 7.77 17 7.86 17 8.12V9.8c0 .26 0 .35-2.18 1.22l-.27.66c.98 2.11.91 2.18.73 2.37l-1.3 1.29h-.15c-.2 0-.91-.27-2.14-.8l-.66.27C10.23 17 10.13 17 9.88 17H8.2c-.26 0-.35 0-1.21-2.18l-.67-.27c-1.81.84-2.03.84-2.1.84h-.14l-.12-.1-1.19-1.2c-.18-.18-.24-.25.7-2.4l-.28-.65C1 10.24 1 10.14 1 9.88V8.2c0-.27 0-.35 2.18-1.21l.27-.66c-.98-2.12-.91-2.19-.72-2.39l1.28-1.28h.16c.2 0 .91.28 2.14.8l.66-.27C7.77 1 7.87 1 8.12 1H9.8c.26 0 .34 0 1.2 2.18l.67.28c1.82-.84 2.03-.84 2.1-.84h.14l.12.1 1.2 1.19c.18.18.24.25-.7 2.4Zm-8.4 3.9a3.1 3.1 0 1 0 5.73-2.4 3.1 3.1 0 0 0-5.72 2.4Z\"/></svg>";
const IconGearSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconGearSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m8.17 11.42-.39 1.53a6.07 6.07 0 0 1-1.58 0l-.39-1.53c-.39-.1-.75-.26-1.1-.46l-1.35.8c-.42-.31-.8-.69-1.12-1.1l.8-1.37c-.2-.34-.35-.7-.46-1.1L1.05 7.8a6.06 6.06 0 0 1 0-1.57l1.53-.4c.1-.4.25-.76.45-1.11l-.8-1.36c.32-.42.7-.8 1.1-1.11l1.36.8c.35-.2.73-.36 1.13-.47l.4-1.53a6.06 6.06 0 0 1 1.55 0l.4 1.53c.4.1.78.26 1.13.47l1.36-.8c.41.31.78.68 1.1 1.1l-.8 1.36c.2.35.36.73.46 1.13l1.53.39a6.06 6.06 0 0 1 0 1.57l-1.53.39c-.1.4-.27.77-.47 1.11l.8 1.36c-.32.42-.7.8-1.11 1.11l-1.36-.8c-.34.2-.71.35-1.1.45ZM7 9a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"/></svg>";
const IconGitHub = "<svg aria-hidden=\"true\" class=\"svg-icon iconGitHub\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#010101\" d=\"M9 1a8 8 0 0 0-2.53 15.59c.4.07.55-.17.55-.38l-.01-1.49c-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82a7.42 7.42 0 0 1 4 0c1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48l-.01 2.2c0 .21.15.46.55.38A8.01 8.01 0 0 0 9 1Z\"/></svg>";
const IconGitLab = "<svg aria-hidden=\"true\" class=\"svg-icon iconGitLab\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#E65328\" d=\"m17 10-1-3-2-6c-.19-.07.21-.07 0 0l-2 6H6L4 1c-.21-.07.19-.07 0 0L2 7l-1 3c-.05-.17.04.11 0 0l8 6 8-6c.05-.17-.04.11 0 0Z\"/></svg>";
const IconGlobe = "<svg aria-hidden=\"true\" class=\"svg-icon iconGlobe\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1C4.64 1 1 4.64 1 9c0 4.36 3.64 8 8 8 4.36 0 8-3.64 8-8 0-4.36-3.64-8-8-8ZM8 15.32a6.46 6.46 0 0 1-4.3-2.74 6.46 6.46 0 0 1-.93-5.01L7 11.68v.8c0 .88.12 1.32 1 1.32v1.52Zm5.72-2c-.2-.66-1-1.32-1.72-1.32h-1v-2c0-.44-.56-1-1-1H6V7h1c.44 0 1-.56 1-1V5h2c.88 0 1.4-.72 1.4-1.6v-.33a6.45 6.45 0 0 1 3.83 4.51 6.45 6.45 0 0 1-1.51 5.73v.01Z\"/></svg>";
const IconGoogle = "<svg aria-hidden=\"true\" class=\"svg-icon iconGoogle\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#4285F4\" d=\"M16.51 8H8.98v3h4.3c-.18 1-.74 1.48-1.6 2.04v2.01h2.6a7.8 7.8 0 0 0 2.38-5.88c0-.57-.05-.66-.15-1.18Z\"/><path fill=\"#34A853\" d=\"M8.98 17c2.16 0 3.97-.72 5.3-1.94l-2.6-2a4.8 4.8 0 0 1-7.18-2.54H1.83v2.07A8 8 0 0 0 8.98 17Z\"/><path fill=\"#FBBC05\" d=\"M4.5 10.52a4.8 4.8 0 0 1 0-3.04V5.41H1.83a8 8 0 0 0 0 7.18l2.67-2.07Z\"/><path fill=\"#EA4335\" d=\"M8.98 4.18c1.17 0 2.23.4 3.06 1.2l2.3-2.3A8 8 0 0 0 1.83 5.4L4.5 7.49a4.77 4.77 0 0 1 4.48-3.3Z\"/></svg>";
const IconGoogleDrive = "<svg aria-hidden=\"true\" class=\"svg-icon iconGoogleDrive\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FCCD48\" d=\"M12 11.5 6.5 2H12l5.5 9.5H12Z\"/><path fill=\"#0BA25E\" d=\"m3.5 17-3-5L6 2l3.17 5.44L3.5 17Z\"/><path fill=\"#2A71E9\" d=\"m4 17 3-5h10.5L15 17H4Z\"/></svg>";
const IconGrabber = "<svg aria-hidden=\"true\" class=\"svg-icon iconGrabber\" width=\"26\" height=\"5\"  viewBox=\"0 0 26 5\"><path  d=\"M0 0h2v2H0V0Zm3 3h2v2H3V3Zm6 0h2v2H9V3Zm6 0h2v2h-2V3Zm6 0h2v2h-2V3ZM6 0h2v2H6V0Zm6 0h2v2h-2V0Zm6 0h2v2h-2V0Zm6 0h2v2h-2V0Z\"/></svg>";
const IconGrabberVertical = "<svg aria-hidden=\"true\" class=\"svg-icon iconGrabberVertical\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 3h2v2H5V3Zm0 5h2v2H5V8Zm5 0h2v2h-2V8Zm0 5h2v2h-2v-2Zm0-10h2v2h-2V3ZM5 13h2v2H5v-2Z\"/></svg>";
const IconGraph = "<svg aria-hidden=\"true\" class=\"svg-icon iconGraph\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1h12c1.09 0 2 .91 2 2v12c0 1.09-.91 2-2 2H3c-1.09 0-2-.91-2-2V3c0-1.1.9-2 2-2Zm1 8v5h2V9H4Zm4-5v10h2V4H8Zm4 3v7h2V7h-2Z\"/></svg>";
const IconGrid = "<svg aria-hidden=\"true\" class=\"svg-icon iconGrid\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 3h5v5H3V3Zm7 0h5v5h-5V3Zm0 7h5v5h-5v-5Zm-7 0h5v5H3v-5Z\"/></svg>";
const IconHamburger = "<svg aria-hidden=\"true\" class=\"svg-icon iconHamburger\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M2 3h14v2H2V3Zm0 5h14v2H2V8Zm14 5H2v2h14v-2Z\"/></svg>";
const IconHandNice = "<svg aria-hidden=\"true\" class=\"svg-icon iconHandNice\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#07C\" d=\"M9 15.77V15h5v.77A1.23 1.23 0 0 1 12.77 17h-2.54A1.23 1.23 0 0 1 9 15.77Z\" opacity=\".7\"/><path  d=\"M6.5 2c.28 0 .5.22.5.5v1a.5.5 0 0 1-1 0v-1c0-.28.22-.5.5-.5ZM2 6.5c0-.28.22-.5.5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5Zm1.85-3.35a.5.5 0 1 0-.7.7l1 1a.5.5 0 1 0 .7-.7l-1-1Z\" opacity=\".4\"/><path fill=\"#FFC166\" d=\"M14.9 7.56v-5.7a.94.94 0 0 0-.88-.9c-.45.01-.83.44-.83.9V5.4l-2.63-4.05a.94.94 0 0 0-1.19-.4A.86.86 0 0 0 9 2.08l1.5 2.15a1.48 1.48 0 0 0-1.32.23l-1.21.94c-.86.66.26 1.97 1.09 1.37l.53-.32c.28-.16.64 0 .83.24l.82.86c.22.22.36.52.4.84.02.32-.06.77-.27 1-.21.24-.35.45-.68.59-.27.1-.57.12-.85.03L7.8 9.67c.72-2.25-1.08-2.4-1.46-1.98a4.5 4.5 0 0 0-.6 2.5C5.82 10.9 9 14 9 14h5s1.47-3.3 1.5-4.5c.03-1.2-.42-1.6-.6-1.94Z\"/></svg>";
const IconHandPointRight = "<svg aria-hidden=\"true\" class=\"svg-icon iconHandPointRight\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M6 7s1.69-.67 2.25-.86C8.81 5.95 11 5 12.5 5h3c.75 0 1.5.5 1.5 1.5S16.25 8 15.5 8h-3.28a5.28 5.28 0 0 1-.39 5.61c-.89 1.1-3.46.94-4.13.83-.66-.12-1.04-.25-1.7-.44V7Z\"/><path  d=\"M16.15 1.15a.5.5 0 0 1 .7.7l-1 1a.5.5 0 0 1-.7-.7l1-1Zm-1 9.7a.5.5 0 0 1 .7-.7l1 1a.5.5 0 0 1-.7.7l-1-1Zm-5.3-9.7a.5.5 0 1 0-.7.7l1 1a.5.5 0 0 0 .7-.7l-1-1Z\" opacity=\".4\"/><path fill=\"#07C\" d=\"M2 8.5C2 7.67 2.67 7 3.5 7H5v7H3.5A1.5 1.5 0 0 1 2 12.5v-4Z\" opacity=\".7\"/></svg>";
const IconHandRock = "<svg aria-hidden=\"true\" class=\"svg-icon iconHandRock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M14.14 7.86c-.5.3-.97.66-1.38 1.1-.27.25-.35.7-.67.48-.26-.19-.35-1.21-.28-1.85.06-.64.2-2.45.22-3.07.02-.61.38-2.11-.71-2.26-1.09-.15-1.24 1.64-1.37 2.5-.13.87-.49 2.54-.49 2.54a.79.79 0 0 0-.8-.44C8.08 6.94 8 7.44 8 7.9a.74.74 0 0 0-.74-.66.78.78 0 0 0-.77.66l-1.4-3.14c-.38-1.15-2.08-.24-1.57.89.49 1.18.89 2.4 1.2 3.63.18.92.22 1.54.37 2.45.23.72.41 1.71.91 2.27h5c.76-.66 1.41-1.42 1.95-2.27.6-.9 1.32-1.76 1.88-2.66.45-.74.31-1.68-.69-1.21Z\"/><path fill=\"#07C\" d=\"M6 15.77V15h5v.77c0 .67-.55 1.23-1.21 1.23H7.2c-.65 0-1.2-.56-1.2-1.23Z\" opacity=\".7\"/><path  d=\"M7.5 0c.28 0 .5.22.5.5v1a.5.5 0 0 1-1 0v-1c0-.28.22-.5.5-.5ZM0 8.5c0-.28.22-.5.5-.5h1a.5.5 0 0 1 0 1h-1a.5.5 0 0 1-.5-.5ZM16.5 8a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1ZM1.15 2.15c.2-.2.5-.2.7 0l1 1a.5.5 0 1 1-.7.7l-1-1a.5.5 0 0 1 0-.7Zm13.7.7a.5.5 0 0 0-.7-.7l-1 1a.5.5 0 0 0 .7.7l1-1Z\" opacity=\".4\"/></svg>";
const IconHandsTogether = "<svg aria-hidden=\"true\" class=\"svg-icon iconHandsTogether\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3.85 1.15a.5.5 0 1 0-.7.7l2 2a.5.5 0 1 0 .7-.7l-2-2ZM5.5 6h-2a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1Zm10 1h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 0 1Zm.35-5.15a.5.5 0 0 0-.7-.7l-2 2a.5.5 0 0 0 .7.7l2-2Z\" opacity=\".4\"/><path fill=\"#FFC166\" d=\"M8.21 16.49c-.44.37-1.02.55-1.6.51H5v-6h2l1-7.63c0-.2.23-.37.5-.37s.5.17.5.37V15a2.23 2.23 0 0 1-.79 1.49Zm2.58 0c.44.37 1.02.55 1.6.51H14v-6h-2l-1-7.63c0-.2-.23-.37-.5-.37s-.5.17-.5.37V15c.06.58.34 1.11.79 1.49Z\"/><path fill=\"#07C\" d=\"M2.5 11c-.83 0-1.5.67-1.5 1.5v3c0 .83.67 1.5 1.5 1.5H4v-6H2.5Zm14 0H15v6h1.5c.83 0 1.5-.67 1.5-1.5v-3c0-.83-.67-1.5-1.5-1.5Z\" opacity=\".7\"/></svg>";
const IconHandshake = "<svg aria-hidden=\"true\" class=\"svg-icon iconHandshake\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"m12.22 5.27-2.43-.25a.85.85 0 0 0-.59.22l-2.79 2.4a.96.96 0 0 0-.05 1.42c.36.36 1.07.48 1.55.1l2.27-1.88c.2-.15.48-.15.65.03.17.15.17.4-.03.56l-.62.54L14 10V7l-1.02-1.32c-.16-.15-.5-.4-.76-.4ZM14 11 9.4 9.04l-.85.68c-.84.71-2.1.64-2.87-.1-.73-.74-.67-1.9.14-2.6l2.2-2-2.34.25c-.34.08-.59.26-.76.41L4 7v5l1.9.73c1.43.66 2.74.98 3.89 1.06 1.38 0 2.96-.71 3.87-1.79.2-.24.34-.4.34-1Z\"/><path fill=\"#07C\" d=\"M18 8.5c0-.83-.67-1.5-1.5-1.5H15v5h1.5c.83 0 1.5-.67 1.5-1.5v-2Zm-18 0C0 7.67.67 7 1.5 7H3v5H1.5A1.5 1.5 0 0 1 0 10.5v-2Z\" opacity=\".7\"/></svg>";
const IconHeader = "<svg aria-hidden=\"true\" class=\"svg-icon iconHeader\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M13.62 10.08 12.1 4.66h-.06l-1.5 5.42h3.08ZM5.7 11.13 4.53 7.02h-.08l-1.13 4.11H5.7ZM17.31 15h-2.25l-.95-3.25h-4.07L9.09 15H6.84l-.69-2.33H2.87L2.17 15H0l3.3-9.59h2.5l2.17 6.34L10.86 3h2.52l3.94 12h-.01Z\"/></svg>";
const IconHealth = "<svg aria-hidden=\"true\" class=\"svg-icon iconHealth\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1 2 4v5.02C2 13.69 7.31 17 9 17c1.69 0 7-3.31 7-7.98V4L9 1Zm1 9v3H8v-3H5V8h3V5h2v3h3v2h-3Z\"/></svg>";
const IconHeart = "<svg aria-hidden=\"true\" class=\"svg-icon iconHeart\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#F75D37\" d=\"M5.25 2c-1.5 0-2.35.5-3.15 1.36C.5 5 .5 8.2 2.1 10l6 5.87c.2.2.6.2.8 0l6-5.87c1.6-1.8 1.6-5 0-6.64A3.86 3.86 0 0 0 11.75 2C10.2 2 9 3 8.5 3.9 8 3 6.5 2 5.25 2Zm8.6 4.85-2 2a.5.5 0 0 1-.7-.7l2-2a.5.5 0 0 1 .7.7Z\"/></svg>";
const IconHelp = "<svg aria-hidden=\"true\" class=\"svg-icon iconHelp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1C4.64 1 1 4.64 1 9c0 4.36 3.64 8 8 8 4.36 0 8-3.64 8-8 0-4.36-3.64-8-8-8Zm.81 12.13c-.02.71-.55 1.15-1.24 1.13-.66-.02-1.17-.49-1.15-1.2.02-.72.56-1.18 1.22-1.16.7.03 1.2.51 1.17 1.23ZM11.77 8c-.59.66-1.78 1.09-2.05 1.97a4 4 0 0 0-.09.75c0 .05-.03.16-.18.16H7.88c-.16 0-.18-.1-.18-.15.06-1.35.66-2.2 1.83-2.88.39-.29.7-.75.7-1.24.01-1.24-1.64-1.82-2.35-.72-.21.33-.18.73-.18 1.1H5.75c0-1.97 1.03-3.26 3.03-3.26 1.75 0 3.47.87 3.47 2.83 0 .57-.2 1.05-.48 1.44Z\"/></svg>";
const IconHelpSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconHelpSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 1C3.74 1 1 3.77 1 7c0 3.26 2.77 6 6 6 3.27 0 6-2.73 6-6s-2.73-6-6-6Zm1.06 9.06c-.02.63-.48 1.02-1.1 1-.57-.02-1.03-.43-1.01-1.06.02-.63.5-1.04 1.08-1.02.6.02 1.05.45 1.03 1.08Zm.73-3.07-.47.3c-.2.15-.36.36-.44.6a3.6 3.6 0 0 0-.08.65c0 .04-.03.14-.16.14h-1.4c-.14 0-.16-.09-.16-.13-.01-.5.11-.99.36-1.42A4.6 4.6 0 0 1 7.7 6.07c.15-.1.21-.21.3-.33.18-.2.28-.47.28-.74.01-.67-.53-1.14-1.18-1.14-.9 0-1.18.7-1.18 1.46H4.2c0-1.17.31-1.92.98-2.36a3.5 3.5 0 0 1 1.83-.44c.88 0 1.58.16 2.2.62.58.42.88 1.02.88 1.82 0 .5-.17.9-.43 1.24-.15.2-.44.47-.86.79h-.01Z\"/></svg>";
const IconHistory = "<svg aria-hidden=\"true\" class=\"svg-icon iconHistory\" width=\"19\" height=\"18\"  viewBox=\"0 0 19 18\"><path  d=\"M3 9a8 8 0 1 1 3.73 6.77L8.2 14.3A6 6 0 1 0 5 9l3.01-.01-4 4-4-4h3L3 9Zm7-4h1.01L11 9.36l3.22 2.1-.6.93L10 10V5Z\"/></svg>";
const IconHome = "<svg aria-hidden=\"true\" class=\"svg-icon iconHome\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 10v5a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5H0l9-9 9 9h-3Zm-8 1v6h4v-6H7Z\"/></svg>";
const IconHorizontalRule = "<svg aria-hidden=\"true\" class=\"svg-icon iconHorizontalRule\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M2 8h14v2H2V8Z\"/><path  d=\"M2 2h14v1H2V2Zm0 3h14v1H2V5Zm0 7h14v1H2v-1Zm0 3h14v1H2v-1Z\" opacity=\".4\"/></svg>";
const IconHundred = "<svg aria-hidden=\"true\" class=\"svg-icon iconHundred\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#F75D37\" d=\"M14 8a3 3 0 1 1 3-2.36A3 3 0 0 1 14.53 8H14Zm0-5a2 2 0 0 0-1.92 1.55 1.9 1.9 0 0 0-.01.76 2 2 0 0 0 3.54.78 1.9 1.9 0 0 0 .32-1.46A2 2 0 0 0 14 3ZM3.5 14.08a.5.5 0 0 1-.5-.5V9.24l-.77.76a.5.5 0 0 1-.85-.36.5.5 0 0 1 .15-.35l1.62-1.61a.51.51 0 0 1 .54-.11A.5.5 0 0 1 4 8v5.54a.5.5 0 0 1-.5.54Zm2.9-3.58A3 3 0 0 0 8 11h.53A3 3 0 0 0 11 7.44a3 3 0 1 0-4.6 3.07Zm.7-4.27A2 2 0 0 1 8 6a2 2 0 0 1 1.92 2.4 1.9 1.9 0 0 1-.31.69 2 2 0 0 1-3.54-.78 1.9 1.9 0 0 1 .32-1.46 2 2 0 0 1 .7-.62ZM6.81 15a.51.51 0 0 1-.44-.26.5.5 0 0 1 .21-.68l9.14-4.87a.51.51 0 0 1 .74.4.5.5 0 0 1-.27.49L7.05 15a.53.53 0 0 1-.24 0Zm3.44.75c.1.06.2.1.32.09a.5.5 0 0 0 .24-.06l4.81-2.64a.5.5 0 0 0 .07-.83.5.5 0 0 0-.56-.05l-4.8 2.65a.49.49 0 0 0-.08.84Z\"/></svg>";
const IconImage = "<svg aria-hidden=\"true\" class=\"svg-icon iconImage\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 3c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v12c0 1.09-.91 2-2 2H3c-1.09 0-2-.91-2-2V3Zm4.5 7.5L2 15h14l-4.5-6L8 13.51 5.5 10.5Zm0-4.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z\"/></svg>";
const IconInbox = "<svg aria-hidden=\"true\" class=\"svg-icon iconInbox\" width=\"20\" height=\"18\"  viewBox=\"0 0 20 18\"><path  d=\"M4.63 1h10.56a2 2 0 0 1 1.94 1.35L20 10.79V15a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-4.21l2.78-8.44c.25-.8 1-1.36 1.85-1.35Zm8.28 12 2-2h2.95l-2.44-7.32a1 1 0 0 0-.95-.68H5.35a1 1 0 0 0-.95.68L1.96 11h2.95l2 2h6Z\"/></svg>";
const IconInboxSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconInboxSm\" width=\"15\" height=\"14\"  viewBox=\"0 0 15 14\"><path  d=\"M4 1h7c.88 0 1.65.6 2 1.35L15 8v3a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V8l2-5.65C2.3 1.65 3.15 1 4 1Zm6 9 2-2h1l-1.46-4.63c-.15-.35-.52-.68-.95-.68H4.5c-.43 0-.8.3-1 .68L1.96 8H3l2 2h5Z\"/></svg>";
const IconIndent = "<svg aria-hidden=\"true\" class=\"svg-icon iconIndent\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 4H2V2h14v2ZM8 6v2h8V6H8Zm8 10H2v-2h14v2Zm-8-4h8v-2H8v2ZM6.5 9 2 5v8l4.5-4Z\"/></svg>";
const IconIndustry = "<svg aria-hidden=\"true\" class=\"svg-icon iconIndustry\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10 16v-4H8v4H2V4c0-1.1.9-2 2-2h6c1.09 0 2 .91 2 2v2h2c1.09 0 2 .91 2 2v8h-6ZM4 4v2h2V4H4Zm0 4v2h2V8H4Zm4-4v2h2V4H8Zm0 4v2h2V8H8Zm-4 4v2h2v-2H4Zm8 0v2h2v-2h-2Zm0-4v2h2V8h-2Z\"/></svg>";
const IconIndustrySm = "<svg aria-hidden=\"true\" class=\"svg-icon iconIndustrySm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 2a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2h3a1 1 0 0 1 1 1v8H2V2Zm2 1v2h2V3H4Zm2 3H4v2h2V6Zm0 3H4v2h2V9Zm2-3v2h2V6H8Zm2 3H8v2h2V9Z\"/></svg>";
const IconInfo = "<svg aria-hidden=\"true\" class=\"svg-icon iconInfo\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1a8 8 0 1 1 0 16A8 8 0 0 1 9 1Zm1 13V8H8v6h2Zm0-8V4H8v2h2Z\"/></svg>";
const IconInfoSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconInfoSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 1a6 6 0 1 1 0 12A6 6 0 0 1 7 1Zm1 10V6H6v5h2Zm0-6V3H6v2h2Z\"/></svg>";
const IconInstagram = "<svg aria-hidden=\"true\" class=\"svg-icon iconInstagram\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"url(#Instagrama)\" d=\"M9 1c-2.17 0-2.44.01-3.3.05a5.9 5.9 0 0 0-1.94.37 3.94 3.94 0 0 0-2.34 2.34c-.2.51-.33 1.09-.37 1.94C1 6.56 1 6.83 1 9s.01 2.44.05 3.3c.04.85.17 1.43.37 1.94a3.94 3.94 0 0 0 2.34 2.34c.51.2 1.1.33 1.94.37.86.04 1.13.05 3.3.05s2.44-.01 3.3-.05a5.92 5.92 0 0 0 1.94-.37 3.94 3.94 0 0 0 2.34-2.34c.2-.51.33-1.1.37-1.94.04-.86.05-1.13.05-3.3s-.01-2.44-.05-3.3a5.92 5.92 0 0 0-.37-1.94c-.2-.53-.48-.97-.92-1.42a3.9 3.9 0 0 0-1.42-.92 5.9 5.9 0 0 0-1.94-.37C11.44 1 11.17 1 9 1Zm0 1.42c2.14 0 2.39.03 3.23.07.78.03 1.2.16 1.49.27.37.15.64.32.92.6.28.28.45.55.6.92.1.28.24.7.27 1.49.04.84.05 1.1.05 3.23 0 2.14-.01 2.39-.05 3.23a4.5 4.5 0 0 1-.28 1.49c-.15.37-.32.64-.6.92a2.5 2.5 0 0 1-.92.6c-.28.1-.71.24-1.5.27-.84.04-1.09.05-3.23.05-2.14 0-2.4-.01-3.24-.05a4.53 4.53 0 0 1-1.49-.28 2.48 2.48 0 0 1-.92-.6 2.43 2.43 0 0 1-.6-.92 4.54 4.54 0 0 1-.28-1.5c-.03-.83-.04-1.09-.04-3.22s.01-2.4.04-3.24c.04-.78.17-1.21.28-1.49.14-.38.32-.64.6-.92.28-.28.54-.46.92-.6.28-.11.7-.24 1.48-.28.85-.03 1.13-.04 3.27-.04Zm0 2.47a4.1 4.1 0 1 0 0 8.22 4.1 4.1 0 0 0 0-8.22Zm0 6.78a2.67 2.67 0 1 1 0-5.34 2.67 2.67 0 0 1 0 5.34Zm5.23-6.94a.96.96 0 1 1-1.92 0 .96.96 0 0 1 1.92 0Z\"/><defs><linearGradient id=\"Instagrama\" x1=\"1.5\" x2=\"17\" y1=\"1\" y2=\"17\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#EC0D2B\"/><stop offset=\"1\" stop-color=\"#BF179F\"/></linearGradient></defs></svg>";
const IconInternational = "<svg aria-hidden=\"true\" class=\"svg-icon iconInternational\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5.8 11a19.81 19.81 0 0 1 0-4H3.34a5.99 5.99 0 0 0 0 4H5.8Zm.13 1H3.8a6.02 6.02 0 0 0 2.9 2.54c-.35-.7-.6-1.56-.77-2.54Zm6.27-1h2.46a6 6 0 0 0 0-4H12.2a19.8 19.8 0 0 1 0 4Zm-.13 1a9.25 9.25 0 0 1-.76 2.54A6.02 6.02 0 0 0 14.2 12h-2.13ZM7.1 11h3.78a17.18 17.18 0 0 0 0-4H7.1a17.18 17.18 0 0 0 0 4Zm.16 1c.34 1.8.99 3 1.73 3s1.39-1.2 1.73-3H7.27ZM5.93 6c.17-.98.42-1.85.76-2.54A6.02 6.02 0 0 0 3.8 6h2.13Zm6.14 0h2.13a6.02 6.02 0 0 0-2.9-2.54c.35.7.6 1.56.77 2.54Zm-4.8 0h3.46C10.4 4.2 9.74 3 9 3S7.61 4.2 7.27 6ZM9 17A8 8 0 1 1 9 1a8 8 0 0 1 0 16Z\"/></svg>";
const IconInternationalSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconInternationalSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M13 7A6 6 0 1 1 1 7a6 6 0 0 1 12 0Zm-5.99 4.6c.14-.16.3-.46.46-.91.16-.46.3-1.04.4-1.69H6.13c.09.65.23 1.23.39 1.69.16.45.32.75.46.91H7ZM7.97 8a15.04 15.04 0 0 0 0-2H6.03a15.04 15.04 0 0 0 0 2h1.94Zm.9 1c-.12.96-.34 1.8-.61 2.43A4.61 4.61 0 0 0 11.14 9H8.87Zm2.62-1a4.61 4.61 0 0 0 0-2H8.97a16.08 16.08 0 0 1 0 2h2.52ZM5.03 8a16.08 16.08 0 0 1 0-2H2.51a4.62 4.62 0 0 0 0 2h2.52ZM2.86 9a4.61 4.61 0 0 0 2.88 2.43A9.29 9.29 0 0 1 5.13 9H2.86Zm3.67-5.69A9.8 9.8 0 0 0 6.13 5h1.73a9.04 9.04 0 0 0-.39-1.69 3.07 3.07 0 0 0-.46-.91H7c-.14.16-.3.46-.46.91ZM8.87 5h2.27a4.61 4.61 0 0 0-2.88-2.43c.27.64.49 1.47.61 2.43ZM2.86 5h2.27c.12-.96.34-1.8.61-2.43A4.61 4.61 0 0 0 2.86 5Z\"/></svg>";
const IconItalic = "<svg aria-hidden=\"true\" class=\"svg-icon iconItalic\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7 3v2h2.58l-3.66 8H3v2h8v-2H8.42l3.66-8H15V3H7Z\"/></svg>";
const IconJira = "<svg aria-hidden=\"true\" class=\"svg-icon iconJira\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#2684FF\" d=\"M16.36 1H8.78a3.42 3.42 0 0 0 3.42 3.42h1.4v1.35A3.42 3.42 0 0 0 17 9.2V1.66a.66.66 0 0 0-.64-.66Z\"/><path fill=\"url(#Jiraa)\" d=\"M12.33 5H4.74a3.42 3.42 0 0 0 3.42 3.43h1.4v1.35a3.42 3.42 0 0 0 3.42 3.42V5.66a.66.66 0 0 0-.65-.66Z\"/><path fill=\"url(#Jirab)\" d=\"M8.36 9H.76a3.42 3.42 0 0 0 3.44 3.42h1.4v1.35a3.42 3.42 0 0 0 3.42 3.43V9.66A.66.66 0 0 0 8.36 9Z\"/><defs><linearGradient id=\"Jiraa\" x1=\"12.82\" x2=\"9.6\" y1=\"5.02\" y2=\"8.34\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".18\" stop-color=\"#0052CC\"/><stop offset=\"1\" stop-color=\"#2684FF\"/></linearGradient><linearGradient id=\"Jirab\" x1=\"346.65\" x2=\"210.84\" y1=\"327.03\" y2=\"460.17\" gradientUnits=\"userSpaceOnUse\"><stop offset=\".18\" stop-color=\"#0052CC\"/><stop offset=\"1\" stop-color=\"#2684FF\"/></linearGradient></defs></svg>";
const IconKey = "<svg aria-hidden=\"true\" class=\"svg-icon iconKey\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M17 5.5a4.5 4.5 0 0 1-5.8 4.3L10 11H8v2H6v2H4v2H1v-3.5l7.1-7.1A4.52 4.52 0 0 1 12.5 1 4.5 4.5 0 0 1 17 5.5Zm-4 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z\"/></svg>";
const IconKeySm = "<svg aria-hidden=\"true\" class=\"svg-icon iconKeySm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M13 4.5a3.5 3.5 0 0 1-4.5 3.36L7.5 9H6v2H4v2H1v-2.5l5.05-5.39A3.5 3.5 0 1 1 13 4.5Zm-3 .88a1.37 1.37 0 1 0 0-2.75 1.37 1.37 0 0 0 0 2.75Z\"/></svg>";
const IconLaptop = "<svg aria-hidden=\"true\" class=\"svg-icon iconLaptop\" width=\"24\" height=\"18\"  viewBox=\"0 0 24 18\"><path  d=\"M3 4c0-1.1.9-2 2-2h14a2 2 0 0 1 2 2v10h3v2H0v-2h3V4Zm16 0H5v9h14V4Z\"/></svg>";
const IconLaunchPad = "<svg aria-hidden=\"true\" class=\"svg-icon iconLaunchPad\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#E9531F\" d=\"M0 0h18v18H0z\"/><path fill=\"var(--white)\" d=\"M3.24 6.48a5.15 5.15 0 0 0 5.32.45 5.25 5.25 0 0 0 3.22-4.25l-1.44-.1c-.1 1.3-1.06 2.45-2.37 3.04-1.31.59-2.79.55-3.83-.27l-.9 1.13Zm6.16 3.55a1.03 1.03 0 1 0 0-2.06 1.03 1.03 0 0 0 0 2.06Zm3.83 4.12a5.7 5.7 0 0 1 1.3-9.34l.67 1.27a4.26 4.26 0 0 0-1 7l-.97 1.07Zm-3.04 1.33a5.88 5.88 0 0 0-2-4.89 5.47 5.47 0 0 0-5.27-.98L3.35 11a4.03 4.03 0 0 1 3.9.7 4.44 4.44 0 0 1 1.5 3.7l1.44.09Z\"/></svg>";
const IconLightbulb = "<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 6.38A6.48 6.48 0 0 0 7.78.04h-.02A6.49 6.49 0 0 0 2.05 5.6a6.31 6.31 0 0 0 2.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0 0 15 6.37ZM4.03 5.85A4.49 4.49 0 0 1 8 2.02a4.48 4.48 0 0 1 5 4.36 4.3 4.3 0 0 1-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 0 1-1.64-3.94ZM10 18a1 1 0 0 0 0-2H7a1 1 0 1 0 0 2h3Z\"/></svg>";
const IconLightbulbAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulbAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#9FA6AD\" d=\"M8 14a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H8Z\"/><path fill=\"#FFC166\" d=\"M8.45 2.03C11.38 1.74 14 3.88 14 6.73c0 1.54-.78 2.88-1.94 3.74h-.01a.93.93 0 0 0-.38.77v.14c0 .96-.82 1.62-1.67 1.62H8c-.85 0-1.67-.66-1.67-1.62v-.17a1 1 0 0 0-.43-.78 4.6 4.6 0 0 1-1.86-4.28 4.9 4.9 0 0 1 4.4-4.12h.01ZM5.5 7a.5.5 0 0 0 1 0A2.5 2.5 0 0 1 9 4.5a.5.5 0 0 0 0-1A3.5 3.5 0 0 0 5.5 7Z\"/></svg>";
const IconLightbulbSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconLightbulbSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M12 4.73C12 1.88 9.38-.26 6.45.03h-.01a4.9 4.9 0 0 0-4.4 4.12A4.6 4.6 0 0 0 3.9 8.43a1 1 0 0 1 .43.78v.17c0 .96.82 1.62 1.67 1.62h2c.85 0 1.66-.66 1.66-1.62v-.14c0-.31.15-.6.39-.77A4.63 4.63 0 0 0 12 4.73ZM4.02 4.4c.15-1.19 1.22-2.22 2.63-2.38C8.55 1.84 10 3.2 10 4.72c0 .85-.42 1.62-1.12 2.13A2.93 2.93 0 0 0 7.68 9H6.31A3 3 0 0 0 5.1 6.83 2.6 2.6 0 0 1 4.02 4.4ZM6 12a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2H6Z\"/></svg>";
const IconLink = "<svg aria-hidden=\"true\" class=\"svg-icon iconLink\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7.22 11.83a6 6 0 0 0 1.62.85l.61-1.8a4.1 4.1 0 1 1 4.04-.8l1.26 1.42a6 6 0 1 0-7.53.33Zm3.43-5.6a6 6 0 0 0-1.6-.87L8.4 7.15a4.1 4.1 0 1 1-4.05.73L3.12 6.43a6 6 0 1 0 7.53-.2Z\"/></svg>";
const IconLinkSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconLinkSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M6.01 6.77c.27.52.7.95 1.22 1.22L6.46 9.5a4.5 4.5 0 1 1 5.22-.83l-1.2-1.2A2.79 2.79 0 1 0 6 6.76Zm.76-.76.77-1.52a4.5 4.5 0 1 1-5.22.83l1.2 1.2a2.79 2.79 0 1 0 3.25-.5Z\"/></svg>";
const IconLinkedIn = "<svg aria-hidden=\"true\" class=\"svg-icon iconLinkedIn\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#1178B3\" d=\"M15 1a2 2 0 0 1 2 1.85V15a2 2 0 0 1-1.85 2H3a2 2 0 0 1-2-1.85V3a2 2 0 0 1 1.85-2H15Zm-3.21 5.8c-1.09 0-1.83.56-2.19 1.13l-.06.11h-.03V7H7.23v7.63H9.6v-3.77c0-1 .2-1.96 1.43-1.96 1.16 0 1.23 1.04 1.23 1.9v3.83h2.37v-4.19c0-2.05-.44-3.63-2.84-3.63ZM5.75 7H3.37v7.63h2.38V7Zm-1.2-3.8a1.38 1.38 0 1 0 0 2.75 1.38 1.38 0 0 0 0-2.75Z\"/></svg>";
const IconLocation = "<svg aria-hidden=\"true\" class=\"svg-icon iconLocation\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M2 6.38C2 9.91 8.1 17.7 8.1 17.7c.22.29.58.29.8 0 0 0 6.1-7.8 6.1-11.32A6.44 6.44 0 0 0 8.5 0 6.44 6.44 0 0 0 2 6.38Zm9.25.12a2.75 2.75 0 1 1-5.5 0 2.75 2.75 0 0 1 5.5 0Z\"/></svg>";
const IconLocationSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconLocationSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M11 5v.36c0 2.22-2.9 6.33-3.76 7.51a.29.29 0 0 1-.48 0C5.9 11.7 3 7.57 3 5.36V5a4 4 0 1 1 8 0ZM7 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"/></svg>";
const IconLock = "<svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 9a2 2 0 0 0-2-2V6A5 5 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9Zm-7 5a2 2 0 1 1 0-4 2 2 0 0 1 0 4Zm3.1-7H5.9V6a3.1 3.1 0 0 1 6.2 0v1Z\"/></svg>";
const IconLockSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconLockSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M3.5 5C2.67 5 2 5.67 2 6.5v5c0 .83.67 1.5 1.5 1.5h7c.83 0 1.5-.67 1.5-1.5v-5c0-.83-.67-1.5-1.5-1.5v-.5a3.5 3.5 0 1 0-7 0V5Zm1.4 0v-.5a2.1 2.1 0 1 1 4.2 0V5H4.9Zm3.6 4a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"/></svg>";
const IconMail = "<svg aria-hidden=\"true\" class=\"svg-icon iconMail\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m1 6 8 5 8-5V4L9 9 1 4c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v10c0 1.09-.91 2-2 2H3c-1.09 0-2-.91-2-2V6Z\"/></svg>";
const IconMailOpen = "<svg aria-hidden=\"true\" class=\"svg-icon iconMailOpen\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16.6 4.65a1 1 0 0 1 0 1.7L9 11 1.4 6.35a1 1 0 0 1 0-1.7L9 0l7.6 4.65ZM1 8l8 5 8-5v8c0 1.09-.91 2-2 2H3c-1.09 0-2-.91-2-2V8Z\"/></svg>";
const IconMailOpenSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconMailOpenSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7 9 1.52 5.87a1 1 0 0 1 0-1.74L7 1l5.48 3.13a1 1 0 0 1 0 1.74L7 9ZM1 7.14l6 3.6 6-3.6v5.43c0 .8-.71 1.43-1.5 1.43h-9c-.79 0-1.5-.62-1.5-1.43V7.14Z\"/></svg>";
const IconMailSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconMailSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m7 8.74-6-3.6v5.43c0 .8.71 1.43 1.5 1.43h9c.79 0 1.5-.62 1.5-1.43V5.14l-6 3.6ZM7 7l6-3.57c0-.8-.71-1.43-1.5-1.43h-9C1.68 2 1 2.64 1 3.43L7 7Z\"/></svg>";
const IconMarkdown = "<svg aria-hidden=\"true\" class=\"svg-icon iconMarkdown\" width=\"21\" height=\"18\"  viewBox=\"0 0 21 18\"><path  d=\"M21 14a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h17a2 2 0 0 1 2 2v10ZM4.3 13V8.35l2.2 2.88 2.2-2.88V13H11V5H8.7L6.5 7.88 4.3 5H2v8h2.3Zm15.2-4H17V5h-2v4h-2.5l3.5 4.5L19.5 9Z\"/></svg>";
const IconMarkdownPreview = "<svg aria-hidden=\"true\" class=\"svg-icon iconMarkdownPreview\" width=\"21\" height=\"18\"  viewBox=\"0 0 21 18\"><path fill=\"#0C0D0E\" stroke=\"#0C0D0E\" d=\"M6.77 8.7h.5V7.04l.3.42.4.58.41-.58.3-.42v1.68h2.27V5.74l.3.4 1.92 2.65.4.56.41-.56 1.92-2.64.58-.8h-1.85V3h-2.1v2.35h-1.58V3H8.92l-.15.21-.8 1.12-.8-1.12L7.04 3H5v5.7h1.77ZM1.5 11.5h18v1h-18v-1Zm0 3h18v1h-18v-1ZM.5 4c0-.83.67-1.5 1.5-1.5h17c.83 0 1.5.67 1.5 1.5v4c0 .83-.67 1.5-1.5 1.5H2A1.5 1.5 0 0 1 .5 8V4Z\"/></svg>";
const IconMedal = "<svg aria-hidden=\"true\" class=\"svg-icon iconMedal\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M9 17c-2.2 0-4-1.57-4-3.5S6.8 10 9 10s4 1.57 4 3.5S11.2 17 9 17Zm0-1.9c1.21 0 2.1-.78 2.1-1.6 0-.82-.89-1.6-2.1-1.6s-2.1.78-2.1 1.6c0 .82.89 1.6 2.1 1.6Z\"/><path fill=\"#3F3F3F\" d=\"M6.9 9.42a5.53 5.53 0 0 1 3.5-.24L4.5 1H1.47a.25.25 0 0 0-.2.39L6.9 9.42Zm2.88-3.26L11.6 8.7h.01l5.11-7.3a.25.25 0 0 0-.2-.4H13.5L9.78 6.16Z\" opacity=\".4\"/></svg>";
const IconMerge = "<svg aria-hidden=\"true\" class=\"svg-icon iconMerge\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5.45 3H1v2h3.55l3.6 4-3.6 4H1v2h4.45l4.5-5H13v3l4-4-4-4v3H9.95l-4.5-5Z\"/></svg>";
const IconMessage = "<svg aria-hidden=\"true\" class=\"svg-icon iconMessage\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1 2a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H6Zm-5 9V4c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v9c0 1.09-.91 2-2 2H4.5L1 18Zm2.76-5h11.23a.06.06 0 0 0 0-.01H15V4a.06.06 0 0 0-.01-.01H3v9.65l.76-.65Z\"/></svg>";
const IconMessageCompose = "<svg aria-hidden=\"true\" class=\"svg-icon iconMessageCompose\" width=\"20\" height=\"18\"  viewBox=\"0 0 20 18\"><path  d=\"m3 13.65.76-.65h5.53l-2 2H4.5L1 18V4c0-1.1.9-2 2-2h11c1.09 0 2 .91 2 2v2.27l-.02.02L14 8.27V4.01L3 4v9.65Zm16.23-4.82L18.1 7.71a.5.5 0 0 0-.7 0l-1.2 1.15 1.88 1.84 1.14-1.16a.5.5 0 0 0 0-.71Zm-3.86.87L9 16.11V18h1.88l6.37-6.43-1.88-1.88ZM5 7a1 1 0 0 1 1-1h5a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1 2a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2H6Z\"/></svg>";
const IconMicroscope = "<svg aria-hidden=\"true\" class=\"svg-icon iconMicroscope\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#D6D9DC\" d=\"M13.5 9.5A3.5 3.5 0 0 0 10 6V4a5.5 5.5 0 0 1 2.6 10.35c.23.87.4 1.65.4 1.65H8l.24-1H5a1 1 0 1 1 0-2h3.84c.22-.57.45-1 .66-1h2c.13 0 .27.17.41.43A3.5 3.5 0 0 0 13.5 9.5Z\"/><path fill=\"#9FA6AD\" d=\"M2 17a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H2Z\"/><path fill=\"#D6D9DC\" d=\"M5 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V4Z\"/><path fill=\"#9FA6AD\" d=\"M6 1h2v2H6V1Zm0 8h2v2H6V9Z\"/></svg>";
const IconMicrosoft = "<svg aria-hidden=\"true\" class=\"svg-icon iconMicrosoft\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#00A4EF\" d=\"M9 18H1v-8h8v8Z\"/><path fill=\"#FFB902\" d=\"M18 18h-8v-8h8v8Z\"/><path fill=\"#F25C33\" d=\"M9 9H1V1h8v8Z\"/><path fill=\"#7FBA00\" d=\"M18 9h-8V1h8v8Z\"/></svg>";
const IconMicrosoftTeams = "<svg aria-hidden=\"true\" class=\"svg-icon iconMicrosoftTeams\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#5158CC\" d=\"M15.25 6.25a2 2 0 1 0 0-4 2 2 0 0 0 0 4ZM17.2 7H13v5.5a2.5 2.5 0 0 0 5 0V7.8a.8.8 0 0 0-.8-.8Z\"/><path fill=\"#7B82EA\" d=\"M12 3.5a2.5 2.5 0 0 1-2 2.45V5a2 2 0 0 0-2-2h-.95a2.5 2.5 0 0 1 4.95.5ZM9.5 17a4.5 4.5 0 0 1-4.24-3H8a2 2 0 0 0 2-2V7h3a1 1 0 0 1 1 1v4.5A4.5 4.5 0 0 1 9.5 17Z\"/><path fill=\"#4D54BC\" d=\"M1 4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h7a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H1Zm1 2h5v1H5v4H4V7H2V6Z\"/></svg>";
const IconMigrate = "<svg aria-hidden=\"true\" class=\"svg-icon iconMigrate\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14 3H5V1h9a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5v-2h9V3ZM2 10V8h5V5l4 4-4 4v-3H2Z\"/></svg>";
const IconMilestone = "<svg aria-hidden=\"true\" class=\"svg-icon iconMilestone\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M9 3H7V1h2v2Zm4 5H3a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h10l2 2-2 2ZM9 5H7v2h2V5ZM7 17h2V9H7v8Z\"/></svg>";
const IconMinus = "<svg aria-hidden=\"true\" class=\"svg-icon iconMinus\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M4 8v2h10V8H4Z\"/></svg>";
const IconMinusSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconMinusSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M3 6v2h8V6H3Z\"/></svg>";
const IconModerator = "<svg aria-hidden=\"true\" class=\"svg-icon iconModerator\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M8.4.78c.33-.43.87-.43 1.2 0l5.8 7.44c.33.43.33 1.13 0 1.56l-5.8 7.44c-.33.43-.87.43-1.2 0L2.6 9.78a1.34 1.34 0 0 1 0-1.56L8.4.78Z\"/></svg>";
const IconModeratorSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconModeratorSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M6.53.75c.25-.33.67-.33.93 0l4.42 5.66c.26.32.25.86 0 1.19l-4.42 5.66c-.26.33-.68.32-.93 0L2.1 7.6a1.02 1.02 0 0 1 0-1.2L6.53.76Z\"/></svg>";
const IconMoney = "<svg aria-hidden=\"true\" class=\"svg-icon iconMoney\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.25 8.13c-1.76-.46-2.33-.93-2.33-1.67 0-.85.79-1.44 2.1-1.44 1.38 0 1.95.99 2 1.96h1.71a3.74 3.74 0 0 0-2.72-3.32L10 2H8v1.6c-1.5.32-2.98 1.38-2.98 2.87 0 1.8 1.6 2.69 3.76 3.2 1.94.47 2.33 1.15 2.33 1.87 0 .54-.38 1.4-2.1 1.4-1.6 0-2.22-1.03-2.3-1.94H5c.1 1.7 1.53 2.96 3.01 3.27L8 16h2v-1.71c1.51-.29 3-1.2 3-2.79 0-2.2-2-2.92-3.75-3.37Z\"/></svg>";
const IconNotInterested = "<svg aria-hidden=\"true\" class=\"svg-icon iconNotInterested\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 17A8 8 0 1 1 9 1a8 8 0 0 1 0 16Zm0-2a6 6 0 0 0 4.89-9.48L5.52 13.9C6.5 14.59 7.7 15 9 15Zm-4.89-2.52 8.37-8.37a6 6 0 0 0-8.37 8.37Z\"/></svg>";
const IconNotInterestedSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconNotInterestedSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M13 7A6 6 0 1 1 1 7a6 6 0 0 1 12 0Zm-2 0c0-.74-.2-1.44-.56-2.03l-5.47 5.47A4 4 0 0 0 11 7ZM3.56 9.03l5.47-5.47a4 4 0 0 0-5.48 5.48Z\"/></svg>";
const IconOkta = "<svg aria-hidden=\"true\" class=\"svg-icon iconOkta\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#007DC1\" d=\"M9 17A8 8 0 1 0 9 1a8 8 0 0 0 0 16Zm0-4a4 4 0 1 1 0-8 4 4 0 0 1 0 8Z\"/></svg>";
const IconOne = "<svg aria-hidden=\"true\" class=\"svg-icon iconOne\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M11 16H9V6.97L6 7.8V5.56L10.5 4h.5v12Zm5.25-1a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\" opacity=\".2\"/><path  d=\"M9 15H7V5.97L4 6.8V4.56L8.5 3H9v12Zm5.25-1a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\"/></svg>";
const IconOneLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconOneLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M16 32h4V8h-1l-9 3.13v4.5l6-1.7V32Zm11 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\" opacity=\".2\"/><path  d=\"M14 30h4V6h-1L8 9.13v4.5l6-1.7V30Zm11 0a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"/></svg>";
const IconOpenSource = "<svg aria-hidden=\"true\" class=\"svg-icon iconOpenSource\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M4 5.97c-.57-.11-1-.62-1-1.22v-1.5C3 2.56 3.56 2 4.25 2h1.5C6.44 2 7 2.56 7 3.25V4l3-3v2h1c.78.03 1.46.35 2.06.94.6.59.9 1.28.94 2.06v6.02c.57.12 1 .62 1 1.23v1.5c0 .69-.56 1.25-1.25 1.25h-1.5c-.69 0-1.25-.56-1.25-1.25v-1.5c0-.6.43-1.1 1-1.22V6a.94.94 0 0 0-.31-.69c-.21-.2-.42-.29-.7-.31h-1v2L7 4v.75c0 .6-.43 1.1-1 1.22v6.06c.57.11 1 .62 1 1.22v1.5C7 15.44 6.44 16 5.75 16h-1.5C3.56 16 3 15.44 3 14.75v-1.5c0-.6.43-1.1 1-1.22V5.97ZM6 5V3H4v2h2Zm-2 8v2h2v-2H4Zm8 0v2h2v-2h-2Z\"/></svg>";
const IconOrderedList = "<svg aria-hidden=\"true\" class=\"svg-icon iconOrderedList\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 6h1V2H2v1h1v3Zm.8 2H2V7h3v.9L3.2 10H5v1H2v-.9L3.8 8ZM2 13v-1h3v4H2v-1h2v-.5H3v-1h1V13H2Zm5-8V3h9v2H7Zm0 10h9v-2H7v2Zm9-5H7V8h9v2Z\"/></svg>";
const IconOutdent = "<svg aria-hidden=\"true\" class=\"svg-icon iconOutdent\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 4H2V2h14v2ZM8 6v2h8V6H8Zm8 10H2v-2h14v2Zm-8-4h8v-2H8v2ZM1.5 9 6 5v8L1.5 9Z\"/></svg>";
const IconPaperclip = "<svg aria-hidden=\"true\" class=\"svg-icon iconPaperclip\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 9.5C1 6.5 3.5 4 6.5 4H13c2.2 0 4 1.8 4 4s-1.8 4-4 4H7.5C6.1 12 5 10.9 5 9.5S6.1 7 7.5 7H12v2H7.4c-.5 0-.5 1 0 1H13a2 2 0 0 0 2-2 2 2 0 0 0-2-2H6.5C4.6 6 3 7.6 3 9.5S4.6 13 6.5 13H12v2H6.5C3.5 15 1 12.5 1 9.5Z\"/></svg>";
const IconPeak = "<svg aria-hidden=\"true\" class=\"svg-icon iconPeak\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10.5 3.5 8 7.25l2 2.25L8.5 11l-3-3.5L1 14h16L10.5 3.5Z\"/></svg>";
const IconPencil = "<svg aria-hidden=\"true\" class=\"svg-icon iconPencil\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#F1B600\" d=\"m2 13.13 8.5-8.5 2.88 2.88-8.5 8.5H2v-2.88Z\"/><path fill=\"#E87C87\" d=\"m13.68 2.15 2.17 2.17c.2.2.2.51 0 .71L14.5 6.39l-2.88-2.88 1.35-1.36c.2-.2.51-.2.71 0Z\"/></svg>";
const IconPencilSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconPencilSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path fill=\"#F1B600\" d=\"m2 10.12 6.37-6.43 1.88 1.88L3.88 12H2v-1.88Z\"/><path fill=\"#E87C87\" d=\"m11.1 1.71 1.13 1.12c.2.2.2.51 0 .71L11.1 4.7 9.21 2.86l1.17-1.15c.2-.2.51-.2.71 0Z\"/></svg>";
const IconPeople = "<svg aria-hidden=\"true\" class=\"svg-icon iconPeople\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M17 14c0 .44-.45 1-1 1H9a1 1 0 0 1-1-1H2c-.54 0-1-.56-1-1 0-2.63 3-4 3-4s.23-.4 0-1c-.84-.62-1.06-.59-1-3 .06-2.42 1.37-3 2.5-3s2.44.58 2.5 3c.06 2.41-.16 2.38-1 3-.23.59 0 1 0 1s1.55.71 2.42 2.09c.78-.72 1.58-1.1 1.58-1.1s.23-.4 0-1c-.84-.61-1.06-.58-1-3 .06-2.41 1.37-3 2.5-3s2.44.59 2.5 3c.05 2.42-.16 2.39-1 3-.23.6 0 1 0 1s3 1.38 3 4Z\"/></svg>";
const IconPeopleSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconPeopleSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 11c-.5 0-1-.5-1-1 0-2 2-3 2-3s.38-.63 0-1a3.97 3.97 0 0 0-.2-.18C2.45 5.51 2 5.12 2 4c0-1.33 1.15-2 2-2 .85 0 2 .67 2 2 0 1.12-.44 1.5-.8 1.82L5 6c-.38.38 0 1 0 1s2 1 2 3c0 .5-.5 1-1 1H2Zm6 1c-.5 0-1-.5-1-1 0-2 2-3 2-3s.38-.63 0-1a3.97 3.97 0 0 0-.2-.18C8.45 6.51 8 6.12 8 5c0-1.33 1.15-2 2-2 .85 0 2 .67 2 2 0 1.12-.44 1.5-.8 1.82A4 4 0 0 0 11 7c-.38.38 0 1 0 1s2 1 2 3c0 .5-.5 1-1 1H8Z\"/></svg>";
const IconPerson = "<svg aria-hidden=\"true\" class=\"svg-icon iconPerson\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 15a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-1c0-2.63 4-4 4-4s.23-.4 0-1c-.84-.62-.94-1.59-1-4 .17-2.41 1.87-3 3-3s2.83.59 3 3c-.06 2.41-.16 3.38-1 4-.23.59 0 1 0 1s4 1.37 4 4v1Z\"/></svg>";
const IconPhone = "<svg aria-hidden=\"true\" class=\"svg-icon iconPhone\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 8c1.12 2.2 2.8 3.87 5 5l2-2h2a2 2 0 0 1 2 2v1.5c0 .88-.63 1.5-1.5 1.5C7.2 16 2 10.8 2 3.5 2 2.62 2.63 2 3.5 2H5a2 2 0 0 1 2 2v2L5 8Z\"/></svg>";
const IconPlaceholder = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlaceholder\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"var(--white)\" d=\"M0 0h18v18H0z\"/></svg>";
const IconPlaceholderLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlaceholderLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path fill=\"var(--white)\" d=\"M0 0h36v36H0z\"/></svg>";
const IconPlaceholderSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlaceholderSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path fill=\"var(--white)\" d=\"M0 0h14v14H0z\"/></svg>";
const IconPlay = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlay\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M3 2.87a1 1 0 0 1 1.55-.83l9.2 6.13a1 1 0 0 1 0 1.66l-9.2 6.13A1 1 0 0 1 3 15.13V2.87Z\"/></svg>";
const IconPlus = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlus\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10 2H8v6H2v2h6v6h2v-6h6V8h-6V2Z\"/></svg>";
const IconPlusOne = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlusOne\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#9966CB\" d=\"M7 9h3v2H7v3H5v-3H2V9h3V6h2v3Zm10 6h-2V6.31l-3 .99V5.46l4.76-1.79H17V15Z\"/><path fill=\"#F75D37\" d=\"M2.7 6.95a.5.5 0 0 1-.19.03.49.49 0 0 1-.35-.09l-1-1a.5.5 0 0 1 .36-.85.5.5 0 0 1 .35.14l1 .95a.51.51 0 0 1 0 .71.5.5 0 0 1-.16.1Zm6.65 0a.5.5 0 0 0 .2.03c.12.02.25-.01.35-.09l1-1a.5.5 0 0 0-.36-.85.51.51 0 0 0-.35.14l-1 .95a.51.51 0 0 0 0 .71c.05.05.1.08.16.1Zm1.15 8.03a.5.5 0 0 0 .36-.14.51.51 0 0 0 0-.7l-1-.96a.51.51 0 0 0-.71 0 .5.5 0 0 0 0 .71l1 1c.1.08.22.1.35.1Zm-9.18-.03a.5.5 0 0 0 .2.03c.12.02.25-.01.35-.09l1-1a.5.5 0 0 0-.36-.85.51.51 0 0 0-.35.14l-1 .95a.51.51 0 0 0 0 .71c.05.05.1.08.16.1Z\" opacity=\".7\"/><path  d=\"M6 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM.5 10.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM12 10a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-6 6a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z\" opacity=\".4\"/></svg>";
const IconPlusSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconPlusSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M8 2H6v4H2v2h4v4h2V8h4V6H8V2Z\"/></svg>";
const IconPromoteDemote = "<svg aria-hidden=\"true\" class=\"svg-icon iconPromoteDemote\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5.5 3.5 1 8h3v4h3V8h3L5.5 3.5Z\"/><path  d=\"M11 6v3H8l4.5 5.5L17 9h-3V6h-3Z\" opacity=\".5\"/></svg>";
const IconPromoted = "<svg aria-hidden=\"true\" class=\"svg-icon iconPromoted\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H3Zm4 4a1 1 0 0 1 1-1h5a1 1 0 0 1 1 1v5a1 1 0 1 1-2 0V7.41L5.91 13.5a1 1 0 0 1-1.41-1.41L10.59 6H8a1 1 0 0 1-1-1Z\"/></svg>";
const IconPromotedSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconPromotedSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2.5 1C1.67 1 1 1.67 1 2.5v9c0 .83.67 1.5 1.5 1.5h9c.83 0 1.5-.67 1.5-1.5v-9c0-.83-.67-1.5-1.5-1.5h-9ZM5 4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0V6.41L4.91 10.5A1 1 0 0 1 3.5 9.09L7.59 5H6a1 1 0 0 1-1-1Z\"/></svg>";
const IconQuestion = "<svg aria-hidden=\"true\" class=\"svg-icon iconQuestion\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m4 15-3 3V4c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v9c0 1.09-.91 2-2 2H4Zm7.75-3.97c.72-.83.98-1.86.98-2.94 0-1.65-.7-3.22-2.3-3.83a4.41 4.41 0 0 0-3.02 0 3.8 3.8 0 0 0-2.32 3.83c0 1.29.35 2.29 1.03 3a3.8 3.8 0 0 0 2.85 1.07c.62 0 1.2-.11 1.71-.34.65.44 1 .68 1.06.7.23.13.46.23.7.3l.59-1.13a5.2 5.2 0 0 1-1.28-.66Zm-1.27-.9a5.4 5.4 0 0 0-1.5-.8l-.45.9c.33.12.66.29.98.5-.2.07-.42.11-.65.11-.61 0-1.12-.23-1.52-.68-.86-1-.86-3.12 0-4.11.8-.9 2.35-.9 3.15 0 .9 1.01.86 3.03-.01 4.08Z\"/></svg>";
const IconQuestionEs = "<svg aria-hidden=\"true\" class=\"svg-icon iconQuestionEs\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.13 7.84c.44 0 .77-.1 1-.3.23-.21.35-.5.35-.89 0-.4-.12-.7-.35-.95a1.3 1.3 0 0 0-.96-.38H7.65v2.52h1.48ZM1 18l3-3h11c1.09 0 2-.91 2-2V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v14Zm6.65-5.98H6V3.98h3.13c.6 0 1.14.11 1.6.33a2.48 2.48 0 0 1 1.42 2.33c0 .79-.27 1.41-.81 1.87-.54.45-1.28.68-2.24.68H7.65v2.83Z\"/></svg>";
const IconQuestionPt = "<svg aria-hidden=\"true\" class=\"svg-icon iconQuestionPt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.13 7.84c.44 0 .77-.1 1-.3.23-.21.35-.5.35-.89 0-.4-.12-.7-.35-.95a1.3 1.3 0 0 0-.96-.38H7.65v2.52h1.48ZM1 18l3-3h11c1.09 0 2-.91 2-2V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v14Zm6.65-5.98H6V3.98h3.13c.6 0 1.14.11 1.6.33a2.48 2.48 0 0 1 1.42 2.33c0 .79-.27 1.41-.81 1.87-.54.45-1.28.68-2.24.68H7.65v2.83Z\"/></svg>";
const IconQuestionRu = "<svg aria-hidden=\"true\" class=\"svg-icon iconQuestionRu\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M7.65 10.69h1.42c.4 0 .7-.1.91-.28a.96.96 0 0 0 .33-.77c0-.74-.38-1.11-1.14-1.12H7.65v2.17Zm1.23-3.34c.83-.02 1.25-.35 1.25-1 0-.37-.1-.63-.32-.78-.2-.17-.54-.25-1-.25H7.65v2.03h1.23ZM1 18l3-3h11c1.09 0 2-.91 2-2V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v14ZM6 3.98h2.8c.98 0 1.72.19 2.22.56.5.38.76.92.76 1.64 0 .4-.1.74-.3 1.05-.2.3-.5.51-.85.65.41.1.73.31.97.63.24.3.36.7.36 1.14 0 .78-.25 1.36-.74 1.76-.5.4-1.2.6-2.1.6H6V3.99Z\"/></svg>";
const IconQuote = "<svg aria-hidden=\"true\" class=\"svg-icon iconQuote\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M0 4c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v9l-1.75 3H4l1.75-3H2a2 2 0 0 1-2-2V4Zm9 0c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v9l-1.75 3H13l1.75-3H11a2 2 0 0 1-2-2V4Z\"/></svg>";
const IconRedact = "<svg aria-hidden=\"true\" class=\"svg-icon iconRedact\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10 1h7v4h-7V1ZM1 13h7v4H1v-4Zm16-6H1v4h16V7ZM9 2.21c-.24-.37-.59-.71-1.15-.71-.81 0-1.18.73-1.42 1.2-.14.3-.43.3-.57 0-.24-.47-.6-1.2-1.42-1.2s-1.18.73-1.42 1.2c-.14.3-.44.3-.58 0-.24-.47-.6-1.2-1.42-1.2v1.3L1 2.78c.08.05.22.33.31.5.24.48.6 1.21 1.42 1.21.81 0 1.18-.73 1.42-1.2.14-.3.43-.3.58 0 .24.47.6 1.2 1.41 1.2.82 0 1.18-.73 1.42-1.2.15-.3.44-.3.58 0 .18.35.42.83.86 1.06V2.21Zm6.85 11.29c.56 0 .91.34 1.15.71v2.15c-.44-.23-.68-.71-.86-1.07-.14-.28-.43-.28-.58 0-.24.48-.6 1.21-1.42 1.21-.81 0-1.17-.73-1.41-1.2-.15-.3-.44-.3-.58 0-.24.47-.6 1.2-1.42 1.2s-1.18-.73-1.42-1.2a1.94 1.94 0 0 0-.31-.51h.02V13.5c.82 0 1.18.73 1.42 1.2.14.3.44.3.58 0 .24-.47.6-1.2 1.42-1.2.81 0 1.18.73 1.42 1.2.14.3.43.3.57 0 .24-.47.6-1.2 1.42-1.2Z\"/></svg>";
const IconRedactSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconRedactSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M8 1h5v2.5H8V1Zm-7 9h5v2.5H1V10Zm12-4.5H1V8h12V5.5ZM7 1.98a1.03 1.03 0 0 0-.86-.48c-.61 0-.88.48-1.06.8-.12.2-.33.2-.44 0-.18-.32-.45-.8-1.06-.8-.61 0-.89.48-1.07.8-.1.2-.32.2-.43 0-.18-.32-.45-.8-1.06-.8v.86H1c.06.03.17.22.23.34.18.32.46.8 1.07.8.6 0 .88-.48 1.06-.8.11-.2.32-.2.43 0 .18.32.46.8 1.07.8.6 0 .88-.48 1.06-.8.11-.2.32-.2.44 0 .13.23.31.55.64.71V1.98Zm5.14 8.52c.42 0 .68.23.86.48v1.43c-.33-.16-.51-.48-.64-.71-.12-.2-.33-.2-.44 0-.18.32-.45.8-1.06.8-.61 0-.89-.48-1.07-.8-.1-.2-.32-.2-.43 0-.18.32-.45.8-1.06.8-.61 0-.89-.48-1.07-.8-.06-.12-.17-.3-.23-.34h.02v-.86c.6 0 .88.48 1.06.8.11.2.32.2.43 0 .18-.32.46-.8 1.07-.8.6 0 .88.48 1.06.8.11.2.32.2.44 0 .18-.32.45-.8 1.06-.8Z\"/></svg>";
const IconRefresh = "<svg aria-hidden=\"true\" class=\"svg-icon iconRefresh\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14.65 3.35A8 8 0 1 0 16.73 11h-2.08a6 6 0 1 1-1.43-6.22L10 8h7V1l-2.35 2.35Z\"/></svg>";
const IconRefreshSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconRefreshSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M11.24 2.76 13 1v5H8l1.9-1.9a4.09 4.09 0 0 0-7 2.9 4.1 4.1 0 0 0 8.08 1h1.94a6 6 0 1 1-1.68-5.24Z\"/></svg>";
const IconRelocation = "<svg aria-hidden=\"true\" class=\"svg-icon iconRelocation\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 5h-2V1H2a2 2 0 0 0-2 2v11h1a3 3 0 0 0 6 0h4a3 3 0 1 0 6 0h1V9l-3-4ZM4 15.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Zm10.5-9 2 2.5H13V6.5h1.5Zm-.5 9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z\"/></svg>";
const IconRelocationSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconRelocationSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M10 3H8V1H2C.91 1 0 1.91 0 3v8h.7a2.5 2.5 0 0 0 4.6 0h2.4a2.5 2.5 0 0 0 4.6 0h.7V7l-3-4Zm-.5 1.5 2 2.5H8V4.5h1.5ZM4.2 10a1.2 1.2 0 1 1-2.4 0 1.2 1.2 0 0 1 2.4 0Zm7 0a1.2 1.2 0 1 1-2.4 0 1.2 1.2 0 0 1 2.4 0Z\"/></svg>";
const IconRemote = "<svg aria-hidden=\"true\" class=\"svg-icon iconRemote\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m17.86 6.66-1.77 1.77a10 10 0 0 0-14.14 0L.18 6.66a12.5 12.5 0 0 1 17.68 0Zm-3.54 3.54-1.76 1.77a5 5 0 0 0-7.07 0L3.72 10.2a7.5 7.5 0 0 1 10.6 0Zm-3.53 3.54L9.02 15.5l-1.77-1.76a2.5 2.5 0 0 1 3.54 0Z\"/></svg>";
const IconRemoteSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconRemoteSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m13.36 4.64-1.41 1.41a7 7 0 0 0-9.9 0L.64 4.64a9 9 0 0 1 12.72 0ZM3.47 7.47a5 5 0 0 1 7.07 0L9.12 8.88a3 3 0 0 0-4.24 0L3.47 7.47ZM7 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\"/></svg>";
const IconReply = "<svg aria-hidden=\"true\" class=\"svg-icon iconReply\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M8 5.87V2L1 8.63 8 15v-3.7c4.72 0 7.64 1.48 10 4.7-.94-4.6-3.39-9.2-10-10.13Z\"/></svg>";
const IconReplySm = "<svg aria-hidden=\"true\" class=\"svg-icon iconReplySm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5 4V1L0 6.5 5 12V8.43c3.75 0 6.63 1.2 8.5 3.82C12.75 8.5 10.25 4.75 5 4Z\"/></svg>";
const IconReputation = "<svg aria-hidden=\"true\" class=\"svg-icon iconReputation\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M12.1 2.55A1 1 0 0 1 13 2h3.5a1 1 0 1 1 0 2h-2.88l-1.73 3.45A1 1 0 0 1 11 8H6.17l-3.25 7.88a1 1 0 1 1-1.84-.76l3.5-8.5A1 1 0 0 1 5.5 6h4.88l1.73-3.45Z\"/><path  d=\"M1 3a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H2a1 1 0 0 1-1-1Zm0 4a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm14-1a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2h-1Zm-8 5a1 1 0 0 1 1-1h8a1 1 0 1 1 0 2H8a1 1 0 0 1-1-1Zm-1 3a1 1 0 1 0 0 2h10a1 1 0 1 0 0-2H6Z\" opacity=\".2\"/></svg>";
const IconReputationSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconReputationSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M9.67 1.5a1 1 0 0 1 .86-.5H12a1 1 0 1 1 0 2h-.89L9.67 5.5a1 1 0 0 1-.87.5H6.62l-3.23 6.45a1 1 0 1 1-1.78-.9l3.5-7A1 1 0 0 1 6 4h2.22l1.45-2.5Z\"/><path  d=\"M1 2a1 1 0 0 1 1-1h5a1 1 0 0 1 0 2H2a1 1 0 0 1-1-1Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm11-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2ZM8 8a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm-1 2a1 1 0 1 0 0 2h5a1 1 0 1 0 0-2H7Z\" opacity=\".2\"/></svg>";
const IconReviewQueue = "<svg aria-hidden=\"true\" class=\"svg-icon iconReviewQueue\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m11 12.47 5-4.97V3a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6.5l-2.79-2.8a1 1 0 0 1 0-1.4l2.1-2.1a1 1 0 0 1 1.4 0L11 12.47ZM2 7h10v2H2V7Zm0-4h12v2H2V3Zm0 10v-2h3v2H2Zm9 4.5 7-7L16.5 9 11 14.5 8.5 12 7 13.5l4 4Z\"/></svg>";
const IconRichText = "<svg aria-hidden=\"true\" class=\"svg-icon iconRichText\" width=\"21\" height=\"18\"  viewBox=\"0 0 21 18\"><path fill=\"#0C0D0E\" d=\"M2 2a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h17a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2Zm6 2H2v2h6V4ZM2 8h17v2H2V8Zm17 4H2v2h17v-2Z\"/></svg>";
const IconRss = "<svg aria-hidden=\"true\" class=\"svg-icon iconRss\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H3Zm0 1.5c6.9 0 12.5 5.6 12.5 12.5H13C13 9.55 8.45 5 3 5V2.5Zm0 5c4.08 0 7.5 3.41 7.5 7.5H8c0-2.72-2.28-5-5-5V7.5Zm0 5c1.36 0 2.5 1.14 2.5 2.5H3v-2.5Z\"/></svg>";
const IconRuler = "<svg aria-hidden=\"true\" class=\"svg-icon iconRuler\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#BAC0C5\" d=\"M.64 11.52A1 1 0 0 1 1 10.15l13-7.5a1 1 0 0 1 1.36.37l2 3.46A1 1 0 0 1 17 7.85l-.87.5-1.5-2.6-.87.5 1.5 2.6-1.73 1-1-1.73-.86.5 1 1.73-1.74 1-1.5-2.6-.86.5 1.5 2.6-1.74 1-1-1.73-.86.5 1 1.73-1.73 1-1.5-2.6-.87.5 1.5 2.6-.87.5a1 1 0 0 1-1.36-.37l-2-3.46Zm13.92-6.89a.5.5 0 1 0-.5-.86.5.5 0 0 0 .5.86Z\"/></svg>";
const IconSOS = "<svg aria-hidden=\"true\" class=\"svg-icon iconSOS\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#F75D37\" d=\"M4 2a2 2 0 0 0-2 2v11c0 1.1.9 2 2 2h11a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H4Zm2 7a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1h2v-2H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1H5v2h1Zm4-3a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h1Zm0 1H9v5h1V7Zm4.7 2.3a1 1 0 0 1 .3.7v2a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1h2v-2h-1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h1a1 1 0 0 1 1 1h-2v2h1a1 1 0 0 1 .7.3Z\"/></svg>";
const IconSave = "<svg aria-hidden=\"true\" class=\"svg-icon iconSave\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V7a1 1 0 0 0-.3-.7l-5-5A1 1 0 0 0 11 1H3Zm0 2h8v3H3V3Zm6 11a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"/></svg>";
const IconSchool = "<svg aria-hidden=\"true\" class=\"svg-icon iconSchool\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m1 6 8-5 8 5v8h-2V7.09L9 11 1 6Zm8 10.82L3 13V9l6 3.82 5-3.32v4l-5 3.32Z\"/></svg>";
const IconSchoolSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSchoolSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m1 5 6-4 6 4v5h-1V5.58L7 8.75 1 5Zm6 8-4-2.6V7.69l4 2.46 4-2.55v2.8L7 13Z\"/></svg>";
const IconScreenFull = "<svg aria-hidden=\"true\" class=\"svg-icon iconScreenFull\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1h4v2H3v4H1V3c0-1.1.9-2 2-2Zm8 2V1h4a2 2 0 0 1 2 2v4h-2V3h-4Zm-8 8H1v4c0 1.1.9 2 2 2h4v-2H3v-4Zm12 0h2v4a2 2 0 0 1-2 2h-4v-2h4v-4Z\"/></svg>";
const IconScreenNormal = "<svg aria-hidden=\"true\" class=\"svg-icon iconScreenNormal\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 7H1V5h4V1h2v4a2 2 0 0 1-2 2Zm12-2v2h-4a2 2 0 0 1-2-2V1h2v4h4ZM5 17h2v-4a2 2 0 0 0-2-2H1v2h4v4Zm8 0h-2v-4c0-1.1.9-2 2-2h4v2h-4v4Z\"/></svg>";
const IconSearch = "<svg aria-hidden=\"true\" class=\"svg-icon iconSearch\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m18 16.5-5.14-5.18h-.35a7 7 0 1 0-1.19 1.19v.35L16.5 18l1.5-1.5ZM12 7A5 5 0 1 1 2 7a5 5 0 0 1 10 0Z\"/></svg>";
const IconSearchSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSearchSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M9.96 8.73h.3l2.75 2.78-1.5 1.5-2.78-2.73v-.32a5.5 5.5 0 1 1 1.23-1.23ZM5.5 9a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Z\"/></svg>";
const IconShare = "<svg aria-hidden=\"true\" class=\"svg-icon iconShare\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3 1h5v2H3v12h12v-5h2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2Zm14 0h-7v2h3.5L6 10.5 7.5 12 15 4.5V8h2V1Z\"/></svg>";
const IconShareAlt = "<svg aria-hidden=\"true\" class=\"svg-icon iconShareAlt\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M16 4a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 9a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-4.12-.93L12 3.38l1 1.74L4.88 9.8l-1-1.73ZM16 14a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM4.94 8.23l8.12 4.69-1 1.73-8.12-4.69 1-1.73Z\"/></svg>";
const IconShareSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconShareSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5 1H3a2 2 0 0 0-2 2v8c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V9h-2v2H3V3h2V1Zm2 0h6v6h-2V4.5L6.5 9 5 7.5 9.5 3H7V1Z\"/></svg>";
const IconShield = "<svg aria-hidden=\"true\" class=\"svg-icon iconShield\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m2 4 7-3 7 3v5.02C16 13.69 10.69 17 9 17c-1.69 0-7-3.31-7-7.98V4Zm6.14 5.2L7 12h4L9.86 9.2a.58.58 0 0 1 .25-.59c.56-.36.89-.95.89-1.61 0-1.09-.94-2-2.02-2A2 2 0 0 0 7 7c0 .66.33 1.25.89 1.61.2.13.3.36.25.59Z\"/></svg>";
const IconShieldSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconShieldSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2 3.25 7.5 1 13 3.23V7c0 3.5-4.3 6-5.5 6C6.3 13 2 10.52 2 7.01V3.25ZM6.86 7.6 6 10h3l-.86-2.4c-.03-.2.05-.4.2-.5.41-.31.66-1.03.66-1.6C9 4.57 8.3 4 7.49 4 6.67 4 6 4.57 6 5.5c0 .57.25 1.29.67 1.6.15.1.22.3.19.5Z\"/></svg>";
const IconShieldXSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconShieldXSm\" width=\"9\" height=\"10\"  viewBox=\"0 0 9 10\"><path fill=\"var(--white)\" d=\"M0 1.84 4.5 0 9 1.84v3.17C9 7.53 6.3 10 4.5 10 2.7 10 0 7.53 0 5.01V1.84Z\"/><path fill=\"var(--black-400)\" d=\"M1 2.5 4.5 1 8 2.5v2.51C8 7.34 5.34 9 4.5 9 3.65 9 1 7.34 1 5.01V2.5Zm2.98 3.02L3.2 7h2.6l-.78-1.48a.4.4 0 0 1 .15-.38c.34-.24.73-.7.73-1.14 0-.71-.5-1.23-1.41-1.23-.92 0-1.39.52-1.39 1.23 0 .44.4.9.73 1.14.12.08.18.23.15.38Z\"/></svg>";
const IconSkull = "<svg aria-hidden=\"true\" class=\"svg-icon iconSkull\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.95 1h-1.9A6.17 6.17 0 0 0 2 7.17c0 1.59.24 3.21.36 4.8.01.85.7 1.55 1.55 1.55h.51c.34 0 .44.28.48.55l.18 1.39c.16.85.7 1.54 1.54 1.54h4.76c.84 0 1.4-.7 1.54-1.54l.18-1.39c.04-.27.14-.55.48-.55h.51c.85 0 1.54-.7 1.55-1.56.12-1.58.36-3.2.36-4.79A6.18 6.18 0 0 0 9.95 1Z\" opacity=\".2\"/><path  d=\"M9.14 1H8.05A6.17 6.17 0 0 0 2 7.17c0 1.06.1 2.14.21 3.21l.15 1.58c.01.86.7 1.56 1.55 1.56h.51c.34 0 .44.28.48.55l.18 1.39c.16.85.7 1.54 1.54 1.54h2.52A11.5 11.5 0 0 1 6 9c0-3.15 1.2-6 3.14-8Z\" opacity=\".3\"/><path fill=\"var(--black-600)\" d=\"M10.08 12.25a.41.41 0 0 0-.82 0l-.13.65c-.05.26.14.5.4.5h.28c.26 0 .45-.24.4-.5l-.13-.65Zm-1.35 0a.41.41 0 0 0-.8 0l-.14.65c-.05.26.14.5.4.5h.27a.4.4 0 0 0 .4-.5l-.13-.65Z\"/><circle cx=\"11.5\" cy=\"9.5\" r=\"1.75\" fill=\"var(--black-600)\"/><circle cx=\"6.5\" cy=\"9.5\" r=\"1.75\" fill=\"var(--black-600)\"/><path fill=\"var(--black-600)\" d=\"M7.5 15a.5.5 0 0 0-.5.5V17h1v-1.5a.5.5 0 0 0-.5-.5Zm3.5 2v-1.5a.5.5 0 0 0-1 0V17h1Zm-1.5 0v-1.5a.5.5 0 0 0-1 0V17h1Z\"/></svg>";
const IconSlack = "<svg aria-hidden=\"true\" class=\"svg-icon iconSlack\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#E01E5A\" d=\"M6.5 16A1.5 1.5 0 0 1 5 14.5v-4a1.5 1.5 0 1 1 3 0v4c0 .83-.67 1.5-1.5 1.5Zm-4-4a1.5 1.5 0 0 1 0-3H4v1.5c0 .83-.67 1.5-1.5 1.5Z\"/><path fill=\"#36C5F0\" d=\"M2.5 5h4a1.5 1.5 0 1 1 0 3h-4a1.5 1.5 0 1 1 0-3Zm4-4C7.33 1 8 1.67 8 2.5V4H6.5a1.5 1.5 0 1 1 0-3Z\"/><path fill=\"#ECB22E\" d=\"M10.5 9h4a1.5 1.5 0 0 1 0 3h-4a1.5 1.5 0 0 1 0-3Zm0 7A1.5 1.5 0 0 1 9 14.5V13h1.5a1.5 1.5 0 0 1 0 3Z\"/><path fill=\"#2EB67D\" d=\"M10.5 1c.83 0 1.5.67 1.5 1.5v4a1.5 1.5 0 0 1-3 0v-4c0-.83.67-1.5 1.5-1.5Zm4 4a1.5 1.5 0 0 1 0 3H13V6.5c0-.83.67-1.5 1.5-1.5Z\"/></svg>";
const IconSmartPhone = "<svg aria-hidden=\"true\" class=\"svg-icon iconSmartPhone\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M6 1h6a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V3c0-1.1.9-2 2-2Zm0 2v10h6V3H6Zm3 13.2a1.2 1.2 0 1 0 0-2.4 1.2 1.2 0 0 0 0 2.4Z\"/></svg>";
const IconSmileyAdd = "<svg aria-hidden=\"true\" class=\"svg-icon iconSmileyAdd\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M13 0h2v3h3v2h-3v3h-2V5h-3V3h3V0ZM6.44 2.15A8 8 0 0 1 8 2v2a6 6 0 1 0 6 6h2a8 8 0 1 1-9.56-7.85ZM8.1 14.22a5.51 5.51 0 0 1-3.72-1.6.88.88 0 0 1 1.24-1.24 3.24 3.24 0 0 0 4.76 0 .88.88 0 0 1 1.24 1.24 4.9 4.9 0 0 1-3.52 1.6ZM7.25 8a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0ZM10 9.25a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z\"/></svg>";
const IconSpeechBubble = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubble\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m4 15-3 3V4c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H4Z\"/></svg>";
const IconSpeechBubbleError = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleError\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m1 18 3-3h11a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H3a2 2 0 0 0-2 2v14ZM8 4h2v5H8V4Zm0 7h2v2H8v-2Z\"/></svg>";
const IconSpeechBubbleQuestion = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleQuestion\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m1 18 3-3h11c1.09 0 2-.91 2-2V4c0-1.09-.91-2-2-2H3a2 2 0 0 0-2 2v14Zm7.96-4.94c-.57-.02-1.03-.43-1.01-1.06.02-.63.5-1.04 1.08-1.02.6.02 1.05.45 1.03 1.08-.02.63-.48 1.02-1.1 1Zm.92-3.68a3.6 3.6 0 0 0-.08.65c0 .04-.03.14-.16.14h-1.4c-.14 0-.16-.09-.16-.13-.01-.5.11-.99.36-1.42.2-.36.58-.65 1.06-.93.41-.23.78-.71.78-1.2 0-.27-.09-.53-.26-.74-.22-.26-.46-.4-.92-.4-.45 0-.83.23-1.02.52-.17.27-.16.55-.16.83v.11H6.2c0-1.17.31-1.92.98-2.36a3.5 3.5 0 0 1 1.83-.44c.88 0 1.58.16 2.2.62.58.42.88 1.02.88 1.82 0 .5-.17.9-.43 1.24-.15.2-.44.47-.86.8l-.48.3c-.2.14-.36.35-.44.6Z\"/></svg>";
const IconSpeechBubbleRight = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleRight\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14 15H3c-1.09 0-2-.91-2-2V4c0-1.1.9-2 2-2h12c1.09 0 2 .91 2 2v14l-3-3Z\"/></svg>";
const IconSpeechBubbleRightSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleRightSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m10 11 3 3V4a2 2 0 0 0-2-2H3a2 2 0 0 0-2 2v5c0 1.1.9 2 2 2h7Z\"/></svg>";
const IconSpeechBubbleRightStar = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleRightStar\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m17 18-3-3H3a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v14ZM9.4 3.4a.4.4 0 0 0-.75 0L7.54 6.19a.4.4 0 0 1-.35.25l-2.98.2a.4.4 0 0 0-.23.7l2.3 1.92c.12.1.17.26.13.4l-.73 2.9a.4.4 0 0 0 .6.44l2.53-1.59a.4.4 0 0 1 .43 0l2.53 1.6c.3.18.68-.1.6-.44l-.73-2.9a.4.4 0 0 1 .13-.4l2.3-1.92a.4.4 0 0 0-.24-.7l-2.98-.2a.4.4 0 0 1-.34-.26L9.39 3.41Z\"/></svg>";
const IconSpeechBubbleRightStarSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleRightStarSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m13 14-3-3H3a2 2 0 0 1-2-2V4c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v10ZM7.31 2.72a.3.3 0 0 0-.56 0l-.77 2.06a.3.3 0 0 1-.27.2l-2.2.1a.3.3 0 0 0-.18.53l1.73 1.37c.1.08.13.2.1.32l-.59 2.12a.3.3 0 0 0 .46.33l1.84-1.22a.3.3 0 0 1 .33 0l1.83 1.22a.3.3 0 0 0 .46-.33L8.9 7.3a.3.3 0 0 1 .1-.32l1.73-1.37a.3.3 0 0 0-.18-.53l-2.2-.1a.3.3 0 0 1-.27-.2l-.77-2.06Z\"/></svg>";
const IconSpeechBubbleSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSpeechBubbleSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m4 11-3 3V4c0-1.1.9-2 2-2h8a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H4Z\"/></svg>";
const IconStackExchange = "<svg aria-hidden=\"true\" class=\"svg-icon iconStackExchange\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 1H3a2 2 0 0 0-2 2v2h16V3a2 2 0 0 0-2-2ZM1 13c0 1.1.9 2 2 2h8v3l3-3h1a2 2 0 0 0 2-2v-2H1v2Zm16-7H1v4h16V6Z\"/></svg>";
const IconStar = "<svg aria-hidden=\"true\" class=\"svg-icon iconStar\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M8.63.95a.4.4 0 0 1 .74 0l2.05 4.93a.4.4 0 0 0 .34.24l5.32.43c.35.03.5.47.22.7l-4.05 3.47a.4.4 0 0 0-.13.4l1.24 5.2a.4.4 0 0 1-.6.43l-4.55-2.79a.4.4 0 0 0-.42 0l-4.55 2.79a.4.4 0 0 1-.6-.44l1.24-5.19a.4.4 0 0 0-.13-.4L.7 7.25a.4.4 0 0 1 .22-.7l5.32-.43a.4.4 0 0 0 .34-.24L8.63.95Z\"/></svg>";
const IconStarHalf = "<svg aria-hidden=\"true\" class=\"svg-icon iconStarHalf\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M4.24 16.75a.4.4 0 0 1-.6-.44l1.24-5.19a.4.4 0 0 0-.13-.4L.7 7.25a.4.4 0 0 1 .22-.7l5.32-.43a.4.4 0 0 0 .34-.24L8.63.95A.4.4 0 0 1 9 .7c.15 0 .3.09.37.25l2.05 4.93a.4.4 0 0 0 .34.24l5.32.43c.35.03.5.47.22.7l-4.05 3.47a.4.4 0 0 0-.13.4l1.24 5.2a.4.4 0 0 1-.6.43l-4.55-2.79a.4.4 0 0 0-.42 0l-4.55 2.79ZM9 2.67V12.9c.25 0 .5.06.73.2l3.32 2.03-.9-3.79a1.4 1.4 0 0 1 .45-1.38l2.96-2.54-3.88-.31a1.4 1.4 0 0 1-1.18-.86L9 2.66Z\"/></svg>";
const IconStarHalfSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconStarHalfSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5.17 4.65 6.73.79a.3.3 0 0 1 .55 0l1.55 3.86c.05.1.15.18.26.19l4.15.28a.3.3 0 0 1 .17.53l-3.19 2.67a.3.3 0 0 0-.1.3l1.02 4.03a.3.3 0 0 1-.45.33l-3.53-2.21a.3.3 0 0 0-.32 0l-3.52 2.21a.3.3 0 0 1-.45-.33l1.01-4.03a.3.3 0 0 0-.1-.3L.6 5.65a.3.3 0 0 1 .17-.53l4.16-.28a.3.3 0 0 0 .25-.2Zm2.73.37L7 2.78v6.94c.24 0 .48.07.7.2l2.04 1.29-.59-2.35c-.12-.48.05-1 .43-1.31L11.44 6l-2.42-.17a1.3 1.3 0 0 1-1.12-.8Z\"/></svg>";
const IconStarSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconStarSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M6.73.79a.3.3 0 0 1 .55 0l1.55 3.86c.05.1.15.18.26.19l4.15.28a.3.3 0 0 1 .17.53l-3.19 2.67a.3.3 0 0 0-.1.3l1.02 4.03a.3.3 0 0 1-.45.33l-3.53-2.21a.3.3 0 0 0-.32 0l-3.52 2.21a.3.3 0 0 1-.45-.33l1.01-4.03a.3.3 0 0 0-.1-.3L.6 5.65a.3.3 0 0 1 .17-.53l4.16-.28a.3.3 0 0 0 .25-.2L6.73.8Z\"/></svg>";
const IconStarVerified = "<svg aria-hidden=\"true\" class=\"svg-icon iconStarVerified\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.86.89a1.14 1.14 0 0 0-1.72 0l-.5.58c-.3.35-.79.48-1.23.33l-.72-.25a1.14 1.14 0 0 0-1.49.85l-.14.76c-.1.45-.45.8-.9.9l-.76.14c-.67.14-1.08.83-.85 1.49l.25.72c.15.44.02.92-.33 1.23l-.58.5a1.14 1.14 0 0 0 0 1.72l.58.5c.35.3.48.79.33 1.23l-.25.72c-.23.66.18 1.35.85 1.49l.76.14c.45.1.8.45.9.9l.14.76c.14.67.83 1.08 1.49.85l.72-.25c.44-.15.92-.02 1.23.33l.5.58c.46.52 1.26.52 1.72 0l.5-.58c.3-.35.79-.48 1.23-.33l.72.25c.66.23 1.35-.18 1.49-.85l.14-.76c.1-.45.45-.8.9-.9l.76-.14c.67-.14 1.08-.83.85-1.49l-.25-.72c-.15-.44-.02-.92.33-1.23l.58-.5c.52-.46.52-1.26 0-1.72l-.58-.5c-.35-.3-.48-.79-.33-1.23l.25-.72a1.14 1.14 0 0 0-.85-1.49l-.76-.14c-.45-.1-.8-.45-.9-.9l-.14-.76a1.14 1.14 0 0 0-1.49-.85l-.72.25c-.44.15-.92.02-1.23-.33l-.5-.58Zm-.49 2.67L10.6 6.6c.05.15.19.24.34.25l3.26.22c.36.03.5.48.23.71l-2.5 2.1a.4.4 0 0 0-.14.4l.8 3.16a.4.4 0 0 1-.6.44L9.2 12.13a.4.4 0 0 0-.42 0l-2.77 1.74a.4.4 0 0 1-.6-.44l.8-3.16a.4.4 0 0 0-.13-.4l-2.5-2.1a.4.4 0 0 1 .22-.7l3.26-.23a.4.4 0 0 0 .34-.25l1.22-3.03a.4.4 0 0 1 .74 0Z\"/></svg>";
const IconStarVerifiedSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconStarVerifiedSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7.7.72c-.4-.3-.94-.3-1.34 0l-1.26.92c-.15.11-.32.18-.5.2l-1.54.25c-.49.07-.87.45-.95.94l-.23 1.55c-.03.18-.1.35-.2.5L.74 6.32c-.3.4-.3.94 0 1.34l.92 1.26c.11.14.18.31.2.5l.24 1.54c.08.49.46.87.95.94l1.54.24c.18.03.35.1.5.2l1.26.93c.4.3.94.3 1.34 0l1.26-.92c.14-.11.31-.18.5-.21l1.54-.24c.48-.07.87-.45.94-.94l.24-1.55c.03-.18.1-.35.2-.5l.93-1.25c.3-.4.3-.94 0-1.34l-.93-1.26c-.1-.14-.17-.31-.2-.5l-.24-1.54A1.13 1.13 0 0 0 11 2.1l-1.55-.24c-.18-.03-.35-.1-.5-.2L7.7.71Zm-.4 1.72.9 2.5c.04.1.15.19.27.2l2.65.08c.28 0 .4.36.17.53L9.21 7.38a.3.3 0 0 0-.1.32l.74 2.54a.3.3 0 0 1-.46.33L7.19 9.1a.3.3 0 0 0-.33 0l-2.19 1.48a.3.3 0 0 1-.46-.33l.74-2.54a.3.3 0 0 0-.1-.32l-2.1-1.63a.3.3 0 0 1 .18-.53l2.65-.09a.3.3 0 0 0 .27-.2l.9-2.49a.3.3 0 0 1 .56 0Z\"/></svg>";
const IconStrikethrough = "<svg aria-hidden=\"true\" class=\"svg-icon iconStrikethrough\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M11.96 6.2a4.28 4.28 0 0 0-1.19-.7c-.3-.14-.61-.25-.96-.34a4.2 4.2 0 0 0-1.05-.13c-.64 0-1.11.11-1.43.35-.3.23-.47.56-.47.99 0 .24.06.45.17.62l.01.01H4.5v-.26c0-.6.1-1.14.33-1.61.22-.47.53-.86.92-1.18.4-.3.87-.54 1.4-.7a6.44 6.44 0 0 1 4 .15c.7.26 1.31.57 1.84.92L11.96 6.2ZM3 8v2h5.02l1.1.32c.39.11.71.24.98.37s.47.29.62.47a1 1 0 0 1 .22.65c0 .82-.64 1.22-1.91 1.22-.46 0-.9-.05-1.34-.16a7.79 7.79 0 0 1-2.13-.9 3.6 3.6 0 0 1-.54-.4l-1.02 2a8.95 8.95 0 0 0 5 1.54c.57 0 1.13-.06 1.65-.18.54-.14 1-.34 1.4-.62.42-.28.74-.64.98-1.1.25-.45.37-1 .37-1.63a3.14 3.14 0 0 0-.38-1.58H15V8H3Z\"/></svg>";
const IconStroller = "<svg aria-hidden=\"true\" class=\"svg-icon iconStroller\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M10 1c-.7 0-1.37.12-2 .34V6h7.92A6 6 0 0 0 10 1Zm6 6H6L5 5H1v2h3c0 1.12.3 2.17.84 3.06A3.5 3.5 0 1 0 9 13.5a3.5 3.5 0 1 0 5.68-2.74A5.97 5.97 0 0 0 16 7Zm-7 6.5c0-.2-.02-.4-.05-.6l.1.02c-.03.2-.05.38-.05.58Zm-2 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm7 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"/></svg>";
const IconSubway = "<svg aria-hidden=\"true\" class=\"svg-icon iconSubway\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9 1c-4.42 0-7 .5-7 4v6.5A3.5 3.5 0 0 0 5.5 15L4 16.5v.5h10v-.5L12.5 15a3.5 3.5 0 0 0 3.5-3.5V5c0-3.5-2.58-4-7-4ZM5.5 12.75a1.25 1.25 0 1 1 0-2.5 1.25 1.25 0 0 1 0 2.5ZM8 9H4V5h4v4Zm4.5 3.75a1.25 1.25 0 1 1 0-2.5 1.25 1.25 0 0 1 0 2.5ZM14 9h-4V5h4v4Z\"/></svg>";
const IconSync = "<svg aria-hidden=\"true\" class=\"svg-icon iconSync\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M13.7 12.7A6.15 6.15 0 0 1 9 14.82 6.06 6.06 0 0 1 3.29 11H1c.92 3.45 4.15 6 8 6 2.5 0 4.73-1.07 6.24-2.76L17 16v-6h-6l2.7 2.7ZM1 2v6h6L4.3 5.3A6.15 6.15 0 0 1 9 3.18 6.06 6.06 0 0 1 14.71 7H17a8.22 8.22 0 0 0-8-6 8.36 8.36 0 0 0-6.24 2.76L1 2Z\"/></svg>";
const IconSyncSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconSyncSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M10.58 9.58A4.46 4.46 0 0 1 7 11.36 4.43 4.43 0 0 1 2.67 8H1c.48 2.84 2.99 5 6 5a6.1 6.1 0 0 0 4.75-2.25L13 12V8H9l1.58 1.58ZM3.42 4.42A4.46 4.46 0 0 1 7 2.64 4.43 4.43 0 0 1 11.33 6H13a6.06 6.06 0 0 0-6-5 6.1 6.1 0 0 0-4.75 2.25L1 2v4h4L3.42 4.42Z\"/></svg>";
const IconTIL = "<svg aria-hidden=\"true\" class=\"svg-icon iconTIL\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#8B41AF\" d=\"M2 4c0-1.1.9-2 2-2h11a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Zm2.5 2.5c0 .28.22.5.5.5h1v5.5a.5.5 0 0 0 1 0V7h1a.5.5 0 0 0 0-1H5a.5.5 0 0 0-.5.5Zm5.5 0a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0v-6Zm2.5-.5a.5.5 0 0 0-.5.5v6c0 .28.22.5.5.5h2a.5.5 0 0 0 0-1H13V6.5a.5.5 0 0 0-.5-.5Z\"/></svg>";
const IconTable = "<svg aria-hidden=\"true\" class=\"svg-icon iconTable\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M1 3c0-1.1.9-2 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3Zm7 4V3H3v4h5Zm0 4V9H3v2h5Zm7-2h-5v2h5V9Zm0 6v-2h-5v2h5Zm-7-2H3v2h5v-2Zm7-10h-5v4h5V3Z\"/></svg>";
const IconTack = "<svg aria-hidden=\"true\" class=\"svg-icon iconTack\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m6.79 12.67 3.53 3.53a6 6 0 0 0 1.18-6.83l2.03-2.03A4 4 0 0 0 18 5.5L12.53.03A4 4 0 0 0 10.7 4.5L8.67 6.54a6 6 0 0 0-6.83 1.18l3.53 3.53-3.18 3.18-1.77 3.19 3.18-1.77 3.19-3.18Z\"/></svg>";
const IconTackSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconTackSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M5.3 10.3 8 13c1.08-1.08 1.32-3.67.58-5.4l1.6-1.68c1.05.29 2.5-.1 3.34-.93.2-.19.35-.4.48-.63L9.65 0C9.42.13 9.2.3 9 .5a4.04 4.04 0 0 0-.93 3.48L6.4 5.65C4.62 4.8 2.53 4.61 1 6l2.7 2.7-2.5 2.6L0 14l2.7-1.2 2.6-2.5Z\"/></svg>";
const IconTada = "<svg aria-hidden=\"true\" class=\"svg-icon iconTada\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FF9700\" d=\"M10.38 7.48c-2.9-2.9-5.4-3.73-5.51-3.38l-3.8 11.45c-.14.4-.03.86.27 1.15.3.3.78.38 1.17.22l11.42-3.31c.3-.15-.64-3.22-3.54-6.13Z\" opacity=\".4\"/><path fill=\"#FF9700\" d=\"M6.8 11.07a18.02 18.02 0 0 1-2.93-3.96l1-3C5.47 6.15 6.65 8 8.25 9.4a21.72 21.72 0 0 0 5.59 4.22l-2.86.83a31.19 31.19 0 0 1-4.17-3.39ZM3.6 14.2a4.26 4.26 0 0 1-1.33-2.24l.91-2.74c.5 1.27 1.25 2.43 2.2 3.4.95.95 2 1.81 3.1 2.57l-2.57.74a9.03 9.03 0 0 1-2.31-1.72Z\" opacity=\".6\"/><path fill=\"#F75D37\" d=\"M15.85 2.15c.2.2.2.5 0 .7l-4 4a.5.5 0 0 1-.7-.7l4-4c.2-.2.5-.2.7 0Z\"/><path fill=\"#07C\" d=\"M10 1.5a.5.5 0 0 0-1 0v3a.5.5 0 0 0 1 0v-3ZM13.5 8a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3Z\"/><path fill=\"#07C\" d=\"M7.5 3a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Zm5 0a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1ZM16 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Zm-.5 5.5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1Z\" opacity=\".6\"/></svg>";
const IconTag = "<svg aria-hidden=\"true\" class=\"svg-icon iconTag\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.84 1a2 2 0 0 0-1.41.58L1.59 8.43a2 2 0 0 0 0 2.82l5.16 5.16a2 2 0 0 0 2.82 0l6.84-6.84a2 2 0 0 0 .59-1.4V3a2 2 0 0 0-2-2H9.84ZM13 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z\"/></svg>";
const IconTagSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconTagSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7.63 1c-.4 0-.78.16-1.06.44L1.44 6.57a1.5 1.5 0 0 0 0 2.12l3.87 3.87a1.5 1.5 0 0 0 2.12 0l5.13-5.13c.28-.28.44-.66.44-1.06V2.5c0-.83-.67-1.5-1.5-1.5H7.63ZM9.5 6a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3Z\"/></svg>";
const IconTags = "<svg aria-hidden=\"true\" class=\"svg-icon iconTags\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M9.24 1a3 3 0 0 0-2.12.88l-5.7 5.7a2 2 0 0 0-.38 2.31 3 3 0 0 1 .67-1.01l6-6A3 3 0 0 1 9.83 2H14a3 3 0 0 1 .79.1A2 2 0 0 0 13 1H9.24Z\" opacity=\".4\"/><path  d=\"M9.83 3a2 2 0 0 0-1.42.59l-6 6a2 2 0 0 0 0 2.82L6.6 16.6a2 2 0 0 0 2.82 0l6-6A2 2 0 0 0 16 9.17V5a2 2 0 0 0-2-2H9.83ZM12 9a2 2 0 1 1 0-4 2 2 0 0 1 0 4Z\"/></svg>";
const IconTagsSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconTagsSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M6.83 1a2 2 0 0 0-1.42.59l-4.2 4.2a1 1 0 0 0 0 1.42l.1.1.19-.22L6 2.59A2 2 0 0 1 7.41 2H11a1 1 0 0 0-1-1H6.83Z\" opacity=\".4\"/><path  d=\"M6.7 3.3a1 1 0 0 1 .71-.3H11a1 1 0 0 1 1 1v3.59a1 1 0 0 1-.3.7l-4.5 4.5a1 1 0 0 1-1.4 0L2.2 9.21a1 1 0 0 1 0-1.42l4.5-4.5ZM9 7.24a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z\"/></svg>";
const IconTheme = "<svg aria-hidden=\"true\" class=\"svg-icon iconTheme\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3.34 14.66A8 8 0 1 0 14.66 3.34 8 8 0 0 0 3.34 14.66Zm9.9-1.42a6 6 0 0 1-8.48 0l8.48-8.48a6 6 0 0 1 0 8.48Z\"/></svg>";
const IconThree = "<svg aria-hidden=\"true\" class=\"svg-icon iconThree\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M8.07 9.23h1.2c.58 0 1-.14 1.28-.43.27-.28.41-.66.41-1.14 0-.45-.14-.81-.41-1.07a1.58 1.58 0 0 0-1.13-.38c-.43 0-.8.12-1.08.36-.3.23-.44.54-.44.92H5.64c0-.6.16-1.12.48-1.6.32-.47.77-.84 1.34-1.1.58-.27 1.21-.4 1.9-.4 1.21 0 2.15.29 2.84.87a2.93 2.93 0 0 1 1.02 2.37c0 .52-.16 1-.48 1.44a3.1 3.1 0 0 1-1.25 1 2.8 2.8 0 0 1 1.43 1.04c.32.46.48 1 .48 1.62a3 3 0 0 1-1.11 2.43c-.74.61-1.7.92-2.92.92-1.14 0-2.07-.3-2.8-.9A2.94 2.94 0 0 1 5.5 12.8h2.26c0 .43.16.78.47 1.05.33.27.72.4 1.2.4.53 0 .95-.13 1.25-.41.3-.29.46-.67.46-1.14 0-1.13-.62-1.7-1.87-1.7h-1.2V9.23ZM17.25 15a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\" opacity=\".2\"/><path  d=\"M6.07 7.83h1.2c.58 0 1-.15 1.28-.43.27-.29.41-.67.41-1.14 0-.46-.14-.82-.41-1.07a1.58 1.58 0 0 0-1.13-.39c-.43 0-.8.12-1.08.36-.3.24-.44.55-.44.93H3.64c0-.6.16-1.13.48-1.6.32-.47.77-.84 1.34-1.1.58-.27 1.21-.4 1.9-.4 1.21 0 2.15.28 2.84.86a2.93 2.93 0 0 1 1.02 2.38 2.92 2.92 0 0 1-1.73 2.61c.64.23 1.12.81 1.43 1.27.32.46.48 1 .48 1.62a3 3 0 0 1-1.11 2.43c-.74.61-1.7.92-2.92.92-1.14 0-2.07-.3-2.8-.9A2.94 2.94 0 0 1 3.5 11.8h2.26c0 .43.16.78.47 1.05.33.27.72.4 1.2.4.53 0 .95-.13 1.25-.41.3-.29.46-.67.46-1.14 0-1.13-.62-1.7-1.87-1.7h-1.2V7.83ZM15.25 14a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\"/></svg>";
const IconThreeLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconThreeLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M14.2 18.53h2.44c1.16 0 2.02-.28 2.58-.84.56-.57.84-1.32.84-2.25 0-.9-.28-1.6-.84-2.1-.55-.5-1.3-.76-2.28-.76-.87 0-1.6.24-2.2.7a2.2 2.2 0 0 0-.88 1.82H9.28c0-1.16.33-2.21.97-3.13a6.49 6.49 0 0 1 2.72-2.19A9.37 9.37 0 0 1 16.83 9c2.44 0 4.35.57 5.73 1.7a5.7 5.7 0 0 1 2.08 4.68c0 1.03-.33 1.97-.97 2.83a6.24 6.24 0 0 1-2.53 1.98 5.67 5.67 0 0 1 2.9 2.03c.64.9.96 1.97.96 3.2 0 1.99-.75 3.58-2.25 4.78-1.48 1.2-3.46 1.8-5.92 1.8-2.3 0-4.18-.59-5.65-1.77A5.72 5.72 0 0 1 9 25.56h4.57c0 .84.33 1.53.97 2.06.65.53 1.46.8 2.4.8 1.1 0 1.94-.28 2.55-.83.63-.57.94-1.3.94-2.23 0-2.24-1.27-3.35-3.8-3.35H14.2v-3.48ZM33 30a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\" opacity=\".2\"/><path  d=\"M12.03 15.61h2.61c1.16 0 2.02-.28 2.58-.85s.84-1.32.84-2.26c0-.91-.28-1.62-.84-2.13-.55-.5-1.3-.76-2.28-.76-.87 0-1.6.24-2.2.72a2.2 2.2 0 0 0-.88 1.82H7.28c0-1.17.33-2.23.97-3.16a6.5 6.5 0 0 1 2.72-2.2A9.3 9.3 0 0 1 14.83 6c2.44 0 4.35.57 5.73 1.72a5.77 5.77 0 0 1 2.08 4.71 5.71 5.71 0 0 1-3.5 5.2c1.3.45 2.26 1.6 2.9 2.51.64.9.96 1.98.96 3.22 0 2-.75 3.62-2.25 4.83-1.48 1.2-3.46 1.81-5.92 1.81-2.3 0-4.18-.6-5.65-1.78A5.78 5.78 0 0 1 7 23.5h4.57c0 .85.33 1.54.97 2.08.65.54 1.46.8 2.4.8 1.1 0 1.94-.27 2.55-.83a2.9 2.9 0 0 0 .94-2.25c0-2.25-1.27-3.38-3.8-3.38h-2.6v-4.3ZM31 28a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\"/></svg>";
const IconThumbsDown = "<svg aria-hidden=\"true\" class=\"svg-icon iconThumbsDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#07C\" d=\"M1 6.5C1 5.67 1.67 5 2.5 5H4v6H2.5A1.5 1.5 0 0 1 1 9.5v-3Z\" opacity=\".7\"/><path fill=\"#FFC166\" d=\"M5 4.95v6s3.94 5.28 4.2 5.6c.27.33.64.46.96.46.32 0 .6-.14.84-.36.34-.32.48-1.23.44-1.9a3.32 3.32 0 0 0-.69-1.8c-.23-.31.04-.78.49-.71 0 0 1.71.33 2.3.36.59.03 2.71.12 2.71-1.68 0-1.8-.97-4.53-1.4-5.44-.43-.92-1.19-2.15-2.11-2.38a4.83 4.83 0 0 0-2.64.05L5 4.95Z\"/></svg>";
const IconThumbsUp = "<svg aria-hidden=\"true\" class=\"svg-icon iconThumbsUp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M5 15V9s3.94-5.28 4.2-5.6c.27-.33.64-.46.96-.46.32 0 .6.14.84.36.34.32.48 1.23.44 1.89A3.32 3.32 0 0 1 10.75 7c-.23.31.04.78.49.71 0 0 1.71-.33 2.3-.36.59-.03 2.71-.13 2.71 1.68 0 1.8-.97 4.52-1.4 5.44-.43.92-1.19 2.15-2.11 2.38-.87.23-1.78.21-2.64-.05L5 15Z\"/><path fill=\"#07C\" d=\"M1 10.5C1 9.67 1.67 9 2.5 9H4v6H2.5A1.5 1.5 0 0 1 1 13.5v-3Z\" opacity=\".7\"/><path  d=\"M11 .5a.5.5 0 0 0-1 0v1a.5.5 0 0 0 1 0v-1ZM6.15 2.15c.2-.2.5-.2.7 0l1 1a.5.5 0 1 1-.7.7l-1-1a.5.5 0 0 1 0-.7Zm8.7 0c.2.2.2.5 0 .7l-1 1a.5.5 0 0 1-.7-.7l1-1c.2-.2.5-.2.7 0Z\" opacity=\".4\"/></svg>";
const IconTool = "<svg aria-hidden=\"true\" class=\"svg-icon iconTool\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M4.2 1.33a4.99 4.99 0 0 1 6.47 6.47L17 14.13l-2.88 2.88-6.34-6.34a4.99 4.99 0 0 1-6.45-6.45l3.22 3.2 2.88-2.87L4.2 1.33Z\"/></svg>";
const IconTrash = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrash\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M15 2a1 1 0 0 1 1 1v1H2V3a1 1 0 0 1 1-1h2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h2Zm0 3H3v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V5Z\"/></svg>";
const IconTrashSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrashSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M11 2a1 1 0 0 1 1 1v1H2V3a1 1 0 0 1 1-1h2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h2Zm0 3H3v6c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V5Z\"/></svg>";
const IconTrendingDown = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingDown\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m11 14 2.29-2.29L10.5 9l-3 3L1 5.5 2.5 4l5 5 3-3 4.21 4.29L17 8v6h-6Z\"/></svg>";
const IconTrendingNone = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingNone\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5 8V5L1 9l4 4v-3h8v3l4-4-4-4v3H5Z\"/></svg>";
const IconTrendingUp = "<svg aria-hidden=\"true\" class=\"svg-icon iconTrendingUp\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m11 4 2.29 2.29L10.5 9l-3-3L1 12.5 2.5 14l5-5 3 3 4.21-4.29L17 10V4h-6Z\"/></svg>";
const IconTwitter = "<svg aria-hidden=\"true\" class=\"svg-icon iconTwitter\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#2AA3EF\" d=\"M17 4.04c-.59.26-1.22.44-1.88.52a3.3 3.3 0 0 0 1.44-1.82c-.64.37-1.34.64-2.09.79a3.28 3.28 0 0 0-5.6 2.99A9.3 9.3 0 0 1 2.12 3.1a3.28 3.28 0 0 0 1.02 4.38 3.28 3.28 0 0 1-1.49-.4v.03a3.29 3.29 0 0 0 2.64 3.22 3.34 3.34 0 0 1-1.48.06 3.29 3.29 0 0 0 3.07 2.28 6.58 6.58 0 0 1-4.85 1.36 9.33 9.33 0 0 0 5.04 1.47c6.04 0 9.34-5 9.34-9.33v-.42a6.63 6.63 0 0 0 1.63-1.7L17 4.04Z\"/></svg>";
const IconTwo = "<svg aria-hidden=\"true\" class=\"svg-icon iconTwo\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M17.25 15a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Zm-4.29 1h-7.8v-1.55l3.68-3.92a9.2 9.2 0 0 0 1.12-1.44c.25-.42.37-.8.37-1.18 0-.5-.13-.9-.38-1.18-.26-.3-.62-.44-1.1-.44-.5 0-.91.18-1.2.53-.3.35-.45.64-.45 1.21H4.94c0-.7.16-1.15.49-1.73a3.5 3.5 0 0 1 1.4-1.34c.61-.33 1.3-.5 2.06-.5 1.17 0 2.08.29 2.73.85a3 3 0 0 1 .97 2.39 3.8 3.8 0 0 1-.43 1.71c-.3.59-.8 1.27-1.5 2.04l-2.59 2.73h4.9V16Z\" opacity=\".2\"/><path  d=\"M10.96 15h-7.8v-1.55l3.68-3.92a9.2 9.2 0 0 0 1.12-1.44c.25-.42.42-.93.42-1.3 0-.4 0-.88-.34-1.27-.26-.3-.71-.54-1.19-.54-.5 0-.91.18-1.2.54-.3.34-.45.94-.45 1.51H2.94c0-.7.16-1.59.49-2.16a3.5 3.5 0 0 1 1.4-1.35c.61-.32 1.3-.49 2.06-.49 1.17 0 2.07.4 2.72.95.65.57.98 1.69.98 2.72a3.8 3.8 0 0 1-.43 1.71c-.3.59-.8 1.27-1.5 2.04l-2.59 2.73h4.9V15Zm4.29-1a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z\"/></svg>";
const IconTwoLg = "<svg aria-hidden=\"true\" class=\"svg-icon iconTwoLg\" width=\"36\" height=\"36\"  viewBox=\"0 0 36 36\"><path  d=\"M33 30a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm-7 2H10.45v-3.09l7.34-7.82c1-1.1 1.75-2.06 2.23-2.88.49-.82.73-1.6.73-2.34 0-1-.25-1.8-.76-2.37a2.75 2.75 0 0 0-2.18-.87c-1.02 0-1.83.35-2.42 1.06-.58.7-.87 1.27-.87 2.42H10c0-1.39.33-2.3.98-3.45a6.97 6.97 0 0 1 2.8-2.68 8.44 8.44 0 0 1 4.1-.98c2.34 0 4.15.56 5.44 1.68 1.3 1.12 1.95 2.7 1.95 4.76 0 1.12-.3 2.26-.87 3.42a19.05 19.05 0 0 1-3 4.07l-5.15 5.44H26V32Z\" opacity=\".2\"/><path  d=\"M22 30H6v-2.84l7.79-8.13c1-1.1 1.75-2.07 2.23-2.9a5.7 5.7 0 0 0 .84-2.59c0-.79 0-1.76-.69-2.56a3.28 3.28 0 0 0-2.36-1.06c-1.02 0-1.83.35-2.42 1.06-.58.7-.87 1.9-.87 3.04H6c0-1.39.33-3.19.98-4.34a6.99 6.99 0 0 1 2.8-2.7 8.4 8.4 0 0 1 4.1-.98c2.34 0 4.14.78 5.42 1.91 1.3 1.13 1.97 3.38 1.97 5.44a7.7 7.7 0 0 1-.87 3.44 19.15 19.15 0 0 1-3 4.1l-5.15 5.46H22V30Zm9-2a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z\"/></svg>";
const IconUndo = "<svg aria-hidden=\"true\" class=\"svg-icon iconUndo\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M3.35 3.35A8 8 0 1 1 1.27 11h2.08a6 6 0 1 0 1.43-6.22L8 8H1V1l2.35 2.35Z\"/></svg>";
const IconUndoSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconUndoSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M2.76 2.76A6 6 0 1 1 1.09 8h1.93A4.1 4.1 0 1 0 4.1 4.1L6 6H1V1l1.76 1.76Z\"/></svg>";
const IconUnflag = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnflag\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"m3 11.14-3 3 1.41 1.42L15.56 1.4 14.14 0l-3 3H9.5L9 2H3v9.14ZM5 16H3.8L5 14.8V16Zm4-5-.06-.14L15 4.8V11H9Z\"/></svg>";
const IconUnflagSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnflagSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"m2 10.85 2-2L4.85 8l5-5 1.88-1.88L10.67.06 7.73 3H7.5L7 2H2v6.73L.06 10.67l1.06 1.06.88-.88ZM4 12H2.97L4 10.97V12Zm3-3-.3-.74L11 3.97V9H7Z\"/></svg>";
const IconUnlock = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnlock\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M5.9 6a3.1 3.1 0 0 1 5.4-2.08.95.95 0 0 0 1.4-1.28A4.99 4.99 0 0 0 4 6v1a2 2 0 0 0-2 2v6c0 1.1.9 2 2 2h10a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2H5.9V6Zm1.69 7.41a2 2 0 1 1 2.82-2.82A2 2 0 0 1 7.6 13.4Z\"/></svg>";
const IconUnlockSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnlockSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M4.9 4.5a2.1 2.1 0 0 1 3.6-1.47.7.7 0 0 0 1-.99 3.5 3.5 0 0 0-6 2.46V5C2.67 5 2 5.67 2 6.5v5c0 .83.67 1.5 1.5 1.5h7c.83 0 1.5-.67 1.5-1.5v-5c0-.83-.67-1.5-1.5-1.5H4.9v-.5ZM8.5 9a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"/></svg>";
const IconUnorderedList = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnorderedList\" width=\"17\" height=\"18\"  viewBox=\"0 0 17 18\"><path  d=\"M4.25 4a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0ZM15 5H6V3h9v2Zm0 10H6v-2h9v2Zm-9-5h9V8H6v2Zm-1.75 4a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0ZM3 10.25a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z\"/></svg>";
const IconUnsync = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnsync\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M17.04 2.38 15.62.96.96 15.62l1.42 1.42L17.04 2.38ZM9 1c1.46 0 2.82.36 4.01 1l-1.63 1.64A6.3 6.3 0 0 0 4.3 5.3L7 8H1V2l1.76 1.76A8.36 8.36 0 0 1 9 1Zm5.5 5.5 1.6-1.6c.4.65.7 1.35.9 2.1h-2.29a5.69 5.69 0 0 0-.22-.5ZM3.28 11l.22.5-1.6 1.6A7.82 7.82 0 0 1 1 11h2.29Zm3.34 3.37L5 16a8.43 8.43 0 0 0 10.24-1.76L17 16v-6h-6l2.7 2.7a6.3 6.3 0 0 1-7.06 1.67Z\"/></svg>";
const IconUnsyncSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconUnsyncSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M12.3.7.8 12.17l1.02 1.01L13.3 1.71l-1-1.02ZM7 13c-.88 0-1.72-.19-2.48-.52L5.8 11.2a4.54 4.54 0 0 0 4.78-1.62L9 8h4v4l-1.25-1.25A6.1 6.1 0 0 1 7 13Zm4.33-7a4.25 4.25 0 0 0-.07-.26l1.26-1.26c.23.47.39.99.48 1.52h-1.67Zm-3.1-3.2L9.5 1.53a6.13 6.13 0 0 0-7.25 1.72L1 2v4h4L3.42 4.42a4.46 4.46 0 0 1 4.8-1.62ZM1.49 9.54l1.26-1.26L2.67 8H1c.1.54.26 1.06.49 1.54Z\"/></svg>";
const IconUntrash = "<svg aria-hidden=\"true\" class=\"svg-icon iconUntrash\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M12.14 4H2V3a1 1 0 0 1 1-1h2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1h1.14l1-1 1.42 1.41L2.4 16.56 1 15.14l2-2V5h8.14l1-1ZM15 6.8 4.8 17H13a2 2 0 0 0 2-2V6.8Z\"/></svg>";
const IconUntrashSm = "<svg aria-hidden=\"true\" class=\"svg-icon iconUntrashSm\" width=\"14\" height=\"14\"  viewBox=\"0 0 14 14\"><path  d=\"M7.67 4H1.94V3a1 1 0 0 1 1-1h2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h.73l.94-.94 1.06 1.06-10.6 10.6L0 11.68l2.94-2.94V5h3.73l1-1Zm4.23 0 .04-.03V4h-.03Zm-1 1-7.39 7.4a2 2 0 0 0 1.43.6h4a2 2 0 0 0 2-2V5h-.03Z\"/></svg>";
const IconVK = "<svg aria-hidden=\"true\" class=\"svg-icon iconVK\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#507299\" d=\"M8.44 14.93h1.04s.3-.04.47-.22c.15-.17.15-.48.15-.48s-.03-1.47.62-1.68c.64-.22 1.45 1.41 2.31 2.04.66.48 1.16.38 1.16.38l2.3-.04s1.22-.08.64-1.08c-.04-.08-.32-.75-1.7-2.1-1.45-1.42-1.25-1.2.49-3.65 1.05-1.5 1.48-2.4 1.34-2.8-.12-.36-.9-.27-.9-.27l-2.6.02s-.19-.02-.33.07c-.14.09-.22.3-.22.3s-.42 1.16-.97 2.14c-1.16 2.08-1.63 2.2-1.81 2.06-.43-.3-.32-1.2-.32-1.85 0-2.01.29-3.38-.56-3.6a4.5 4.5 0 0 0-1.22-.13 5.3 5.3 0 0 0-2.15.24c-.3.15-.52.5-.39.51.17.03.56.11.77.41.27.39.25 1.77.25 1.77s.16 2.38-.35 2.67c-.36.2-.83-.21-1.87-2.1-.53-.96-.93-2.03-.93-2.03s-.07-.2-.21-.3c-.16-.13-.4-.18-.4-.18l-2.47.02s-.37.02-.5.19c-.12.14-.01.46-.01.46S2 10.5 4.19 12.9c2.01 2.21 4.29 2.07 4.29 2.07l-.04-.04Z\"/></svg>";
const IconVacation = "<svg aria-hidden=\"true\" class=\"svg-icon iconVacation\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#9199A1\" d=\"m11.56 10.13-1.43 1.43L15.57 17 17 15.57l-5.44-5.44Z\"/><path fill=\"#F7AA6D\" d=\"m16.27 3.63-2.53 2.53a9.86 9.86 0 0 0-10.1-2.54 8.93 8.93 0 0 1 12.63.01Zm-12.65.01a8.93 8.93 0 0 0 .01 12.63l2.53-2.53a9.86 9.86 0 0 1-2.54-10.1Z\"/><path fill=\"#F48024\" d=\"M3.62 3.63h.01c2.66-.34 6.09 1.03 8.85 3.8l-5.06 5.05C4.66 9.7 3.3 6.29 3.62 3.63Z\"/></svg>";
const IconWand = "<svg aria-hidden=\"true\" class=\"svg-icon iconWand\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path  d=\"M14.42 6.48c.3-.3.3-.77 0-1.06l-1.84-1.84a.75.75 0 0 0-1.06 0L.58 14.52c-.3.3-.3.77 0 1.06l1.84 1.84c.3.3.77.3 1.06 0L14.42 6.48Zm-2.37-2.43 1.9 1.9-3 3-1.9-1.9 3-3ZM8 0H7v1H6v1h1v1h1V2h1V1H8V0Zm9 2h-1V1h-1v1h-1v1h1v1h1V3h1V2Zm-2 9h1v1h-1v1h-1v-1h-1v-1h1v-1h1v1Z\"/></svg>";
const IconWave = "<svg aria-hidden=\"true\" class=\"svg-icon iconWave\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"#FFC166\" d=\"M10.7 17c-2.3 0-3.9-2.05-5.07-3.54l-.49-.6c-.67-.8-1.59-1.63-2.4-2.36A10.91 10.91 0 0 1 1.1 8.87c-.16-.28-.15-.8.18-.96.44-.23.95-.05 1.32.24l3.5 2.75c.1.08.2-.06.13-.15-.57-.8-3.42-4.77-3.71-5.15-.49-.63-.17-1.45.68-1.45.44 0 .76.28.96.51l3.6 4.42c.08.09.23 0 .17-.1L4.41 2.96c-.64-1.1 1.13-2 1.77-.9l3.8 6.13c.07.1.22.03.18-.09A153.8 153.8 0 0 0 8.1 2.54c-.31-.68-.2-1.14.36-1.42.52-.27 1.14-.07 1.47.48l3.69 8.3c.02.04.05.05.1.06a.1.1 0 0 0 .09-.07l.66-2.28c.2-.66.95-1 1.6-.81.7.18 1.09.86.89 1.5-.33 1.27-.7 2.52-1.09 3.77-.58 1.86-1.03 3.33-3.11 4.4-.7.35-1.38.53-2.05.53Z\"/><path  d=\"M14 .37a.5.5 0 0 0-.88.45l1.96 3.9a.5.5 0 0 0 .9-.45L14 .37Zm-1.17 2.17a.5.5 0 0 0-.91.42l.84 1.87a.5.5 0 1 0 .91-.41l-.84-1.88Zm-10.6 9.74a.5.5 0 0 1 .7-.02l1.7 1.6a.5.5 0 0 1-.7.72l-1.68-1.6a.5.5 0 0 1-.02-.7Zm-1.39.98a.5.5 0 1 0-.68.73l3.03 2.84a.5.5 0 0 0 .68-.73L.84 13.26Z\" opacity=\".4\"/></svg>";
const IconYandex = "<svg aria-hidden=\"true\" class=\"svg-icon iconYandex\" width=\"18\" height=\"18\"  viewBox=\"0 0 18 18\"><path fill=\"red\" d=\"M11.26 2.48h-.92c-1.38 0-2.73.92-2.73 3.58 0 2.57 1.23 3.4 2.73 3.4h.92V2.48Zm-1.43 8.41L7.1 17.02h-2l3-6.55c-1.4-.72-2.34-2.02-2.34-4.41 0-3.36 2.12-5.03 4.65-5.03h2.57v16h-1.72v-6.14H9.83Z\"/></svg>";


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames not based on template
/******/ 			if (chunkId === "defaultVendors-node_modules_jquery-ui_ui_widgets_datepicker_js") return "webpack-chunks/" + chunkId + ".en.js";
/******/ 			// return url for filenames based on template
/******/ 			return "webpack-chunks/" + chunkId + "." + {"node_modules_jquery-ui_ui_version_js":"efaf6eb1437b4e891d29","node_modules_jquery-ui_ui_i18n_datepicker-af_js-node_modules_jquery-ui_ui_version_js":"f20c695edeeeb0dd9a32","node_modules_jquery-ui_ui_i18n_datepicker-ar-DZ_js-node_modules_jquery-ui_ui_version_js":"62ee2b9fef97a6a0f064","node_modules_jquery-ui_ui_i18n_datepicker-ar_js-node_modules_jquery-ui_ui_version_js":"7a3b0b4e29aa1f52c038","node_modules_jquery-ui_ui_i18n_datepicker-az_js-node_modules_jquery-ui_ui_version_js":"f592bda8c21ea2efbd4b","node_modules_jquery-ui_ui_i18n_datepicker-be_js-node_modules_jquery-ui_ui_version_js":"8de91d67a4be230fdb38","node_modules_jquery-ui_ui_i18n_datepicker-bg_js-node_modules_jquery-ui_ui_version_js":"95ab72a21b3fff3b67c5","node_modules_jquery-ui_ui_i18n_datepicker-bs_js-node_modules_jquery-ui_ui_version_js":"f7a984bdf34263337b6e","node_modules_jquery-ui_ui_i18n_datepicker-ca_js-node_modules_jquery-ui_ui_version_js":"0fa57fc1f912dac84291","node_modules_jquery-ui_ui_i18n_datepicker-cs_js-node_modules_jquery-ui_ui_version_js":"9265bd012a2f3e6ff1cf","node_modules_jquery-ui_ui_i18n_datepicker-cy-GB_js-node_modules_jquery-ui_ui_version_js":"1001930213e5d7c41fcf","node_modules_jquery-ui_ui_i18n_datepicker-da_js-node_modules_jquery-ui_ui_version_js":"0a87ad9cedb018743b44","node_modules_jquery-ui_ui_i18n_datepicker-de-AT_js-node_modules_jquery-ui_ui_version_js":"5d55dfc5ac78f90b73a2","node_modules_jquery-ui_ui_i18n_datepicker-de_js-node_modules_jquery-ui_ui_version_js":"8000549b6484c40459bb","node_modules_jquery-ui_ui_i18n_datepicker-el_js-node_modules_jquery-ui_ui_version_js":"cebae9067e8d79058684","node_modules_jquery-ui_ui_i18n_datepicker-en-AU_js-node_modules_jquery-ui_ui_version_js":"79839aec91a40fe0ac1c","node_modules_jquery-ui_ui_i18n_datepicker-en-GB_js-node_modules_jquery-ui_ui_version_js":"6b236ec284b794db36ac","node_modules_jquery-ui_ui_i18n_datepicker-en-NZ_js-node_modules_jquery-ui_ui_version_js":"9ca638cbd5336998ff2c","node_modules_jquery-ui_ui_i18n_datepicker-eo_js-node_modules_jquery-ui_ui_version_js":"bd8c2786b6cf435bf1df","node_modules_jquery-ui_ui_i18n_datepicker-es_js-node_modules_jquery-ui_ui_version_js":"c9eb892b30c975141e39","node_modules_jquery-ui_ui_i18n_datepicker-et_js-node_modules_jquery-ui_ui_version_js":"788117cbec01db20bc2e","node_modules_jquery-ui_ui_i18n_datepicker-eu_js-node_modules_jquery-ui_ui_version_js":"05a3c1bd76dbf2d80cdd","node_modules_jquery-ui_ui_i18n_datepicker-fa_js-node_modules_jquery-ui_ui_version_js":"9c16f6e2540f58a99b4a","node_modules_jquery-ui_ui_i18n_datepicker-fi_js-node_modules_jquery-ui_ui_version_js":"7337f13c64eb9594a2db","node_modules_jquery-ui_ui_i18n_datepicker-fo_js-node_modules_jquery-ui_ui_version_js":"6c14ebb3b6ddf0c9b1a3","node_modules_jquery-ui_ui_i18n_datepicker-fr-CA_js-node_modules_jquery-ui_ui_version_js":"c0935631670fbe50977f","node_modules_jquery-ui_ui_i18n_datepicker-fr-CH_js-node_modules_jquery-ui_ui_version_js":"f98838f49711ad0dd473","node_modules_jquery-ui_ui_i18n_datepicker-fr_js-node_modules_jquery-ui_ui_version_js":"4251d4905b3fddd1c7c1","node_modules_jquery-ui_ui_i18n_datepicker-gl_js-node_modules_jquery-ui_ui_version_js":"19fa4db07dcc859fd277","node_modules_jquery-ui_ui_i18n_datepicker-he_js-node_modules_jquery-ui_ui_version_js":"b9d5becd06d78839a07a","node_modules_jquery-ui_ui_i18n_datepicker-hi_js-node_modules_jquery-ui_ui_version_js":"9c650f7c0ffe544864bc","node_modules_jquery-ui_ui_i18n_datepicker-hr_js-node_modules_jquery-ui_ui_version_js":"d4b32663e51c5bc51f39","node_modules_jquery-ui_ui_i18n_datepicker-hu_js-node_modules_jquery-ui_ui_version_js":"2a1cabc74c12f7859c04","node_modules_jquery-ui_ui_i18n_datepicker-hy_js-node_modules_jquery-ui_ui_version_js":"8e32f1457c952bf99d02","node_modules_jquery-ui_ui_i18n_datepicker-id_js-node_modules_jquery-ui_ui_version_js":"f3998e584aa31cc0e2f9","node_modules_jquery-ui_ui_i18n_datepicker-is_js-node_modules_jquery-ui_ui_version_js":"6dd8952d5d1ef1386a59","node_modules_jquery-ui_ui_i18n_datepicker-it-CH_js-node_modules_jquery-ui_ui_version_js":"9210f6b1c991c8ec14e1","node_modules_jquery-ui_ui_i18n_datepicker-it_js-node_modules_jquery-ui_ui_version_js":"8a245c805fc28eb63bf3","node_modules_jquery-ui_ui_i18n_datepicker-ja_js-node_modules_jquery-ui_ui_version_js":"62a40df5a9c26dc76e4a","node_modules_jquery-ui_ui_i18n_datepicker-ka_js-node_modules_jquery-ui_ui_version_js":"ed13e545db7f54e6f45f","node_modules_jquery-ui_ui_i18n_datepicker-kk_js-node_modules_jquery-ui_ui_version_js":"6d4e86e8f5dcdccf68a3","node_modules_jquery-ui_ui_i18n_datepicker-km_js-node_modules_jquery-ui_ui_version_js":"586ed4b162d4e752cf45","node_modules_jquery-ui_ui_i18n_datepicker-ko_js-node_modules_jquery-ui_ui_version_js":"a7ea27a8d4be1033ec9a","node_modules_jquery-ui_ui_i18n_datepicker-ky_js-node_modules_jquery-ui_ui_version_js":"f6f583dcc494b5ecd42b","node_modules_jquery-ui_ui_i18n_datepicker-lb_js-node_modules_jquery-ui_ui_version_js":"a25fef1afb20eb5abbb7","node_modules_jquery-ui_ui_i18n_datepicker-lt_js-node_modules_jquery-ui_ui_version_js":"55c88f3d079fbe6ced50","node_modules_jquery-ui_ui_i18n_datepicker-lv_js-node_modules_jquery-ui_ui_version_js":"2e4ba265405c0df78e35","node_modules_jquery-ui_ui_i18n_datepicker-mk_js-node_modules_jquery-ui_ui_version_js":"f1f83f22fadb8f3c9291","node_modules_jquery-ui_ui_i18n_datepicker-ml_js-node_modules_jquery-ui_ui_version_js":"11484eba53508612208b","node_modules_jquery-ui_ui_i18n_datepicker-ms_js-node_modules_jquery-ui_ui_version_js":"6710f0f7aa570ec759b9","node_modules_jquery-ui_ui_i18n_datepicker-nb_js-node_modules_jquery-ui_ui_version_js":"d418c5f176d88087e83d","node_modules_jquery-ui_ui_i18n_datepicker-nl-BE_js-node_modules_jquery-ui_ui_version_js":"aac75c25afbc0899f198","node_modules_jquery-ui_ui_i18n_datepicker-nl_js-node_modules_jquery-ui_ui_version_js":"6d6272a031116ccaae1e","node_modules_jquery-ui_ui_i18n_datepicker-nn_js-node_modules_jquery-ui_ui_version_js":"36156f3b8d59ae531dae","node_modules_jquery-ui_ui_i18n_datepicker-no_js-node_modules_jquery-ui_ui_version_js":"b562266225a543f55479","node_modules_jquery-ui_ui_i18n_datepicker-pl_js-node_modules_jquery-ui_ui_version_js":"f00576992b9c8d1303c5","node_modules_jquery-ui_ui_i18n_datepicker-pt-BR_js-node_modules_jquery-ui_ui_version_js":"8c41c09bbb4720759b1d","node_modules_jquery-ui_ui_i18n_datepicker-pt_js-node_modules_jquery-ui_ui_version_js":"4fea2ab5c3ba3ebaefb3","node_modules_jquery-ui_ui_i18n_datepicker-rm_js-node_modules_jquery-ui_ui_version_js":"b518095a3cc7dcad9821","node_modules_jquery-ui_ui_i18n_datepicker-ro_js-node_modules_jquery-ui_ui_version_js":"d2baf8c061b2cc039a9e","node_modules_jquery-ui_ui_i18n_datepicker-ru_js-node_modules_jquery-ui_ui_version_js":"42fc443044491d984784","node_modules_jquery-ui_ui_i18n_datepicker-sk_js-node_modules_jquery-ui_ui_version_js":"71cde72d5c83a95d0a65","node_modules_jquery-ui_ui_i18n_datepicker-sl_js-node_modules_jquery-ui_ui_version_js":"2153b31597313bdf2ca3","node_modules_jquery-ui_ui_i18n_datepicker-sq_js-node_modules_jquery-ui_ui_version_js":"f914bc22c85484c89431","node_modules_jquery-ui_ui_i18n_datepicker-sr-SR_js-node_modules_jquery-ui_ui_version_js":"70eb16c912075837e944","node_modules_jquery-ui_ui_i18n_datepicker-sr_js-node_modules_jquery-ui_ui_version_js":"b220bdd33ded993fd8fb","node_modules_jquery-ui_ui_i18n_datepicker-sv_js-node_modules_jquery-ui_ui_version_js":"e5ef65688b75964d5fcf","node_modules_jquery-ui_ui_i18n_datepicker-ta_js-node_modules_jquery-ui_ui_version_js":"836ae294a8eb3c3448fd","node_modules_jquery-ui_ui_i18n_datepicker-th_js-node_modules_jquery-ui_ui_version_js":"0bc7d4af0251be280b41","node_modules_jquery-ui_ui_i18n_datepicker-tj_js-node_modules_jquery-ui_ui_version_js":"7c0a879288fd6d7229e3","node_modules_jquery-ui_ui_i18n_datepicker-tr_js-node_modules_jquery-ui_ui_version_js":"a2872d06293449fa8438","node_modules_jquery-ui_ui_i18n_datepicker-uk_js-node_modules_jquery-ui_ui_version_js":"9d5348a20724ff098664","node_modules_jquery-ui_ui_i18n_datepicker-vi_js-node_modules_jquery-ui_ui_version_js":"595cf8fbae403561a194","node_modules_jquery-ui_ui_i18n_datepicker-zh-CN_js-node_modules_jquery-ui_ui_version_js":"4bf568fee3b02e9c91da","node_modules_jquery-ui_ui_i18n_datepicker-zh-HK_js-node_modules_jquery-ui_ui_version_js":"04c014a1f9ee27def2fe","node_modules_jquery-ui_ui_i18n_datepicker-zh-TW_js-node_modules_jquery-ui_ui_version_js":"38f7ac826d9c055d3f80","_Scripts_site-includes_chess_mod_ts":"47de71de4c594fe33cd3","_Scripts_site-includes_mathHideUserRep_mod_ts":"434d1be6af2805180780","_Scripts_site-includes_poker_mod_ts":"8018c2eab433a3d615b0"}[chunkId] + ".en.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "stackoverflow:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"full": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkstackoverflow"] = self["webpackChunkstackoverflow"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var __webpack_exports__ = {};
/*!***************************************************!*\
  !*** ./_Scripts/_Includes/set-public-path.mod.ts ***!
  \***************************************************/
__webpack_require__.r(__webpack_exports__);
// We need to set the public path at runtime based on the GlobalRoot site setting.
// (We don't know at build time where the static files will be,
// since we could be deployed on-premise.)
// The value of that site setting gets written out to the dom in Master.cshtml
// (see JavaScriptHelper.PublicPath()) so that we can read it here
__webpack_require__.p = document.getElementById("webpack-public-path").innerText + "Js/";


})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!******************************************!*\
  !*** ./_Scripts/PartialJS/full/index.ts ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _full_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../full-common */ "./_Scripts/PartialJS/full-common/index.ts");
/* harmony import */ var _00_import_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./00_import-js */ "./_Scripts/PartialJS/full/00_import-js.ts");
/* harmony import */ var _definitions_CSharpToTypescript__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./definitions/CSharpToTypescript */ "./_Scripts/PartialJS/full/definitions/CSharpToTypescript.ts");
/* harmony import */ var _definitions_CSharpToTypescript__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_definitions_CSharpToTypescript__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _99_rollback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./99_rollback */ "./_Scripts/PartialJS/full/99_rollback.ts");
/* harmony import */ var _99_rollback__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_99_rollback__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _99_TagPreferences__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./99_TagPreferences */ "./_Scripts/PartialJS/full/99_TagPreferences.ts");
/* harmony import */ var _99_TagPreferences__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_99_TagPreferences__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _99_UserFlags__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./99_UserFlags */ "./_Scripts/PartialJS/full/99_UserFlags.ts");
/* harmony import */ var _99_UserFlags__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_99_UserFlags__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _LegacyJS_bounty_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../LegacyJS/bounty.js */ "./_Scripts/LegacyJS/bounty.js");
/* harmony import */ var _LegacyJS_bounty_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_LegacyJS_bounty_js__WEBPACK_IMPORTED_MODULE_6__);
/*** IMPORTS FROM imports-loader ***/


StackExchange = window.StackExchange = (window.StackExchange || {});
StackOverflow = window.StackOverflow = (window.StackOverflow || {});










})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,